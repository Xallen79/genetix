function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,a,i,o=e.length,r=o?e[0].length:0,s="",l=[];t>0;t--)s+="\0";for(n=0;n<o;n++){for(a=0;a<r;a++)i=e[n][a],l.push(String.fromCharCode(i[2])+String.fromCharCode(i[1])+String.fromCharCode(i[0]));l.push(s)}return l.join("")}function n(e,t){var n,a,i,o=e.length,r=parseInt(o*t),s=o?e[0].length:0,l=parseInt(s*t),c=[];for(i=0;i<r;i++)for(c.push(n=[]),a=0;a<l;a++)n.push(e[parseInt(i/t)][parseInt(a/t)]);return c}window.generateBitmapDataURL=function(a,i){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;i=i||1,1!=i&&(a=n(a,i));var o,r=a.length,s=r?a[0].length:0,l=(4-3*s%4)%4,c=(3*s+l)*r,u=54+c;return r=e(r,4),s=e(s,4),c=e(c,4),u=e(u,4),o="BM"+u+"\0\0\0\x006\0\0\0(\0\0\0"+s+r+"\0\0\0\0\0\0"+c+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(a,l),"data:image/bmp;base64,"+btoa(o)}}(),function(e,t,n){function a(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?o=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?o=function(e){e=e.substring(1);var t=0,n=e.length,a=[];if(3==n)for(;t<n;t++)a.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)a.push(parseInt("0x"+e.substring(t,t+2)));return a}:alert("Unparseable color: "+e)}function i(e){var i=t.getElementById(e).style.backgroundColor;return""===i?[255,255,255]:(o===n&&a(i),o(i))}var o;e.generateLowResBitmap=function(n){n=n||10;for(var a,o,r,s,l,c=50,u=49,d=[];u>=0;u--)for(d.push(o=[]),a=0;a<c;a++)o.push(i(a+"_"+u));return s=t.createElement("img"),l=e.generateBitmapDataURL(d,n),s.src=l,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",r=t.getElementById("img"),null===r&&(r=t.createElement("div"),r.id="img",t.getElementById("wrap").appendChild(r)),r.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',r.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},r.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),angular.module("bloqhead.genetixApp",["ui.router","lz-string","ui.bootstrap","sprintf","ngAnimate","lvl.directives.dragdrop","ui.toggle"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$uibTooltipProvider","$animateProvider",function(e,t,n,a,i){t.otherwise("/main");var o=[];o.push({name:"home",url:"/",component:"bloqhead.components.home"}),o.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),o.push({name:"home.farm",url:"farm",component:"bloqhead.components.farmUI"}),o.push({name:"home.achievements",url:"achievements",component:"bloqhead.components.achievementsUI"}),o.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),o.forEach(function(t){e.state(t)}),a.options({appendToBody:!0,placement:"auto top",popupCloseDelay:250,popupDelay:250})}]).run(["gameService",function(e){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.achievementsUI",{templateUrl:"components/achievements/achievements.html",controller:"bloqhead.controllers.achievementsUI",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.achievementsUI",["$rootScope","achievementSetup","resourceTypes","achievementService",function(e,t,n,a){var i=this;i.achievementService=a,i.achievementSetup=t,i.$onInit=function(){i.achievementProgress=a.getProgressSnapshot(),console.log(i.achievementProgress)},i.getAchievementClass=function(e){var t={};return t},i.getAchievementRankClass=function(e,t){var a={};if(e.res){var o=i.achievementService.state.progress.achievements[e.aid]||{};o.lastRank>=t[0]&&(a["achievement-rank-"+n[e.res].attr]=!0)}return a}}]);var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],a=0;a<e.length;a++)e[a].hasTrait(t)&&n.push(e[a]);return n}}),game.factory("Bee",["$filter","TraitInspector","Genome","jobTypes","resourceTypes",function(e,t,n,a,i){var o=function(e){this.traitInspector=new t,this.update(e)};o.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.pos=e.pos||this.pos||{x:0,y:0},this.dt=e.dt||this.dt||(new Date).getTime(),this.queenParentId=e.queenParentId||this.queenParentId||null,this.droneParentId=e.droneParentId||this.droneParentId||null,this.generation=e.generation||this.generation||0,this.jid=e.currentJob||e.jid||this.jid||"IDLE",this.msSinceWork=e.msSinceWork||this.msSinceWork||0,this.onStrike=e.onStrike||this.onStrike||!1,this.earnings=e.earnings||this.earnings||angular.copy(r),this.beeMutationChance=e.beeMutationChance||this.beeMutationChance||.005,this.genome=new n(e.genomeState||this.genomeState||{mutationChance:this.beeMutationChance}),this.genomeState=this.genome.getState(),this.dead=e.dead||this.dead||!1,this.traits=this.traitInspector.getTraits(this.genome),this.abilities=this.traitInspector.getAbilities(this.traits),this.name=this.beetype+"#"+this.id},o.prototype.getState=function(){return{id:this.id,dt:this.dt,queenParentId:this.queenParentId,droneParentId:this.droneParentId,generation:this.generation,jid:this.jid,msSinceWork:this.msSinceWork,onStrike:this.onStrike,earnings:this.earnings,beeMutationChance:this.beeMutationChance,genomeState:this.genomeState}},o.prototype.getTraits=function(){return this.traits},o.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},o.prototype.getAbility=function(e){return this.abilities[e]},o.prototype.die=function(){console.log(this.name+" died."),this.dead=!0},o.prototype.mature=function(e){console.error(this.beetype+" cannot mature. type: "+e)},o.prototype.hatch=function(e){console.error(this.beetype+" cannot hatch. type: "+e)},o.prototype.doWork=function(e,t){return null};var r={};for(var s in i)r[s]={rid:s,amount:0};var l={QUEEN:"queen",DRONE:"drone",WORKER:"worker",EGG:"egg",LARVA:"larva"},c=function(e){this.config=e,this.beetype=l.QUEEN,this.minDrones=10,o.call(this,e)};c.prototype=Object.create(o.prototype),c.prototype.update=function(e){e=e||{},o.prototype.update.apply(this,[e]),this.droneGenomeStates=e.droneGenomeStates||this.droneGenomeStates||[],this.droneIds=e.droneIds||this.droneIds||[]},c.prototype.getState=function(){var e=o.prototype.getState.apply(this);return e.droneGenomeStates=this.droneGenomeStates,e.droneIds=this.droneIds,e},c.prototype.mate=function(e){return e.beetype!==l.DRONE?void console.log("Queen cannot mate with: "+e.beetype):(this.droneGenomeStates.push(e.genome.getState()),this.droneIds.push(e.id),void e.die())},c.prototype.canLayEggs=function(e){var t=this.droneGenomeStates.length>=this.minDrones;return t&=e.getNurseryCount()<e.getNurseryLimit()},c.prototype.layEgg=function(e){var t=this.genome.getEggGenome(),n=new p({id:e,dt:(new Date).getTime(),generation:this.generation+1,genomeState:t.getState(),queenParentId:this.id,beeMutationChance:this.beeMutationChance});return n.update(),n},c.prototype.doWork=function(e,t){if(this.jid!==a.IDLE.jid){o.prototype.doWork.apply(this,[e,t]);var n=this.getAbility("PRD_E").value;for(this.msSinceWork+=e;this.msSinceWork>=n;){if(this.canLayEggs(t)){var i=this.layEgg(t.getNextId());t.bees.push(i)}this.msSinceWork-=n}}},c.prototype.fertilizeEgg=function(e,t){var n=randomIntFromInterval(0,this.droneGenomeStates.length-1),a=this.droneGenomeStates[n],i=e.genome.fertilize(a),o=new g({id:t,dt:(new Date).getTime(),generation:this.generation+1,genomeState:i.getState(),queenParentId:this.id,droneParentId:this.droneIds[n],beeMutationChance:this.beeMutationChance});return o};var u=function(e){this.beetype=l.WORKER,o.call(this,e)};u.prototype=Object.create(o.prototype),u.prototype.update=function(e){e=e||{},o.prototype.update.apply(this,[e])},u.prototype.getState=function(){var e=o.prototype.getState.apply(this);return e};var d=function(e){this.beetype=l.DRONE,o.call(this,e)};d.prototype=Object.create(o.prototype),d.prototype.update=function(e){e=e||{},o.prototype.update.apply(this,[e])},d.prototype.getState=function(){var e=o.prototype.getState.apply(this);return e};var p=function(e){this.beetype=l.EGG,o.call(this,e)};p.prototype=Object.create(o.prototype),p.prototype.update=function(e){e=e||{},o.prototype.update.apply(this,[e])},p.prototype.getState=function(){var e=o.prototype.getState.apply(this);return e},p.prototype.hatch=function(e){if(e===l.DRONE)return new d({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:a.IDLE.jid,beeMutationChance:this.beeMutationChance})};var g=function(e){this.beetype=l.LARVA,o.call(this,e)};return g.prototype=Object.create(o.prototype),g.prototype.update=function(e){e=e||{},o.prototype.update.apply(this,[e])},g.prototype.getState=function(){var e=o.prototype.getState.apply(this);return e},g.prototype.mature=function(e){return e===l.WORKER?new u({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:a.IDLE.jid,beeMutationChance:this.beeMutationChance}):e===l.QUEEN?new c({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:a.IDLE.jid,beeMutationChance:this.beeMutationChance}):void 0},{Queen:c,Drone:d,Worker:u,Egg:p,Larva:g,Types:l}}]);var game=angular.module("bloqhead.genetixApp");game.factory("Genome",["Chromosome",function(e){var t=function(e){e=e||{},this.update(e)};return t.prototype.update=function(e){this.chromosomeCount=e.chromosomeCount||this.chromosomeCount||10,this.geneCount=e.GeneCount||this.geneCount||10,this.mutationChance=e.mutationChance||this.mutationChance||0,this.hasChromosomePairs=angular.isDefined(e.hasChromosomePairs)?e.hasChromosomePairs:!angular.isDefined(this.hasChromosomePairs)||this.hasChromosomePairs,this.chromosomes=angular.isDefined(e.chromosomes)?this.loadChromosomes(e.chromosomes):this.chromosomes||this.generateNewChromosomes()},t.prototype.getState=function(){return{chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,hasChromosomePairs:this.hasChromosomePairs,mutationChance:this.mutationChance,chromosomes:angular.copy(this.chromosomes)}},t.prototype.generateNewChromosomes=function(){var t=[];t.push([]),this.hasChromosomePairs&&t.push([]),chromoState={geneCount:this.geneCount,mutationChance:this.mutationChance};for(var n=0;n<this.chromosomeCount;n++)t[0].push(new e(chromoState)),this.hasChromosomePairs&&t[1].push(new e(chromoState));return t},t.prototype.loadChromosomes=function(t){var n=[];n.push([]),this.hasChromosomePairs&&n.push([]);for(var a=0;a<this.chromosomeCount;a++){var i={geneCount:t[0][a].geneCount,mutationChance:t[0][a].mutationChance,genes:t[0][a].genes,mutationString:t[0][a].mutationString};n[0].push(new e(i)),this.hasChromosomePairs&&(i={geneCount:t[1][a].geneCount,mutationChance:t[1][a].mutationChance,genes:t[1][a].genes,mutationString:t[1][a].mutationString},n[1].push(new e(i)))}return n},t.prototype.getGene=function(e,t){var n=0;return n=this.hasChromosomePairs?this.chromosomes[0][e].getGene(t)|this.chromosomes[1][e].getGene(t):this.chromosomes[0][e].getGene(t)},t.prototype.fertilize=function(e){var n=new t(e);if(this.hasChromosomePairs===n.hasChromosomePairs)return void console.error("Cannot mate these genomes.",this,n);var a=[];a.push(angular.copy(this.chromosomes[0])),a.push(angular.copy(n.chromosomes[0]));for(var i=0;i<this.chromosomeCount;i++)a[0][i].doMutation(),a[1][i].doMutation();var o=new t({chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,hasChromosomePairs:!0,chromosomes:a});return console.log(o),o},t.prototype.getEggGenome=function(){var n=[];n.push([]);for(var a=0;a<this.chromosomeCount;a++){var i=randomIntFromInterval(0,1),o=this.chromosomes[i][a];n[0].push(new e({geneCount:o.geneCount,mutationChance:o.mutationChance,genes:o.genes}))}var r=new t({hasChromosomePairs:!1,chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,chromosomes:n,mutationChance:this.mutationChance});return r},t}]),game.factory("Chromosome",[function(){geneMask=[1,2,4,8,16,32,64,128,256,512,1024];var e=function(e){e=e||{},this.update(e)};return e.prototype.update=function(e){if(this.geneCount=e.geneCount||this.geneCount||10,this.genes=angular.isDefined(e.genes)?e.genes:angular.isDefined(this.genes)?this.genes:randomIntFromInterval(0,Math.pow(2,this.geneCount)-1),this.mutationChance=e.mutationChance||this.mutationChance||.01,this.mutationString=e.mutationString||this.mutationString||"",geneMask=geneMask||[],geneMask.length<this.geneCount){geneMask=[];for(var t=0;t<this.geneCount;t++)geneMask.push(Math.pow(2,t))}},e.prototype.toBitString=function(){return this.genes.toString(2)},e.prototype.getGene=function(e){return this.genes&geneMask[e]},e.prototype.doMutation=function(){this.mutationString="";for(var e=0;e<this.geneCount;e++)Math.random()<this.mutationChance?this.mutationString+="1":this.mutationString+="0";this.gene^=parseInt(this.mutationString,2)},e}]);var game=angular.module("bloqhead.genetixApp");game.factory("Hive",["$rootScope","$filter","$q","Bee","logService","jobTypes",function(e,t,n,a,i,o){var r=function(e){this.update(e)};return r.prototype.update=function(e){if(e=e||{},this.id=e.id||this.id,this.pos=e.pos||this.pos||"A1",this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.newbornLimit=e.newbornLimit||this.newbornLimit||0,this.maxSize=e.maxSize||this.maxSize||10,this.beeMutationChance=e.beeMutationChance||this.beeMutationChance||.005,this.initialSize=e.initialSize||this.initialSize||2,this.nextId=e.nextId||this.nextId||0,this.msSinceEgg=e.msSinceEgg||this.msSinceEgg||0,this.bees=this.bees||[],e.queenStates)for(var t=0;t<e.queenStates.length;t++)this.bees.push(new a.Queen(e.queenStates[t]));if(0===this.getByType(a.Types.QUEEN).length&&this.createInitialQueen(!0),e.droneStates)for(var n=0;n<e.droneStates.length;n++)this.bees.push(new a.Drone(e.droneStates[n]));if(e.workerStates)for(var i=0;i<e.workerStates.length;i++)this.bees.push(new a.Worker(e.workerStates[i]));if(e.eggStates)for(var o=0;o<e.eggStates.length;o++)this.bees.push(new a.Egg(e.eggStates[o]));if(e.larvaStates){this.larva=[];for(var r=0;r<e.larvaStates.length;r++)this.bees.push(new a.Larva(e.larvaStates[r]))}},r.prototype.getState=function(){for(var e=this,t={id:this.id,currentGeneration:this.currentGeneration,maxSize:this.maxSize,beeMutationChance:this.beeMutationChance,initialSize:this.initialSize,nextId:this.nextId,queenStates:[],droneStates:[],workerStates:[],eggStates:[],larvaStates:[],msSinceEgg:this.msSinceEgg,pos:this.pos},n=e.getByType(a.Types.QUEEN),i=e.getByType(a.Types.DRONE),o=e.getByType(a.Types.WORKER),r=e.getByType(a.Types.EGG),s=e.getByType(a.Types.LARVA),l=0;l<n.length;l++)t.queenStates.push(n[l].getState());for(var c=0;c<i.length;c++)t.droneStates.push(i[c].getState());for(var u=0;u<o.length;u++)t.workerStates.push(o[u].getState());for(var d=0;d<r.length;d++)t.eggStates.push(r[d].getState());for(var p=0;p<s.length;p++)t.larvaStates.push(s[p].getState());return t},r.prototype.getNextId=function(){return++this.nextId},r.prototype.createInitialQueen=function(e){var t=new a.Queen({id:this.getNextId(),generation:0,dominant:!0,beeMutationChance:this.beeMutationChance,jid:"BREEDER"});if(e)for(var n=0;n<10;n++){var i=new a.Drone({id:this.getNextId(),generation:0,beeMutationChance:this.beeMutationChance});t.mate(i)}t.update(),this.bees.push(t)},r.prototype.getByType=function(e){return t("filter")(this.bees,{beetype:e},!0)},r.prototype.getById=function(e){return t("filter")(this.bees,{id:e},!0)[0]},r.prototype.getNurseryCount=function(){return this.getByType(a.Types.EGG).length+this.getByType(a.Types.LARVA).length},r.prototype.getNurseryLimit=function(){return 5},r.prototype.getPopulationCount=function(){return this.bees.length-this.getNurseryCount()},r.prototype.getPopulationLimit=function(){return 20},r.prototype.getHeadQueen=function(){return t("filter")(this.getByType(a.Types.QUEEN),{jid:"BREEDER"})[0]},r.prototype.processEggFate=function(e,n){var o,r=this.bees.filter(function(t,n){if(t.id===e&&t.beetype===a.Types.EGG)return o=n,!0})[0],s="";switch(n){case"DRONE":var l=r.hatch(a.Types.DRONE);this.bees[o]=l,s=t("fmt")("New drone in Hive#%(id)d! (%(newname)s)",{id:this.id,newname:l.name});break;case"LARVA":var c=this.getHeadQueen();if(c){var u=c.fertilizeEgg(r,r.id);this.bees[o]=u,s=t("fmt")("New larva in Hive#%(id)d! (%(newname)s)",{id:this.id,newname:u.name})}else s=t("fmt")("Cannot fertilize egg. There is no queen assigned to breeding duties.");break;case"CONSUME_EGG":s=t("fmt")("%(name)s has been turned into food for Hive#%(id)d",{name:r.name,id:this.id}),this.bees.splice(o,1);break;default:s=t("fmt")("Invalid %(fate)s",{fate:n}),console.error("Invalid fate: "+n)}i.logBreedMessage(s)},r.prototype.processLarvaFate=function(e,n){var o,r=this.bees.filter(function(t,n){if(t.id===e)return o=n,!0})[0],s="";switch(n){case"WORKER":var l=r.mature(a.Types.WORKER);this.bees[o]=l,s=t("fmt")("New worker in Hive#%(id)d! (%(name)s)",{name:r.name,id:this.id});break;case"QUEEN":var c=r.mature(a.Types.QUEEN);this.bees[o]=c,s=t("fmt")("New queen in Hive#%(id)d! (%(name)s)",{name:r.name,id:this.id});break;case"CONSUME_LARVA":s=t("fmt")("%(name)s will be turned into food for Hive#%(id)d",{name:r.name,id:this.id}),r.die();break;default:s=s=t("fmt")("Invalid %(fate)s",{fate:n}),console.error("Invalid fate: "+n)}i.logBreedMessage(s)},r.prototype.setUnitJob=function(e,n){var a=this.getById(e,"WORKER");if(a){a.jid=n;var r=o[n].name,s=r.charAt(0).toLowerCase(),l="a"===s||"e"===s||"i"===s||"o"===s||"u"===s?"an":"a",c=t("fmt")("%(name)s is now %(article)s %(job)s",{name:a.name,article:l,job:r});i.logWorkMessage(c)}},r.prototype.setPopulationLimit=function(e){this.maxSize=e},r.prototype.processFate=function(e,t){"DRONE"===t||"LARVA"===t||"CONSUME_EGG"===t?this.processEggFate(e,t):this.processLarvaFate(e,t)},r.prototype.handleGameLoop=function(e,t){var n=this;if(0!==t){if("gameLoopEvent"!==e.name)return void console.error("Hive.handleGameLoop - Invalid event: "+e);for(var a=0;a<n.bees.length;a++)n.bees[a].doWork(t,this)}},r}]);var game=angular.module("bloqhead.genetixApp");game.factory("TraitInspector",["$filter","traitDefinitions","beeAbilities",function(e,t,n){var a=function(e){this.update(e)};a.prototype.update=function(e){"undefined"==typeof e&&(e={})},a.prototype.getTraits=function(e){for(var n=[],a=c(t),i=0;i<a.length;i++){for(var o=a[i],r=!0,s=0;s<o.genes.length&&r===!0;s++){var l=o.genes[s],u=e.getGene(l.chromosome,l.gene);u!==l.value&&(r=!1)}r&&n.push(o)}return n},a.prototype.getAbilities=function(e){for(var t=angular.copy(n),a=0;a<e.length;a++)for(var i=e[a],o=0;o<i.mods.length;o++){var r=i.mods[o];for(var s in r)r.hasOwnProperty(s)&&(t[s].add=t[s].add||0,t[s].percent=t[s].percent||0,t[s].add+=angular.isDefined(r[s].add)?r[s].add:0,t[s].percent+=angular.isDefined(r[s].percent)?r[s].percent/100:0)}for(var l in t)if(t.hasOwnProperty(l)){var c=t[l];c.add=c.add||0,c.percent=c.percent||0,c.value=c.baseValue,c.value+=c.add,c.value*=1+c.percent}return t};var i=[],o=[],r=!1,s=function(e){return o.filter(function(t){return e===t.name})[0]},l=function(e){if(angular.isDefined(e.requiredTraits))for(var t=0;t<e.requiredTraits.length;t++){var n=e.requiredTraits[t],a=s(n);i.indexOf(a.name)===-1&&l(a);for(var o=0;o<a.genes.length;o++)e.genes.push(angular.copy(a.genes[o]))}i.push(e.name)},c=function(e){if(r)return o;o=e;for(var t=0;t<o.length;t++){var n=o[t];l(n)}return r=!0,o};return a}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBuildingList",{templateUrl:"components/buildingList/buildingList.html",controller:"bloqhead.controllers.buildingList"}),game.controller("bloqhead.controllers.buildingList",["$scope","buildingService","resourceService","resourceTypes",function(e,t,n,a){var i=this;i.$onInit=function(){i.buildings=[],i.resourceTypes=a,i.resourceService=n,t.SubscribeBuildingsChangedEvent(e,i.updateBuildings)},i.updateBuildings=function(e,t){i.buildings=t},i.build=function(e){t.build(e)}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div><button title="Save Game" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.saveGame();"><i class="fa fa-floppy-o"></i></button><button title="Hard Reset" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.resetSave();"><i class="fa fa-recycle"></i></button><button title="Play/Pause" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["$scope","gameService","gameLoopService","gameStates",function(e,t,n,a){var i=this;i.$onInit=function(){i.currentState=n.getState().currentState},i.toggleState=function(){i.currentState=i.currentState===a.RUNNING?a.PAUSED:a.RUNNING,n.setState(i.currentState)},i.getIcon=function(){return i.currentState===a.RUNNING?"fa-pause":"fa-play"},i.resetSave=function(){t.hardReset()},i.saveGame=function(){t.saveGame()}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log",bindings:{pauseScroll:"<"}}),game.controller("bloqhead.controllers.log",["$scope","$location","$anchorScroll","$timeout","logService","logTypes",function(e,t,n,a,i,o){var r=this;r.$onInit=function(){r.messages=[],i.SubscribeNewMessageEvent(e,r.receiveMessages)},r.getLogClass=function(e){var t="list-group-item-",n="";switch(e){case o.GENERAL:n="color-general";break;case o.ACHIEVEMENT:n="color-achievement";break;case o.BREED:n="color-breed";break;case o.WORK:n="color-work";break;default:n=t+"none"}return n},r.receiveMessages=function(e,t){r.messages=t,r.pauseScroll||(r.scrolling=!0,a(function(){n("scrollBottom"),r.scrolling=!1},0,!1))}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this,a=500;n.init=function(e){e&&(n.messages=[],n.logGeneralMessage("Welcome to Genetix!"))},n.logGeneralMessage=function(i){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:i}),n.messages.length>a&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(i){n.messages.push({type:t.BREED,timestamp:Date.now(),message:i}),n.messages.length>a&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(i){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:i}),n.messages.length>a&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logWorkMessage=function(i){n.messages.push({type:t.WORK,timestamp:Date.now(),message:i}),n.messages.length>a&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,a){var i=e.$on("newMessageEvent",a.bind(this));t.$on("$destroy",i),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadMap",{templateUrl:"components/map/map.html",controller:"bloqhead.controllers.map",bindings:{}}),game.controller("bloqhead.controllers.map",["$scope","$rootScope","$timeout","$filter","$q","mapService",function(e,t,n,a,i,o){function r(e,t){d.mapconfig=t,d.mapconfig.canvasSize&&l(),d.mapconfig.canvasLocation?d.moveCanvas(d.mapconfig.canvasLocation.X,d.mapconfig.canvasLocation.Y):d.moveCanvas(0,0)}function s(){"undefined"!=typeof c&&"undefined"!=typeof u&&(d.needsResize&&(d.needsResize=!1,l()),o.drawMap(u))}function l(){var e=parseFloat(c.style.width),t=parseFloat(c.style.height);c.style.width=d.mapconfig.canvasSize.X+"px",c.style.height=d.mapconfig.canvasSize.Y+"px",c.width=c.offsetWidth,c.height=c.offsetHeight,e=e||d.mapconfig.canvasSize.X,t=t||d.mapconfig.canvasSize.Y;var n=parseInt((0-(d.mapconfig.canvasSize.X-e))/2),a=parseInt((0-(d.mapconfig.canvasSize.Y-t))/2);0===n&&0===a||d.moveCanvasBy(n,a)}var c,u,d=this,p=20,g=160,m=["bee.svg","bee-2.svg","egg.svg","honeypot.svg","larva.svg","nectar.svg","nectar2.svg","pollen.svg","tombstone.svg"];d.mapService=o,d.needsResize=!0,d.$onInit=function(){},d.$postLink=function(){d.loadImages(m).then(function(e){d.images=e,d.setupCanvas(),$(".map-container").append(e["bee.svg"])},function(e){console.error(e)},function(e){console.log(e)})},d.setupCanvas=function(){c=document.getElementById("map"),u=c.getContext("2d"),c.parentElement.addEventListener("mousewheel",d.mousewheel,!1),c.parentElement.addEventListener("mousedown",d.mousedown,!1),document.addEventListener("mouseup",d.mouseup,!1),c.addEventListener("click",d.click,!1),o.SubscribeMapInitializedEvent(e,r),o.SubscribeMapUpdateEvent(e,s)},d.loadImages=function(e){var t=i.defer(),n=[],a=0;return angular.forEach(e,function(o){var r=i.defer();!function(){var n=$(new Image(100,100)).on("load",function(){a++,t.notify(Math.ceil(a/e.length*100)),r.resolve({name:o,image:n})}).prop("src","images/map/"+o)}(),n.push(r.promise)}),i.all(n).then(function(e){for(var n={},a=0;a<e.length;a++)n[e[a].name]=e[a].image;t.resolve(n)},function(e){t.reject(e)}),t.promise},d.mousewheel=function(e){return e.wheelDeltaY>0&&d.zoomIn(),e.wheelDeltaY<0&&d.zoomOut(),!1},d.mousedown=function(e){document.addEventListener("mousemove",d.mousemove,!1)},d.mouseup=function(e){document.removeEventListener("mousemove",d.mousemove),n(function(){d.stopClick=!1})},d.click=function(e){return d.stopClick||o.mapClicked(e.offsetX,e.offsetY),!1},d.mousemove=function(e){d.moveCanvasBy(e.movementX,e.movementY),0===e.movementX&&0===e.movementY||(d.stopClick=!0)},d.zoomIn=function(){d.mapconfig.HEIGHT<g&&d.setHexSize(1.1*d.mapconfig.HEIGHT)},d.zoomOut=function(){d.mapconfig.HEIGHT>p&&d.setHexSize(d.mapconfig.HEIGHT/1.1)},d.moveCanvas=function(e,t){c.style.left=e+"px",c.style.top=t+"px",d.mapService.mapMoved(e,t)},d.moveCanvasBy=function(e,t){var n=parseFloat(c.style.left)+e,a=parseFloat(c.style.top)+t;d.moveCanvas(n,a)},d.setHexSize=function(e){d.mapconfig=o.setHexSizeByHeight(e),d.needsResize=!0}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadGoalList",{templateUrl:"components/goalList/goalList.html",controller:"bloqhead.controllers.goalList",bindings:{}}),game.controller("bloqhead.controllers.goalList",["$rootScope","resourceTypes","achievementService",function(e,t,n){var a=this;a.resourceTypes=t,a.achievementService=n,a.$onInit=function(){}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBee",{templateUrl:"components/bee/bee.html",controller:"bloqheader.controllers.bee",bindings:{unit:"<",canBreed:"<",assign:"&",mode:"@",display:"@"}}),game.controller("bloqheader.controllers.bee",["$uibModal","jobTypes","bloqheadGetGeneProgressStyle","resourceTypes","resourceService",function(e,t,n,a,i){var o=this;o.$onInit=function(){o.display=o.display||"TILE",o.jobTypes=t,o.resourceTypes=a,o.resourceService=i},o.canFertilize=function(){return!0},o.assignMe=function(e){"CONSUME"===e&&(e="egg"===o.unit.beetype?"CONSUME_EGG":"CONSUME_LARVA"),o.assign({$id:o.unit.id,$type:e})},o.getGeneTraitRangeStyle=function(e,t){return n().traitRange(e,t)},o.getGeneRangeStyle=function(e){return n().range(e[0],e[1])},o.getGeneValueStyle=function(e){return n().value(e[1]-e[0])},o.imageHover=function(e){},o.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return o.unit}}})}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.home",{templateUrl:"components/home.html",controller:"bloqhead.controllers.home"}),game.controller("bloqhead.controllers.home",function(){this.$onInit=function(){}}),game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","$filter","achievementService","resourceService","mapService",function(e,t,n,a,i){var o=this;o.$onInit=function(){o.maxPopulation=0,i.SubscribeHiveChangeEvent(e,o.updateHive),n.SubscribeNewRewardEvent(e,o.rewardEarned)},o.rewardEarned=function(e,t){console.log(t)},o.assign=function(e,t){o.hive.setUnitJob(e,t)},o.decideFate=function(e,t){o.hive.processFate(e,t)},o.updateHive=function(e,t){o.hive=t.currentHive}}]);var game=angular.module("bloqhead.genetixApp");game.filter("applyPopulationFilter",function(){return function(e,t){if(null===e||"undefined"==typeof e)return[];"string"==typeof t&&(t=JSON.parse(t));var n=[],a=[],i=[];i=t&&t.type?e.getByType(t.type):i.concat(e.bees);for(var o=0;o<i.length;o++){var r=!0;if(t&&t.traits)for(var s=0;s<t.traits.length;s++){var l=t.traits[s],c=!0;if("-"==l[0]&&(l=l.slice(1),c=!1),c!==i[o].hasTrait(l)){r=!1;break}}r&&n.push(i[o]),r||a.push(i[o])}return n}}),game.service("bloqheadGetGeneProgressStyle",[function(){function e(e,t,n,a,i){return(e-t)*(i-a)/(n-t)+a}return function(t){var n=t||{};return{range:function(t,n){var a={},i=e(-1*t,-255,255,0,100),o=e(n,-255,255,0,100);return a.marginLeft=i+"%",a.width=o-i+"%",a},traitRange:function(t,a){var i={};if(null!==a)for(var o=n.indexOf(t),r=0;r<a.genes.length;r++){var s=a.genes[r];if(s[0]==o){var l=e(s[1],-255,255,0,100),c=e(s[2],-255,255,0,100);i.marginLeft=l+"%",i.width=c-l+"%"}}return i},value:function(t){var n=e(t,-255,255,0,100);n>98&&(n=98),n<2&&(n=2);var a={position:"absolute",marginLeft:n-2+"%",top:"0px",bottom:"0px",width:"4%",backgroundColor:"white",border:"1px solid black"};return a}}}}]),game.component("bloqheadPopulationList",{templateUrl:"components/populationList/populationList.html",controller:"bloqhead.controllers.populationList",bindings:{hive:"<"}}),game.controller("bloqhead.controllers.populationList",["$uibModal","resourceService","resourceTypes","jobTypes",function(e,t,n,a){var i=this;i.jobTypes=a,i.criteria=[],i.$onInit=function(){},i.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})},i.getCustomFilter=function(){for(var e=[],t=0;t<i.criteria.length;t++){var n=i.criteria[t];"trait"==n.type&&e.push(n.val.name)}return JSON.stringify({traits:e})},i.deleteCriteria=function(e){i.criteria.splice(e,1)},i.openTraitSelector=function(t){var n=e.open({animation:!0,component:"bloqheadTraitSelector",size:"lg",resolve:{unit:function(){return t}}});n.result.then(function(e){i.criteria.push({type:"trait",val:e})},function(){})},i.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})}}]),game.component("bloqheadPopulationPanel",{require:{parent:"^bloqheadPopulationList"},templateUrl:"components/populationList/populationPanel.html",controller:"bloqhead.controllers.populationPanel",bindings:{population:"<",filter:"<",orderBy:"<"}}),game.controller("bloqhead.controllers.populationPanel",["$timeout","bloqheadGetGeneProgressStyle","resourceTypes","resourceService",function(e,t,n,a){var i=this;i.resourceTypes=n,i.$onInit=function(){i.orderBy=i.orderBy||"-dt"},i.getGeneTraitRangeStyle=function(e,n){return t().traitRange(e,n)},i.getGeneRangeStyle=function(e){return t().range(e[0],e[1])},i.getGeneValueStyle=function(e){return t().value(e[1]-e[0])},i.getWorkerIcon=function(e,t){var n=[];return n.push(a.getWorkerIcon(t)),e&&n.push("onstrike"),n},i.imageHover=function(e){var t=[];for(var n in i.attributes)t.push(n);var a=e.target.clientWidth,o=e.offsetX,r=a/5,s=Math.floor(o/r);s=Math.min(t.length-1,s),i.hoverAttr=t[s]}}]),game.component("bloqheadTraitSelector",{templateUrl:"components/populationList/traitSelector.html",controller:"bloqhead.controllers.traitSelector",bindings:{resolve:"<",close:"&",dismiss:"&"}}),game.controller("bloqhead.controllers.traitSelector",["traitDefinitions","bloqheadGetGeneProgressStyle",function(e,t){
var n=this;n.trait=null,n.showLocked=!1;var a="?";n.getGeneDominant=function(e){return e.locked?a:e.dom},n.getGeneRecessive=function(e){return e.locked?a:e.rec},n.traitEnter=function(e){n.trait=e},n.traitLeave=function(e){n.trait=null},n.$onInit=function(){n.unit=n.resolve.unit,n.traitDefinitions=angular.copy(e)},n.select=function(e){n.close({$value:e})},n.ok=function(){n.close({$value:n.trait})},n.cancel=function(){n.dismiss({$value:"cancel"})},n.getGeneRangeStyle=function(e){var a=t().traitRange(e,n.trait);return a}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"<"},controller:["Bee","traitDefinitions",function(e,t){var n=this;n.lastBreederID=0,n.newBreederGender="Male",n.killBreeder=function(e){n.units.splice(n.units.indexOf(e),1)},n.addNewBreeder=function(){}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Bee","traitDefinitions",function(e,t){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("configurationTab",{bindings:{},controller:["Bee","traitDefinitions","resourceTypes","jobTypes","defaultBuildings",function(e,t,n,a,i){var o=this;o.$onInit=function(){o.snapshot={traitDefinitions:angular.copy(t),resourceTypes:angular.copy(n),jobTypes:angular.copy(a),defaultBuildings:angular.copy(i)}}}],templateUrl:"components/testInterface/configurationTab.html"}),app.component("genomeEditor",{bindings:{u:"=",resolve:"<"},controller:[function(){var e=this;e.$onInit=function(){e.expando=!0,e.unit=e.u||e.resolve.unit||{}},e.randomizeName=function(){e.unit.name=e.unit.getRandomName()},e.randomize=function(e){},e.randomizeAll=function(){}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Bee","traitDefinitions",function(e,t,n,a,i){var o=this;o.$onInit=function(){o.traitDefinitions=i,o.units=[]}}]),app.component("fontTab",{templateUrl:"components/testInterface/fontTab.html",controller:"bloqhead.controllers.testInterface"});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:{boxTitleHtml:"?bloqheadPlayerBoxTitle"},require:{mainCtrl:"^bloqhead.components.home"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{boxTitle:"@",footer:"@",maxHeight:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit},e.maxHeightOveride=function(){var t={};return"undefined"!=typeof e.maxHeight&&(t.maxHeight=e.maxHeight),t}}),game.component("bloqheadPlayerBoxTitle",{require:{playerBoxCtrl:"^bloqheadPlayerBox"}});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadResourceList",{templateUrl:"components/resourceList/resourceList.html",controller:"bloqhead.controllers.resourceList",bindings:{assign:"&"}}),game.controller("bloqhead.controllers.resourceList",["$scope","resourceService","resourceTypes","jobTypes",function(e,t,n,a){var i=this;i.resourceTypes=n,i.jobTypes=a,i.resources={},i.getWorkerIcon=function(e){return t.getWorkerIcon(e)},i.$onInit=function(){t.SubscribeResourceChangedEvent(e,i.resourceChanged),t.SubscribeResourceLimitChangedEvent(e,i.resourceLimitChanged),t.SubscribeResourceEnabledEvent(e,i.resourceEnabled),i.resources=t.getResourcesSnapshot(),i.workers=[]},i.getUnlockedResources=function(){var e={};for(var t in i.resources)i.resources.hasOwnProperty(t)&&i.resources[t][2]===!0&&(e[t]=i.resources[t]);return e},i.getWorkerRate=function(e){for(var t=0,n=0;n<i.workers.length;n++)e===i.workers[n].resource&&(t+=i.workers[n].rate);return t},i.getWorkerCount=function(e){for(var t=0,n=0;n<i.workers.length;n++)e===i.workers[n].resource&&(t+=i.workers[n].count);return t},i.dropped=function(e,t,a,o){var r=n[o].jids[0],s=angular.element(document.getElementById(e)).data("beeid");i.assign({$id:s,$jid:r})},i.resourceChanged=function(e,t,n){i.resources[t]||(i.resources[t]=[]),i.resources[t][0]=n},i.resourceLimitChanged=function(e,t,n){i.resources[t]||(i.resources[t]=[]),i.resources[t][1]=n},i.resourceEnabled=function(e,t,n){i.resources[t][2]=n}}]);var game=angular.module("bloqhead.genetixApp");game.service("achievementService",["$rootScope","$filter","achievementSetup","logService","resourceTypes","defaultBuildings",function(e,t,n,a,i,o){var r=this;r.init=function(e){r.state=e||{},r.achievementSetup=n||{},r.state.hasOwnProperty("progress")||(r.state={progress:{achievements:{},perks:[]}})},r.getState=function(){return r.state},r.getProgressSnapshot=function(){return angular.copy(r.state.progress)},r.updateProgress=function(t,n){var i=r.state.progress.achievements[t],o=r.achievementSetup.achievements[t];i||(i={aid:t,amount:0,lastRank:0,nextRank:r.getNextRankAmount(t,0)},r.state.progress.achievements[t]=i);var s=i.amount,l=s;if((o.cumulative||!1)===!0?n>s&&(l=n):n>0&&(l=i.amount+n),i.amount=l,s!=l)for(var c=0;c<o.ranks.length;c++){var u=o.ranks[c][0];if(u>i.lastRank&&u>s&&u<=l){var d=r.getAchievementMessage(o.aid,u);a.logAchievementMessage(d),i.lastRank=u,i.nextRank=r.getNextRankAmount(t,i.amount);for(var p={achievement:o,amountRequired:u,msg:d,perks:[]},g=0;g<o.ranks[c][1].length;g++){var m=r.applyPerk(o.ranks[c][1][g]);null!==m&&p.perks.push(m)}e.$emit("newRewardEvent",p)}}},r.applyPerk=function(e){var i=e[0],o=n.perks[i];if(o.once){var s=t("filter")(r.state.progress.perks,{pid:i});if(0!==s.length)return null}var l=r.getPerkMessage(e,o);a.logAchievementMessage(l);var c={pid:i,msg:l,arr:e,dt:(new Date).getTime()};return r.state.progress.perks.push(c),c},r.getNextRankAmount=function(e,t){var a=n.achievements[e].ranks,i=r.state.progress.achievements[e];if(!i&&a.length>0)return a[0][0];for(var o=0;o<a.length;o++)if(a[o][0]>i.amount)return a[o][0];return-1},r.getAchievementMessage=function(e,a,i){var o=n.achievements[e],r=o[i]||o.logmsg||o.desc||o.name||"Unknown",s={name:o.name,req:a};return s.name=t("fmt")(s.name,s),t("fmt")(r,s)},r.getPerkMessage=function(e,a){var r=e[0],s=n.perks[r],l=s[a]||s.logmsg||s.desc||s.name||"Unknown",c={name:s.name};switch(s.pid.substring(0,4)){case"P_R_":c.res=i[e[1]].name,c.amt=e[2]||0;break;case"P_B_":c.buildingType=o[e[1]].name,c.amt=e[2]||0,c.plural=c.amt>1?"s":"";break;default:for(var u=1;u<e.length;u++)c[u]=e[u]}return c.name=t("fmt")(c.name,c),t("fmt")(l,c)},r.SubscribeNewRewardEvent=function(t,n){var a=e.$on("newRewardEvent",n.bind(this));t.$on("$destroy",a)}}]);var game=angular.module("bloqhead.genetixApp");game.service("buildingService",["$rootScope","$filter","defaultBuildings","resourceTypes","resourceService","achievementService",function(e,t,n,a,i,o){var r,s,l=this,c=!1;l.init=function(t){t.buildings=angular.merge({},n,t.buildings),r=angular.merge({},r,t),l.update("all"),i.SubscribeResourceChangedEvent(e,m),c||o.SubscribeNewRewardEvent(e,l.rewardEarned),c=!0},l.getState=function(){var e={buildings:{}};for(var t in r.buildings)if(r.buildings.hasOwnProperty(t)){var n=r.buildings[t];e.buildings[t]={purchased:n.purchased,gifted:n.gifted,unlocked:n.unlocked,multiplier:n.multiplier}}return e},l.getBuildingSnapshot=function(){var t=[];for(var n in r.buildings)if(r.buildings.hasOwnProperty(n)){var a=r.buildings[n];if(a.unlocked){var i=p(a),o=d(a);t.push({type:n,name:a.name,description:u(a,{size:o}),size:o,owned:a.purchased+a.gifted,costToBuild:i,canBuild:g(a,i)})}}return angular.equals(s,t)||e.$emit("buildingsChangedEvent",angular.copy(t)),s=t,angular.copy(t)},l.update=function(e){angular.isDefined(e)&&"all"!==e?"storage"===e?l.updateStorage():"housing"===e?l.updateHousing():"breeding"===e?l.updateBreeders():"newborn"===e?l.updateNursery():"production"===e&&angular.noop():(l.updateStorage(),l.updateHousing(),l.updateNursery()),l.getBuildingSnapshot()},l.updateNursery=function(){var e=0,t=r.newbornSizeMultiplier||1;for(var n in r.buildings)if(r.buildings.hasOwnProperty(n)){var a=r.buildings[n];"newborn"===a.use&&(e+=Math.floor(a.size*(a.purchased+a.gifted)*a.multiplier))}e*=t},l.updateStorage=function(){var e=r.storageSizeMultiplier||1,t=i.getResourcesSnapshot(),n=[];for(var a in r.buildings)if(r.buildings.hasOwnProperty(a)){var o=r.buildings[a];"storage"===o.use&&(n.push(o.stores),t[o.stores].newAmount=t[o.stores].newAmount||0,t[o.stores].newAmount+=Math.floor(o.size*(o.purchased+o.gifted)*o.multiplier))}n.filter(function(n){t[n].newAmount=Math.floor(t[n].newAmount*e),t[n][1]!=t[n].newAmount&&i.setResourceLimit(n,t[n].newAmount)})},l.updateHousing=function(){var e=(r.housingSizeMultiplier||1,0);for(var t in r.buildings)if(r.buildings.hasOwnProperty(t)){var n=r.buildings[t];"housing"===n.use&&(e+=Math.floor(n.size*(n.gifted+n.purchased)*n.multiplier))}},l.build=function(e){var t=!0,n=[],a=r.buildings[e],s=p(a);if(g(a,s))for(var c=0;c<s.length;c++){var u=i.changeResource(s[c].resourceType,-1*s[c].amount);if(u===-1){t=!1;break}n.push({resource:s[c].resourceType,amount:s[c].amount})}if(t)r.buildings[e].purchased++,l.update(a.use),o.updateProgress("A_"+e+"_B",1);else for(var d=0;d<n.length;d++)i.changeResource(n[d].resourceType,s[d].amount)},l.rewardEarned=function(e,t){for(var n=0;n<t.perks.length;n++){var a=t.perks[n],i=r.buildings[a.arr[1]];"P_B_BONUS"===a.pid&&(i.gifted+=a.arr[2],l.update(i.use)),"P_B_UNLOCK"===a.pid&&(i.unlocked=1,l.update(i.use)),"P_B_MULTIPLIER"===a.pid&&(i.multiplier+=a.arr[2]/100,l.update(i.use))}},l.SubscribeBuildingsChangedEvent=function(t,n){var a=e.$on("buildingsChangedEvent",n.bind(this));t&&t.$on("$destroy",a),e.$emit("buildingsChangedEvent",l.getBuildingSnapshot())};var u=function(e,n){var a=e.description;return a=t("fmt")(a,n)},d=function(e){var t=e.size*(e.multiplier||1);return"breeding"===e.use&&(t*=r.breedingSizeMultiplier||1),"storage"===e.use&&(t*=r.storageSizeMultiplier||1),"housing"===e.use&&(t*=r.housingSizeMultiplier||1),t},p=function(e){for(var t=[],n=0;n<e.baseCost.length;n++){var i=e.baseCost[n],o=Math.floor(i.amount*Math.pow(i.costMultiplier,e.purchased));t.push({resource:a[i.resource].name,resourceType:i.resource,amount:o})}return t},g=function(e,t){angular.isDefined(t)||(t=p(e));for(var n=i.getResourcesSnapshot(),a=0;a<t.length;a++){var o=n[t[a].resourceType];if(!angular.isDefined(o)||o[0]<t[a].amount)return!1}return!0},m=function(e,t,n){l.getBuildingSnapshot()}}]);var game=angular.module("bloqhead.genetixApp");game.service("gameLoopService",["$window","$rootScope","gameStates","logService",function(e,t,n,a){var i=this;i.initialized=!1,i.init=function(e){e=e||{},i.saveTime=e.saveTime||Date.now(),i.stepTimeMs=e.stepTimeMs||i.stepTimeMs||50,i.lastTime=i.lastTime||i.saveTime-Date.now(),i.currentState=e.currentState||i.currentState||n.RUNNING,i.initialized||(i.initialized=!0,i.gameLoop(0))},i.getState=function(){return{stepTimeMs:i.stepTimeMs,currentState:i.currentState,saveTime:i.saveTime}},i.setState=function(e){i.currentState=e,e===n.PAUSED?a.logGeneralMessage("Game paused."):a.logGeneralMessage("Game resumed.")},i.gameLoop=function(a){var i=this;i.saveTime=Date.now();for(var o=0;a-i.lastTime>=i.stepTimeMs*(o+1);)o++;i.lastTime+=i.stepTimeMs*o,i.currentState===n.RUNNING&&o>0?t.$apply(t.$emit("gameLoopEvent",i.stepTimeMs*o)):i.currentState===n.PAUSED&&t.$apply(t.$emit("gameLoopEvent",0)),e.requestAnimationFrame(this.gameLoop.bind(this))},i.SubscribeGameLoopEvent=function(e,n){var a=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",a)}}]),game.service("gameService",["$rootScope","gameSaveKey","defaultState","logService","gameLoopService","achievementService","resourceService","buildingService","LZString","traitDefinitions","mapService",function(e,t,n,a,i,o,r,s,l,c,u){function d(e,t){p.msSinceSave+=t,p.msSinceSave>=p.autoSaveMs&&(p.saveGame(!0),p.msSinceSave=0)}var p=this,g=!1;p.init=function(a){var o=l.decompressFromBase64(localStorage.getItem(t)),r=o?angular.fromJson(o):void 0;p.gameState=a||r||n,p.autoSaveMs=p.gameState.autoSaveMs||p.autoSaveMs||3e4,p.startGame(),p.msSinceSave=0,g||(i.SubscribeGameLoopEvent(e,d),g=!0)},p.startGame=function(){try{a.init(p.gameState.clearLog)}catch(e){console.error(e)}try{r.init(angular.merge({},n.resourceServiceState,p.gameState.resourceServiceState))}catch(e){console.error(e)}try{o.init(angular.merge({},n.achievementServiceState,p.gameState.achievementServiceState))}catch(e){console.error(e)}try{s.init(angular.merge({},n.buildingServiceState,p.gameState.buildingServiceState))}catch(e){console.error(e)}try{u.init(angular.merge({},n.mapServiceState,p.gameState.mapServiceState))}catch(e){console.error(e)}try{i.init(angular.merge({},n.gameLoopServiceState,p.gameState.gameLoopServiceState))}catch(e){console.error(e)}},p.hardReset=function(){localStorage.removeItem(t),p.init()},p.saveGame=function(e){var n=angular.copy(p.gameState);n.resourceServiceState=angular.copy(r.getState()),n.achievementServiceState=angular.copy(o.getState()),n.buildingServiceState=angular.copy(s.getState()),n.gameLoopServiceState=angular.copy(i.getState()),n.mapServiceState=angular.copy(u.getState());var c=l.compressToBase64(angular.toJson(angular.copy(n)));localStorage.setItem(t,c),e?a.logGeneralMessage("Game autosaved."):a.logGeneralMessage("Game saved.")}}]);var game=angular.module("bloqhead.genetixApp");game.service("mapService",["$rootScope","$filter","gameLoopService","logService","Grid","Point","Hive",function(e,t,n,a,i,o,r){function s(){var e=p.map.config.MAPWIDTH*(p.map.config.WIDTH+p.map.config.SIDE)-p.map.config.SIDE,t=p.map.config.MAPHEIGHT*p.map.config.HEIGHT;return e+=2*p.map.config.MARGIN,t+=2*p.map.config.MARGIN,new o(e,t)}function l(e){e.clearRect(0,0,e.canvas.width,e.canvas.height)}function c(e){for(var t in p.map.Hexes)p.map.Hexes[t].draw(e)}function u(e){for(var t=0;t<p.hives.length;t++){var n=p.hives[t],a=p.map.GetHexById(n.pos),i="H"+n.id;e.fillStyle=n.id===p.map.config.currentHiveID?"yellow":"grey",e.beginPath(),e.arc(a.MidPoint.X,a.MidPoint.Y,.3*p.map.config.HEIGHT,0,2*Math.PI),e.closePath(),e.fill(),e.lineWidth=2,e.strokeStyle="black",e.stroke(),e.fillStyle="black",e.font="bolder 8pt Trebuchet MS,Tahoma,Verdana,Arial,sans-serif",e.textAlign="center",e.textBaseline="middle",e.fillText(i,a.MidPoint.X,a.MidPoint.Y)}}var d,p=this;p.init=function(t){if(d=t||d||{},p.hives=[],angular.isDefined(d.mapconfig)){p.map=new i(d.mapconfig);for(var a=0;a<d.hiveStates.length;a++){var o=new r(d.hiveStates[a]);p.hives.push(o)}}else p.generateInitialMap(),d.mapconfig=p.map.config;n.SubscribeGameLoopEvent(e,p.handleGameLoop),p.sendMapInitializedEvent(),p.sendHiveChangeEvent(),d.initialized=!0},p.getState=function(){d.mapconfig=p.map.config,d.hiveStates=[];for(var e=0;e<p.hives.length;e++)d.hiveStates.push(p.hives[e].getState());return d},p.getHiveByPosition=function(e){return t("filter")(p.hives,{pos:e},!0)[0]},p.getCurrentHive=function(){return t("filter")(p.hives,{id:p.map.config.currentHiveID},!0)[0]},p.mapClicked=function(e,t){var n=new o(e,t),a=p.map.GetHexAt(n),i=p.map.GetHexById(p.map.config.selectedHexID);if(null!==a&&"undefined"!=typeof a){null!==i&&"undefined"!=typeof i&&(a.id===i.id?console.log("TODO: show additional info via dialog or somethin"):i.selected=!1),a.selected=!0,p.map.config.selectedHexID=a.id;var r=p.getHiveByPosition(a.id);r&&r.id!=p.map.config.currentHiveID&&(p.map.config.currentHiveID=r.id,p.sendHiveChangeEvent())}},p.mapMoved=function(e,t){p.map.config.canvasLocation=new o(e,t)},p.SubscribeMapInitializedEvent=function(t,n){var a=e.$on("mapInitializedEvent",n.bind(this));t.$on("$destroy",a),p.sendMapInitializedEvent()},p.sendMapInitializedEvent=function(){e.$emit("mapInitializedEvent",p.map.config)},p.SubscribeMapUpdateEvent=function(t,n){var a=e.$on("mapUpdateEvent",n.bind(this));t.$on("$destroy",a),p.sendMapUpdateEvent()},p.sendMapUpdateEvent=function(){e.$emit("mapUpdateEvent")},p.SubscribeHiveChangeEvent=function(t,n){var a=e.$on("hiveChangeEvent",n.bind(this));t.$on("$destroy",a),p.sendHiveChangeEvent()},p.sendHiveChangeEvent=function(){e.$emit("hiveChangeEvent",{currentHive:p.getCurrentHive()})},p.handleGameLoop=function(e,t){if(0!==t)for(var n=0;n<p.hives.length;n++)p.hives[n].handleGameLoop(e,t);p.sendMapUpdateEvent()},p.drawMap=function(e){l(e),c(e),u(e)},p.addHive=function(e){var t=p.hives.length+1;p.hives.push(new r({id:t,initialSize:2,maxSize:5,beeMutationChance:.0025,pos:e}))},p.generateInitialMap=function(){p.map=new i({MAPWIDTH:7,MAPHEIGHT:7}),p.setHexSizeByHeight(50),p.map.config.canvasLocation=new o(0,0),p.addHive("G7"),p.addHive("J10"),p.map.config.currentHiveID=p.hives[0].id},p.setHexSizeByHeight=function(e){e=e||30;var t=e*(2/Math.sqrt(3)),n=-3,a=-2*t,i=Math.pow(t,2)+Math.pow(e,2),o=(-a-Math.sqrt(Math.pow(a,2)-4*n*i))/(2*n);return p.map.config.WIDTH=t,p.map.config.HEIGHT=e,p.map.config.SIDE=o,p.map.Relocate(),p.map.config.canvasSize=s(),d.mapconfig=p.map.config,p.map.config},p.setHexSizeBySide=function(e,t){e=e||18,t=t||2/Math.sqrt(3);var n=e,a=t,i=Math.pow(a,2),o=(1+i)/i,r=n/i,l=(1-4*i)/(4*i)*Math.pow(n,2),c=(-r+Math.sqrt(Math.pow(r,2)-4*o*l))/(2*o),u=(2*c+n)/(2*a),g=2*c+n,m=2*u;return p.map.config.WIDTH=g,p.map.config.HEIGHT=m,p.map.config.SIDE=n,p.map.Relocate(),p.map.config.canvasSize=s(),d.mapconfig=p.map.config,p.map.config}}]);var game=angular.module("bloqhead.genetixApp");game.service("resourceService",["$rootScope","$filter","logService","resourceTypes","achievementService",function(e,t,n,a,i){var o=this,r=!1;o.init=function(t){null!==t&&(o.state=t),r||i.SubscribeNewRewardEvent(e,o.rewardEarned),r=!0;var n=!1,s={NECTAR:[0,0,!0,1],POLLEN:[0,0,!0,1],WATER:[0,0,!0,1],FOOD:[0,0,!0,1],HONEY:[0,0,!0,1],ROYAL_JELLY:[0,0,!0,1],WAX:[0,0,!0,1],DEADBEES:[0,0,!0,1],DEFENSE:[0,-1,!0,1]};for(var l in a)if(a.hasOwnProperty(l)){var c=o.state.resources[l];"undefined"==typeof c&&(c=s[l]||[0,911,n,1],o.state.resources[l]=c),e.$emit("resourceChangedEvent",l,c[0]),e.$emit("resourceLimitChangedEvent",l,c[1]),e.$emit("resourceEnabledEvent",l,c[2])}},o.getState=function(){return o.state},o.getWorkerIcon=function(e){var t={};return t["fa-tint"]="NECTAR"===e,t["icon-water"]="WATER"===e,t["icon-tombstone"]="DEADBEES"===e,t["icon-pollen"]="POLLEN"===e,t["icon-honeypot"]="HONEY"===e,t["icon-tools"]="WAX"===e,t["fa-apple"]="FOOD"===e,t["icon-jar"]="ROYAL_JELLY"===e,t["icon-shield"]="DEFENSE"===e,t},o.rewardEarned=function(t,n){for(var a=0;a<n.perks.length;a++){var i=n.perks[a];"P_R_BONUS"===i.pid&&o.changeResource(i.arr[1],i.arr[2]),"P_R_UNLOCK"===i.pid&&(o.state.resources[i.arr[1]][2]=!0,e.$emit("resourceEnabledEvent",i.arr[1],!0)),"P_R_MULTIPLIER"===i.pid&&o.addResourceMultiplier(i.arr[1],i.arr[2])}},o.getResourcesSnapshot=function(){return angular.copy(o.state.resources)},o.getResource=function(e){return o.state.resources[e][0]},o.changeResource=function(t,n){var a=o.state.resources[t];if(a[2]===!1&&a[1]!==-1)return void console.error(t+" is not enabled, cannot increase amount.");a[0]+=n;var r=n;return a[1]!=-1&&a[0]>a[1]&&(r=n-(a[0]-a[1]),a[0]=a[1]),a[0]<0?(a[0]-=n,-1):(r>0&&i.updateProgress("A_"+t+"_E",r),e.$emit("resourceChangedEvent",t,a[0],o.getResourcesSnapshot()),a[0])},o.setResourceLimit=function(t,n){var a=o.state.resources[t];return a[1]===-1?void console.error("Cannot set resource limit on: "+t):(a[1]=n,a[2]===!1&&n>0&&(a[2]=!0,e.$emit("resourceEnabledEvent",t,!0)),void e.$emit("resourceLimitChangedEvent",t,a[1]))},o.addResourceMultiplier=function(e,t){o.state.resources[e][3]+=t/100},o.SubscribeResourceChangedEvent=function(t,n){var a=e.$on("resourceChangedEvent",n.bind(this));t&&t.$on("$destroy",a)},o.SubscribeResourceLimitChangedEvent=function(t,n){var a=e.$on("resourceLimitChangedEvent",n.bind(this));t&&t.$on("$destroy",a)},o.SubscribeResourceEnabledEvent=function(t,n){var a=e.$on("resourceEnabledEvent",n.bind(this));t&&t.$on("$destroy",a)}}]);var game=angular.module("bloqhead.genetixApp");game.factory("Grid",["Hexagon","Point",function(e,t){var n=function(t){this.config=t||{},this.config.MAPWIDTH=this.config.MAPWIDTH||8,this.config.MAPHEIGHT=this.config.MAPHEIGHT||5,this.config.HEIGHT=this.config.HEIGHT||91.14378277661477,this.config.WIDTH=this.config.WIDTH||91.14378277661477,this.config.SIDE=this.config.SIDE||50,this.config.MARGIN=this.config.MARGIN||5,this.config.STROKEWIDTH=this.config.STROKEWIDTH||3,this.config.SHOW_HEX_ID=this.config.SHOW_HEX_ID||!1,this.config.SHOW_HEX_XY=this.config.SHOW_HEX_XY||!1,this.Hexes=[];for(var n={},a=0,i=0;a<=2*(this.config.MAPHEIGHT-1);){var o=0,r=0;a%2==1&&(r=(this.config.WIDTH-this.config.SIDE)/2+this.config.SIDE,o=1);for(var s=r;o<=2*(this.config.MAPWIDTH-1);){var l=this.GetHexId(a,o),c=new e(l,o,a,this.config),u=o;c.PathCoOrdX=o,this.Hexes.push(c),n[u]||(n[u]=[]),n[u].push(c),o+=2,s+=this.config.WIDTH+this.config.SIDE}a++,i+=this.config.HEIGHT/2}for(var d in n){var p=n[d],g=Math.floor(d/2)+d%2;for(var m in p){var h=p[m];h.PathCoOrdY=g++}}return this};return n.Static={Letters:"ABCDEFGHIJKLMNOPQRSTUVWXYZ"},n.prototype.GetHexId=function(e,t){for(var a=e,i="";a>25;)i=n.Static.Letters[a%26]+i,a-=26;return n.Static.Letters[a]+i+(t+1)},n.prototype.Relocate=function(){for(var e in this.Hexes)this.Hexes[e].Relocate(this.config)},n.prototype.GetHexAt=function(e){for(var t in this.Hexes)if(this.Hexes[t].Contains(e))return this.Hexes[t];return null},n.prototype.GetHexDistance=function(e,t){var n=e.PathCoOrdX-t.PathCoOrdX,a=e.PathCoOrdY-t.PathCoOrdY;return(Math.abs(n)+Math.abs(a)+Math.abs(n-a))/2},n.prototype.GetHexById=function(e){for(var t in this.Hexes)if(this.Hexes[t].id==e)return this.Hexes[t];return null},n.prototype.GetNearestHex=function(e){var t,n=Number.MAX_VALUE,a=null;for(var i in this.Hexes)t=this.Hexes[i].distanceFromMidPoint(e),t<n&&(n=t,a=this.Hexes[i]);return a},n}]);var game=angular.module("bloqhead.genetixApp");game.factory("Hexagon",["Point",function(e){var t=function(e,t,n,a){var i=a||{HEIGHT:91.14378277661477,WIDTH:91.14378277661477,SIDE:50};this.config=a,this.id=e,this.col=t,this.row=n,this.selected=!1,this.Relocate(i)};return t.prototype.Relocate=function(t){this.config=t;var n=this.col*(t.WIDTH+t.SIDE/2)-this.col*t.WIDTH/2,a=this.row*(t.HEIGHT/2),i=(t.WIDTH-t.SIDE)/2,o=t.HEIGHT/2;t.MARGIN&&(n+=t.MARGIN,a+=t.MARGIN),this.Points=[],this.Points.push(new e(i+n,a)),this.Points.push(new e(i+t.SIDE+n,a)),this.Points.push(new e(t.WIDTH+n,o+a)),this.Points.push(new e(i+t.SIDE+n,t.HEIGHT+a)),this.Points.push(new e(i+n,t.HEIGHT+a)),this.Points.push(new e(n,o+a)),this.TopLeftPoint=new e(n,a),this.BottomRightPoint=new e(n+t.WIDTH,a+t.HEIGHT),this.MidPoint=new e(n+t.WIDTH/2,a+t.HEIGHT/2)},t.prototype.draw=function(e){this.selected?e.fillStyle="#7283BA":e.fillStyle="#EDC867",e.strokeStyle="black",e.lineWidth=this.config.STROKEWIDTH,e.beginPath(),e.moveTo(this.Points[0].X,this.Points[0].Y);for(var t=1;t<this.Points.length;t++){var n=this.Points[t];e.lineTo(n.X,n.Y)}if(e.closePath(),e.fill(),e.stroke(),this.id&&(this.config.SHOW_HEX_ID||this.config.SHOW_HEX_XY)){e.fillStyle="black",e.font="bolder 8pt Trebuchet MS,Tahoma,Verdana,Arial,sans-serif",e.textAlign="center",e.textBaseline="middle";var a="";this.config.SHOW_HEX_ID&&(a+=this.id+" "),this.config.SHOW_HEX_XY&&(a+=this.row+","+this.col),e.fillText(a,this.MidPoint.X,this.MidPoint.Y)}},t.prototype.isInBounds=function(t,n){return this.Contains(new e(t,n))},t.prototype.isInHexBounds=function(e){return this.TopLeftPoint.X<e.X&&this.TopLeftPoint.Y<e.Y&&e.X<this.BottomRightPoint.X&&e.Y<this.BottomRightPoint.Y},t.prototype.Contains=function(e){var t=!1;if(this.isInHexBounds(e)){var n,a=0;for(n=0,a=this.Points.length-1;n<this.Points.length;a=n++){var i=this.Points[n],o=this.Points[a];(i.Y<=e.Y&&e.Y<o.Y||o.Y<=e.Y&&e.Y<i.Y)&&e.X<(o.X-i.X)*(e.Y-i.Y)/(o.Y-i.Y)+i.X&&(t=!t)}}return t},t.prototype.distanceFromMidPoint=function(e){var t=this.MidPoint.X-e.X,n=this.MidPoint.Y-e.Y;return Math.sqrt(t*t+n*n)},t}]);var game=angular.module("bloqhead.genetixApp");game.factory("Line",function(){var e=function(e,t,n,a){this.X1=e,this.Y1=t,this.X2=n,this.Y2=a};return e});var game=angular.module("bloqhead.genetixApp");game.factory("Point",function(){var e=function(e,t){this.X=e,this.Y=t};return e});var game=angular.module("bloqhead.genetixApp");game.factory("Rectangle",function(){var e=function(e,t,n,a){this.X=e,this.Y=t,this.Width=n,this.Height=a};return e}),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<div ng-init="$ctrl.pauseScroll=false"><div class="nopadding col-xs-3"><div class="row topRow"><div class="col-xs-12 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-list"></i> Log <i class="pull-right fa" ng-class="$ctrl.pauseScroll ? \'fa-play\' : \'fa-pause\'" ng-click="$ctrl.pauseScroll=!$ctrl.pauseScroll" title="Autoscroll On/Off"></i></bloqhead-player-box-title><bloqhead-log pause-scroll="$ctrl.pauseScroll"></bloqhead-log></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-goal-list></bloqhead-goal-list></div></div><div class="row"><div class="col-xs-12"></div></div></div><div class="col-xs-9 fullH nopadding"><div ui-view="" class="animate-view"></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/achievements/achievements.html",'<div class="col-xs-12"><bloqhead-player-box box-title="Achievements"><div class="achievement-container"><div class="row" ng-repeat="ag in $ctrl.achievementSetup.achievementGroups"><div class="col-xs-12"><h6 ng-bind="ag.name"></h6><div class="row achievement-list" ng-repeat="aid in ag.aids"><div class="col-xs-12 col-md-2 col-sm-1"><div class="achievement-cell" ng-class="$ctrl.getAchievementClass($ctrl.achievementSetup.achievements[aid])" uib-tooltip-template="\'achievementTooltip.html\'" tooltip-class="achievement-tooltip"><p ng-bind="$ctrl.achievementSetup.achievements[aid].name"></div></div><div class="col-xs-12 col-md-10 col-sm-11"><div class="row achievement-rank-row"><div class="col-xs-6 col-sm-3 col-lg-1" ng-repeat="ar in $ctrl.achievementSetup.achievements[aid].ranks"><div class="achievement-rank-cell" ng-class="$ctrl.getAchievementRankClass($ctrl.achievementSetup.achievements[aid], ar)"><span ng-bind="ar[0]"></span><br><div ng-repeat="p in ar[1]" style="display: inline-block" uib-tooltip-template="\'perkTooltip.html\'" tooltip-class="perk-tooltip"><i class="fa fa-gift"></i>&nbsp;</div></div></div></div></div></div></div></div></div></bloqhead-player-box><script type="text/ng-template" id="achievementTooltip.html"><div data-attr="NONE">\n            <h5 ng-bind="$ctrl.achievementSetup.achievements[aid].desc"></h5>\n            <p ng-bind="\'Total Progress: \' + ($ctrl.achievementService.state.progress.achievements[aid].amount || 0)"></p>\n            <p ng-if="$ctrl.achievementService.state.progress.achievements[aid].nextRank != -1" ng-bind="\'Next Rank: \' + ($ctrl.achievementService.state.progress.achievements[aid].nextRank || 0)"></p>\n            <div class="progress progress-custom">\n                <div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.achievementService.state.progress.achievements[aid].amount}}" aria-valuemin="{{$ctrl.achievementService.state.progress.achievements[aid].lastRank}}" aria-valuemax="{{$ctrl.achievementService.state.progress.achievements[aid].nextRank}}"\n                    ng-style="{width: (100*(($ctrl.achievementService.state.progress.achievements[aid].amount - $ctrl.achievementService.state.progress.achievements[aid].lastRank) / ($ctrl.achievementService.state.progress.achievements[aid].nextRank-$ctrl.achievementService.state.progress.achievements[aid].lastRank))) + \'%\'}">\n\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="perkTooltip.html"><div>\n            <h5 ng-bind="$ctrl.achievementService.getPerkMessage(p, \'name\')"></h5>\n            <p ng-bind="$ctrl.achievementService.getPerkMessage(p, \'desc\')" />\n        </div></script></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/buildingList/buildingList.html",'<div class="row"><div class="col-xs-12"><div class="scalable-list-button" ng-repeat="building in $ctrl.buildings" ng-if="building.costToBuild.length > 0" tooltip-placement="bottom" uib-tooltip-template="\'resourceTooltip.html\'" tooltip-class="building-tooltip"><button type="button" ng-bind="(building.name + \' (\' + building.owned + \')\')" ng-disabled=" !building.canBuild " class="btn btn-xs btn-primary" ng-click="$ctrl.build(building.type)"></button></div></div></div><script type="text/ng-template" id="resourceTooltip.html"><div style="text-align: left;">\n        <h5>{{building.description}}</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in building.costToBuild">\n                <i class="fa" ng-class="$ctrl.resourceService.getWorkerIcon(cost.resourceType)" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"></i>\n                <span ng-bind="cost.amount"></span>&nbsp;\n            </span>\n        </p>\n        <!--\n        <p ng-repeat="cost in building.costToBuild" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></p>\n        -->\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li><li ng-show="$ctrl.scrolling"><a id="scrollBottom"></a></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/map/map.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-5"><i class="fa fa-map"></i> Map</div><div class="col-xs-7"><div class="pull-right"><span>ID <input type="checkbox" ng-model="$ctrl.mapService.getState().mapconfig.SHOW_HEX_ID"></span><span>XY <input type="checkbox" ng-model="$ctrl.mapService.getState().mapconfig.SHOW_HEX_XY"></span><span>Zoom:</span><div class="btn-group" role="group"><div class="btn btn-xs btn-info" ng-click="$ctrl.zoomOut()">-</div><div class="btn btn-xs btn-info" ng-click="$ctrl.zoomIn()">+</div></div></div></div></div></bloqhead-player-box-title><div class="row map-container" style="overflow: hidden; background-color: #87F75C; position: relative"><canvas id="map" style="position:absolute;top:0px;left:0px"></canvas></div></bloqhead-player-box>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/goalList/goalList.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-9"><i class="fa fa-check-square-o"></i> Goals</div><div class="col-xs-3"><div class="pull-right"></div></div></div></bloqhead-player-box-title><div class="row goal-container"><h4>Active Goals</h4><h4>Daily Goals</h4></div></bloqhead-player-box>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/bee/bee.html",'<div class="bloqhead-component" ng-if="$ctrl.display === \'TILE\'" ng-init="unit = $ctrl.unit"><h5 ng-click="$ctrl.showDetails()"><div class="col-xs-12 mortal-name"><span>{{$ctrl.unit.name}}</span>&nbsp;<i class="fa {{trait.icon}} {{trait.style}}" ng-repeat="trait in $ctrl.unit.traits" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></div></h5><div ng-show="$ctrl.mode === \'POP\'"><button ng-disabled="!$ctrl.canBreed" class="btn btn-sm btn-primary" ng-click="$ctrl.assignMe()">Breed Me</button><div class="btn-group" uib-dropdown dropdown-append-to-body="true"><button type="button" class="btn btn-sm btn-primary" uib-dropdown-toggle>Work <span class="caret"></span></button><ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="single-button"><li ng-repeat="(key, job) in $ctrl.jobTypes"><a href="javascript:void(0);" ng-bind="job.name" ng-click="$ctrl.assignMe(key)"></a></li></ul></div><span class="pull-right" ng-bind="$ctrl.unit.jid"></span></div><div class="row" ng-show="$ctrl.mode === \'NURSE\'"><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'egg\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'LARVA\')" ng-disabled="!$ctrl.canFertilize()">Fertilize</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'egg\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'DRONE\')">Make Drone</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'larva\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'QUEEN\')">Make Queen</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'larva\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'WORKER\')">Make Worker</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'CONSUME\')">Consume</button></div></div></div><script type="text/ng-template" id="costTooltip.html"><div style="text-align: left;">\n        <h5>Cost to banish</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in unit.societyValue">\n                <i class="fa" ng-class="$ctrl.resourceService.getWorkerIcon(cost.resourceType)" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"></i>\n                <span ng-bind="cost.amount"></span>&nbsp;\n            </span>\n        </p>\n    </div></script>');
}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class=""><div class="row topRow"><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-th"></i> Resources</bloqhead-player-box-title><div class="row"><bloqhead-resource-list assign="$ctrl.assign($id, $jid)"></bloqhead-resource-list></div></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-building"></i> Hive Expansion</bloqhead-player-box-title><bloqhead-building-list hive="$ctrl.hive"></bloqhead-building-list></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="icon-foot"></i> Nursery [{{$ctrl.hive.getNurseryCount()}} / {{$ctrl.hive.getNurseryLimit()}}]</bloqhead-player-box-title><div class="row breeder-container"><div ng-repeat="child in $ctrl.hive.getByType(\'egg\')" class="col-xs-12 col-lg-12 animate-repeat"><bloqhead-bee mode="NURSE" unit="child" assign="$ctrl.decideFate($id, $type)"></bloqhead-bee></div><div ng-repeat="child in $ctrl.hive.getByType(\'larva\')" class="col-xs-12 col-lg-12 animate-repeat"><bloqhead-bee mode="NURSE" unit="child" assign="$ctrl.decideFate($id, $type)"></bloqhead-bee></div></div></bloqhead-player-box></div></div><div class="row" id="bottomRow"><div class="col-xs-8 fullH"><bloqhead-map></bloqhead-map></div><div class="col-xs-4 fullH"><bloqhead-population-list hive="$ctrl.hive" max-population="$ctrl.hive.getPopulationLimit()"></bloqhead-population-list></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationList.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-9"><i class="fa fa-globe"></i> Hive#{{$ctrl.hive.id}} Population [{{$ctrl.hive.getPopulationCount()}} / {{$ctrl.hive.getPopulationLimit()}}]</div><div class="col-xs-3"><div class="pull-right"></div></div></div></bloqhead-player-box-title><div class="row population-container"><div class="col-xs-12"><uib-tabset type="pills"><div uib-tab template-url="tab.html" heading="Gender View"><div class="col-xs-6 col-lg-6"><h4>Queens</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'queen\',traits:[]}"></bloqhead-population-panel><h4>Workers</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'worker\',traits:[]}"></bloqhead-population-panel><h4>Drones</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'drone\',traits:[]}"></bloqhead-population-panel></div></div><div uib-tab template-url="tab.html" heading="Custom View"><div class="col-xs-12"><div class="row"><div class="col-xs-12"><div class="btn btn-xs btn-primary trait-filter-item" ng-repeat="c in $ctrl.criteria" ng-click="$ctrl.deleteCriteria($index)"><div ng-if="c.type=\'trait\'"><span ng-bind="c.val.name"></span> <button type="button" class="close" ng-click="$ctrl.deleteCriteria($index)"><span>×</span></button></div></div><button class="btn btn-xs btn-primary" type="button" href="javascript:void(0);" ng-click="$ctrl.openTraitSelector()">Add Filter</button></div></div><div class="row"><div class="col-xs-12"><bloqhead-population-panel population="$ctrl.hive" filter="$ctrl.getCustomFilter()"></bloqhead-population-panel></div></div></div></div></uib-tabset></div></div></bloqhead-player-box><script type="text/ng-template" id="tab.html"><li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item tab-list-button">\n        <button ng-click="select($event)" class="btn btn-xs">{{heading}}</button>\n    </li></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationPanel.html",'<div class="population-panel"><table><tr ng-repeat="bee in $ctrl.population | applyPopulationFilter: $ctrl.filter | orderBy: $ctrl.orderBy" class="population-list animate-repeat"><td lvl-draggable="true" data-beeid="{{bee.id}}"><span ng-bind="bee.name"></span>&nbsp;<i class="fa {{trait.icon}}" ng-repeat="trait in bee.traits" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></td></tr></table></div><script type="text/ng-template" id="traitTooltip.html"><div class="text-center">\n        <h4>{{trait.name}}</h4>\n        <div class="genes-table">\n            <div class="genes-tr">\n                <div class="genes-th rec">Recessive</div>\n                <div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div>\n                <div class="genes-th dom ">Dominant</div>\n            </div>\n            <div class="genes-tr " ng-repeat="gene in trait.genes">\n                <!--<div class="genes-td rec " ng-bind="$ctrl.geneDefinitions[gene[0]].rec "></div>\n                <div class="genes-td" data-attr="{{$ctrl.geneDefinitions[gene[0]].attr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[gene[0]]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneTraitRangeStyle($ctrl.geneDefinitions[gene[0]], trait)"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom" ng-bind="$ctrl.geneDefinitions[gene[0]].dom"></div>-->\n            </div>\n        </div>\n        <br />\n        <br />\n    </div></script><script type="text/ng-template" id="attrTooltip.html"><div class="text-center">\n        <h4>{{$ctrl.attributes[$ctrl.hoverAttr].name}}</h4>\n        <h5>{{$ctrl.attributes[$ctrl.hoverAttr].desc}}</h5>\n        <br />\n        <div class="genes-table">\n            <!--<div class="genes-tr " ng-repeat="gene in $ctrl.geneDefinitions | filter:{attr: $ctrl.hoverAttr}" ng-if="unit.genesUnlocked.indexOf($ctrl.geneDefinitions.indexOf(gene)) >=0">\n                <div class="genes-td rec"><span ng-bind="gene.rec"></span>: <span ng-bind="{{-1*unit.genes[$ctrl.geneDefinitions.indexOf(gene)][0]}}"></span></div>\n                <div class="genes-td" data-attr="{{$ctrl.hoverAttr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)])"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom"><span ng-bind="gene.dom"></span>: <span ng-bind="unit.genes[$ctrl.geneDefinitions.indexOf(gene)][1]"></span></div>-->\n        </div>\n    </div>\n    <br />\n    <br />\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/traitSelector.html",'<div class="modal-body" id="modal-body"><div class="row"><div class="pull-right" style="margin-right: 3vw"><toggle ng-model="$ctrl.showLocked" style="lock" off="<i class=\'fa fa-unlock\'></i>" on="<i class=\'fa fa-lock\'></i>" size="btn-sm" offstyle="btn-success" onstyle="btn-danger"></toggle></div><div class="col-xs-4"><fieldset><h5>Genes</h5><div class="genes-table"><div class="genes-tr"><div class="genes-th rec">Recessive</div><div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div><div class="genes-th dom">Dominant</div></div><div class="genes-tr" ng-repeat="g in $ctrl.geneDefinitions" ng-show="g.unlocked || $ctrl.showLocked"><div class="genes-td rec" ng-bind="$ctrl.getGeneRecessive(g)"></div><div class="genes-td" data-attr="{{g.attr}}"><div class="progress progress-trait-selector"><div class="progress-bar" role="progressbar" aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(g)"></div></div></div><div class="genes-td dom" ng-bind="$ctrl.getGeneDominant(g)"></div></div></div></fieldset></div><div class="col-xs-8">Traits<div class="row"><div class="col-xs-12"><span class="trait-icon" ng-repeat="t in $ctrl.traitDefinitions"><button ng-show="t.unlocked || $ctrl.showLocked" class="btn btn-sm btn-info" type="button" ng-click="$ctrl.select(t)" ng-bind="t.name" data-ng-mouseenter="$ctrl.traitEnter(t);" ng-mouseleave="$ctrl.traitLeave(t);"></button></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor u="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/configurationTab.html",'<div class="row"><div class="col-xs-12"><h5>Resources</h5><div class="row"><span ng-repeat="rt in $ctrl.snapshot.resourceTypes" ng-bind="rt.name"></span></div><h5>Buildings</h5><h5>Workers</h5><h5>Genetix</h5><h5>Achievements</h5></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/fontTab.html","<style>#font-examples {\n        height: 90vh;\n    }\n    \n    #font-examples div {\n        font-size: 1.1vw;\n        color: gold;\n    }\n    \n    #font-examples input {\n        color: black;\n    }</style><div id=\"font-examples\" ng-init=\"fonts = ['hammer', 'shield', 'tools', 'happy', 'happy2', 'bee', 'egg','pollen','water','bee-2', 'honeypot', 'larva', 'tombstone', 'jar']\"><div class=\"col-xs-1\" ng-repeat=\"font in fonts|orderBy:font\"><i class=\"icon-{{font}}\"></i> <input type=\"text\" readonly=\"readonly\" value=\"{{font}}\"></div></div>")}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions" ng-if="$ctrl.unit.genes[$index][2] > 0"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div><div ng-repeat="earning in $ctrl.unit.earnings"><span ng-bind="earning.rid"></span>: <span ng-bind="earning.amount"></span></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div class="col-xs-12"><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li><li role="presentation"><a data-target="#configuration" role="tab" data-toggle="tab">Configuration</a></li><li role="presentation"><a data-target="#fonts" role="tab" data-toggle="tab">Fonts</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div><div role="tabpanel" class="tab-pane" id="configuration"><configuration-tab></configuration-tab></div><div role="tabpanel" class="tab-pane" id="fonts"><font-tab></font-tab></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="player-box"><h3 class="box-title" ng-transclude="boxTitleHtml">{{$ctrl.boxTitle}}</h3><div class="player-content"><ng-transclude></ng-transclude></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/resourceList/resourceList.html",'<div class="resource-list col-xs-12"><div class="row" ng-repeat="(key, value) in $ctrl.resources" ng-if="value[2] === true" data-attr="{{$ctrl.resourceTypes[key].attr}}" lvl-drop-target="true" on-drop="$ctrl.dropped(dragId, dropId, relativePos, key)"><div class="col-xs-12 col-sm-3"><h5 uib-tooltip="{{$ctrl.resourceTypes[key].desc}}">{{$ctrl.resourceTypes[key].name}}</h5></div><div class="col-xs-12 col-sm-9"><div class="progress progress-custom" ng-if="value[1] !== -1"><div class="progress-bar" role="progressbar" aria-valuenow="{{value[0]}}" aria-valuemin="0" aria-valuemax="{{value[1]}}" ng-style="{width: (100*(value[0]/value[1])) + \'%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerRate(key)"></span>/s </span><span class="amounts" ng-bind="value[0] + \' / \' + value[1]"></span></div></div><div class="progress progress-custom" ng-if="value[1] === -1"><div class="progress-bar" role="progressbar" aria-valuenow="1" aria-valuemin="0" aria-valuemax="1" ng-style="{width: \'100%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerRate(key)"></span>/s </span><span class="amounts" ng-bind="value[0]"></span></div></div></div></div></div>')}])}(),angular.module("bloqhead.genetixApp").constant("jobTypes",{IDLE:{jid:"IDLE",name:"Idler"},BREEDER:{jid:"BREEDER",name:"Breeding Queen",description:"Head Queen, performs the task of laying eggs and fertlizing them.",abilities:{spawn:[{rate:"PRD_E"}]}},FORAGER:{jid:"FORAGER",name:"Forager",description:"Collects nectar, pollen, or water",abilities:{collect:[{rid:"NECTAR",storage:"STR_N",gatherspeed:"SPD_C",travelspeed:"SPC_F"},{rid:"POLLEN",storage:"STR_P",gatherspeed:"SPD_C",travelspeed:"SPC_F"},{rid:"WATER",storage:"STR_P",gatherspeed:"SPD_C",travelspeed:"SPC_F"}]}},NURSE:{jid:"NURSE",name:"Nurse Bee",description:"Cares for eggs and produces royal jelly from honey and pollen",abilities:{produce:[{rid:"ROYAL_JELLY",rate:"PRD_J",cost:["COST_J_H","COST_J_P"],yield:"YLD_J"}]}},PRODUCER_FOOD:{jid:"PRODUCER_FOOD",name:"Food producer",description:"Converts stored honey, pollen, and water into usable food",abilities:{produce:[{rid:"FOOD",rate:"PRD_F",cost:["COST_F_H","COST_F_P","COST_F_W"],yield:"YLD_F"}]}},PRODUCER_HONEY:{jid:"PRODUCER_HONEY",name:"Honey producer",description:"Converts stored nectar into honey",abilities:{produce:[{rid:"HONEY",rate:"PRD_H",cost:["COST_H_N"],yield:"YLD_H"}]}},BUILDER:{jid:"BUILDER",name:"Builder",description:"Converts stored food into wax",abilities:{produce:[{rid:"WAX",rate:"PRD_W",cost:["COST_W_F"],yield:"YLD_W"}]}},UNDERTAKER:{jid:"UNDERTAKER",name:"Undertaker bee",description:"Converts dead bees and rejected eggs into food",abilities:{produce:[{rid:"FOOD",rate:"PRD_F",cost:"COST_F_DB",yield:"YLD_F"}]}},GUARD:{jid:"GUARD",name:"Guard bee",description:"Protects the hive which reduces the mortality rate",abilities:{protect:[{rid:"DEFENSE",amount:"DEF"}]}}}),angular.module("bloqhead.genetixApp").constant("traitDefinitions",[{name:"Big stinger",desc:"A stinger built for defense.",genes:[{chromosome:0,gene:0,value:1}],mods:[{DEF:{add:5}}],icon:"icon-shield text-success"},{name:"Little stinger",desc:"This below average sized stinger is bad for defense.",genes:[{chromosome:0,gene:0,value:0}],mods:[{DEF:{add:-5}}],icon:"icon-shield text-danger"},{name:"Extra Range 1",desc:"Can fly 1 additional cell.",genes:[{chromosome:1,gene:0,value:1}],mods:[{RNG:{add:1}}],icon:"fa-arrow-up text-success"},{name:"10% More Venomous",desc:"Extra venom for better defense.",genes:[{chromosome:2,gene:0,value:0}],requiredTraits:["Big stinger"],mods:[{DEF:{percent:10}}],icon:"icon-shield text-success"},{name:"Fly 10% Faster",desc:"Little stinger, faster flier.",genes:[{chromosome:2,gene:0,value:0}],requiredTraits:["Little stinger"],mods:[{SPD_F:{percent:10}}],icon:"fa-bolt text-success"}]).constant("beeAbilities",{DEF:{name:"Defense",desc:"Ability to defend the hive.",baseValue:1},RNG:{name:"Range",desc:"Number of cells a bee can fly before having to return to the hive.",baseValue:5},STR_P:{name:"Pollen Storage",desc:"The amount of pollen a bee can hold.",baseValue:10,rid:"POLLEN"},STR_N:{name:"Nectar Storage",desc:"The amount of nectar a bee can hold.",baseValue:10,rid:"NECTAR"},STR_W:{name:"Water Storage",desc:"The amount of water a bee can hold.",baseValue:10,rid:"WATER"},SPD_F:{name:"Flight Speed",desc:"The rate at which a bee can traverse 1 cell.",baseValue:4e3},SPD_C:{name:"Collection Speed",desc:"The rate at which a bee can collect 1 resource from a node.",baseValue:1e3},PRD_H:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:3e4,rid:"HONEY"},YLD_H:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"HONEY"},COST_H_N:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:1,rid:"HONEY",c_rid:"NECTAR"},PRD_W:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:3e4,rid:"WAX"},YLD_W:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"WAX"},COST_W_F:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:10,rid:"WAX",c_rid:"FOOD"},PRD_J:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:3e4,rid:"ROYAL_JELLY"},YLD_J:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"ROYAL_JELLY"},COST_J_H:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:10,rid:"ROYAL_JELLY",c_rid:"HONEY"},COST_J_P:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:10,rid:"ROYAL_JELLY",c_rid:"POLLEN"},PRD_F:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:1e4,rid:"FOOD"},YLD_F:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"FOOD"},COST_F_P:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:1,rid:"FOOD",c_rid:"POLLEN"},COST_F_H:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:1,rid:"FOOD",c_rid:"HONEY"},COST_F_W:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:1,rid:"FOOD",c_rid:"WATER"},COST_F_DB:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:5,rid:"FOOD",c_rid:"DEADBEES"},PRD_E:{name:"Egg Production",desc:"The rate at which a bee can produce eggs.",baseValue:3e4}}),angular.module("bloqhead.genetixApp").constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3,WORK:4}),angular.module("bloqhead.genetixApp").constant("achievementSetup",{achievementGroups:[{name:"Population",aids:["A_BIRTHS"]},{name:"Resources",aids:["A_DIRT_E","A_BRICKS_E","A_STEEL_E","A_WATER_E","A_WOOD_E","A_GOLD_E","A_SCIENCE_E","A_EVOCOIN_E","A_HAPPINESS_E"]},{name:"Buildings",aids:["A_SODHOUSE_B","A_DIRTPILE_B","A_WOODSHED_B","A_WATERHOLE_B"]}],achievements:{A_BIRTHS:{aid:"A_BIRTHS",name:"The Chosen One",desc:"Create a new unit",ranks:[[1,[["P_R_BONUS","DIRT",20]]],[3,[["P_R_BONUS","WOOD",20]]],[5,[["P_R_BONUS","EVOCOIN",1]]]]},A_DIRT_E:{aid:"A_DIRT_E",name:"Earn Dirt",desc:"Earn Dirt Desc",logmsg:"Earn Dirt Log",res:"DIRT",ranks:[[5,[["P_R_MULTIPLIER","DIRT",25]]],[25,[["P_R_UNLOCK","WOOD"],["P_B_UNLOCK","WOODSHED"],["P_B_BONUS","WOODSHED",1]]],[100,[["P_R_MULTIPLIER","DIRT",50]]],[1e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[2e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[3e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[4e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[5e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[7500,[["P_B_MULTIPLIER","DIRTPILE",50]]],[1e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[15e3,[["P_B_MULTIPLIER","DIRTPILE",75]]],[2e4,[["P_B_MULTIPLIER","DIRTPILE",100]]],[3e4,[["P_R_MULTIPLIER","DIRT",100]]],[5e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[8e4,[["P_B_MULTIPLIER","DIRTPILE",50]]]]},A_BRICKS_E:{aid:"A_BRICKS_E",name:"Earn Bricks",desc:"Earn Bricks Desc",logmsg:"Earn Bricks Log",res:"BRICKS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_STEEL_E:{aid:"A_STEEL_E",name:"Earn Steel",desc:"Earn Steel Desc",logmsg:"Earn Steel Log",res:"STEEL",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_WATER_E:{aid:"A_WATER_E",name:"Earn Water",desc:"Earn Water Desc",logmsg:"Earn Water Log",res:"WATER",ranks:[[50,[["P_R_MULTIPLIER","WATER",10]]],[75,[["P_B_MULTIPLIER","WATERHOLE",10]]],[500,[["P_R_MULTIPLIER","WATER",10]]],[750,[["P_B_MULTIPLIER","WATERHOLE",10]]],[2500,[["P_B_UNLOCK","LIBRARY"]]],[5e3,[["P_R_MULTIPLIER","WATER",10]]],[7500,[["P_B_MULTIPLIER","WATERHOLE",10]]],[5e4,[["P_R_MULTIPLIER","WATER",50]]],[75e3,[["P_B_MULTIPLIER","WATERHOLE",10]]]]},A_WOOD_E:{aid:"A_WOOD_E",name:"Earn Wood",desc:"Earn Wood Desc",logmsg:"Earn Wood Log",res:"WOOD",ranks:[[50,[["P_R_UNLOCK","WATER"],["P_B_UNLOCK","WATERHOLE"],["P_B_BONUS","WATERHOLE",1]]],[250,[["P_R_MULTIPLIER","WOOD",50]]],[500,[["P_B_MULTIPLIER","WOODSHED",100]]],[1e3,[["P_B_MULTIPLIER","WOODSHED",100]]],[2500,[["P_R_MULTIPLIER","WOOD",50]]],[5e3,[["P_R_MULTIPLIER","WOOD",50]]],[1e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]],[2e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]]]},A_GOLD_E:{aid:"A_GOLD_E",name:"Earn Gold",desc:"Earn Gold Desc",logmsg:"Earn Gold Log",res:"GOLD",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_SCIENCE_E:{aid:"A_SCIENCE_E",name:"Earn Science",desc:"Earn Science Desc",logmsg:"Earn Science Log",res:"SCIENCE",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_HAPPINESS_E:{aid:"A_HAPPINESS_E",name:"Earn Happiness",desc:"Earn Happiness Desc",logmsg:"Earn Happiness Log",res:"HAPPINESS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_EVOCOIN_E:{aid:"A_EVOCOIN_E",name:"Earn EVO-Coins",desc:"Earn EVO-Coins Desc",logmsg:"Earn EVO-Coins Log",res:"EVOCOIN",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",20]]]]},A_SODHOUSE_B:{aid:"A_SODHOUSE_B",name:"Build a Sod House",desc:"Build a Sod House",logmsg:"Build a Sod House",res:"HAPPINESS",ranks:[[4,[["P_B_BONUS","DIRTPILE",4],["P_B_BONUS","WOODSHED",4],["P_B_BONUS","WATERHOLE",4]]]]},A_DIRTPILE_B:{aid:"A_DIRTPILE_B",name:"Build a Dirt Pile",desc:"Build a Dirt Pile",logmsg:"Build a Dirt Pile",res:"DIRT",ranks:[[25,[["P_R_MULTIPLIER","DIRT",250]]]]},A_WOODSHED_B:{aid:"A_WOODSHED_B",name:"Build a Woodshed",desc:"Build a Woodshed",logmsg:"Build a Woodshed",res:"WOOD",ranks:[[25,[["P_R_MULTIPLIER","WOOD",250]]]]},A_WATERHOLE_B:{aid:"A_WATERHOLE_B",name:"Build a Water Hole",desc:"Build a Water Hole",logmsg:"Build a Water Hole",res:"WATER",ranks:[[25,[["P_R_MULTIPLIER","WATER",250]]]]},A_LIBRARY_B:{aid:"A_LIBRARY_B",name:"Build a Library",desc:"Build a Library",logmsg:"Build a Library",res:"SCIENCE",ranks:[[1,[["P_R_UNLOCK","SCIENCE"]]]]}},perks:{P_R_UNLOCK:{pid:"P_R_UNLOCK",name:"New Resource: %(res)s",desc:"Unlocks the %(res)s resource.",logmsg:"The %(res)s resource has been unlocked.",once:!1},P_R_MULTIPLIER:{pid:"P_R_MULTIPLIER",name:"Resource Multiplier",desc:"Increases the rate at which you aquire %(res)s by %(amt)d%%.",logmsg:"Earned %(name)s - The rate that you aquire %(res)s has been increased by %(amt)d%%."},P_R_BONUS:{pid:"P_R_BONUS",name:"Bonus Resources",desc:"%(amt)d %(res)s will be added to your storage.",logmsg:"%(amt)d %(res)s has been added to your storage."},P_B_UNLOCK:{pid:"P_B_UNLOCK",name:"New building: %(buildingType)s",desc:"Unlocks the %(buildingType)s building.",logmsg:"The %(buildingType)s building has been unlocked."},P_B_BONUS:{pid:"P_B_GIFT",name:"Bonus Buildings",desc:"%(amt)d free %(buildingType)s%(plural)s for you to use.",logmsg:"You have been given %(amt)d %(buildingType)s%(plural)s."},P_B_MULTIPLIER:{pid:"P_B_MULTIPLIER",name:"%(buildingType)s multiplier",desc:"Your %(buildingType)ss now hold %(amt)d%% more.",logmsg:"Your %(buildingType)ss just got %(amt)d%% bigger."}}}),angular.module("bloqhead.genetixApp").constant("defaultBuildings",{HONEYCOMB:{name:"Honeycomb",description:"Used for everything.",use:"everything",size:2,baseCost:[],purchased:0,gifted:1,unlocked:!0,multiplier:1}}),angular.module("bloqhead.genetixApp").constant("defaultState",{clearLog:!0,autoSaveMs:3e4,gameLoopServiceState:{stepTimeMs:50},achievementServiceState:null,resourceServiceState:{resources:{}},buildingServiceState:{buildings:{}}}).constant("gameSaveKey","GENETIX_SAVE").constant("gameStates",{PAUSED:0,RUNNING:1}),angular.module("bloqhead.genetixApp").constant("resourceTypes",{NECTAR:{rid:"NECTAR",name:"Nectar",desc:"Used for creating honey.",jids:["FORAGER"]},POLLEN:{rid:"POLLEN",name:"Pollen",desc:"Used for food creation.",jids:["FORAGER"]},WATER:{rid:"WATER",name:"Water",desc:"Used for food creation and breeding.",jids:["FORAGER"]},FOOD:{rid:"FOOD",name:"Food",desc:"Nurishment for the hive.",jids:["PRODUCER_FOOD"]},HONEY:{rid:"HONEY",name:"Honey",desc:"Used for making royal jelly and food and in building.",jids:["PRODUCER_HONEY"]},ROYAL_JELLY:{rid:"ROYAL_JELLY",name:"Royal Jelly",desc:"Used for breeding new queens.",jids:["NURSE"]},WAX:{rid:"WAX",name:"Wax",desc:"Used in honeycomb construction.",jids:["BUILDER"]},DEADBEES:{rid:"DEADBEES",name:"Dead bees",desc:"Dead bees that take up space, convert them to food.",jids:["UNDERTAKER"]},DEFENSE:{rid:"DEFENSE",name:"Defense",desc:"Hive defensive ability.",jids:["GUARD"]}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
