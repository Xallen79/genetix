function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,r,a,o=e.length,i=o?e[0].length:0,l="",s=[];t>0;t--)l+="\0";for(n=0;n<o;n++){for(r=0;r<i;r++)a=e[n][r],s.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));s.push(l)}return s.join("")}function n(e,t){var n,r,a,o=e.length,i=parseInt(o*t),l=o?e[0].length:0,s=parseInt(l*t),d=[];for(a=0;a<i;a++)for(d.push(n=[]),r=0;r<s;r++)n.push(e[parseInt(a/t)][parseInt(r/t)]);return d}window.generateBitmapDataURL=function(r,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(r=n(r,a));var o,i=r.length,l=i?r[0].length:0,s=(4-3*l%4)%4,d=(3*l+s)*i,c=54+d;return i=e(i,4),l=e(l,4),d=e(d,4),c=e(c,4),o="BM"+c+"\0\0\0\x006\0\0\0(\0\0\0"+l+i+"\0\0\0\0\0\0"+d+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(r,s),"data:image/bmp;base64,"+btoa(o)}}(),function(e,t,n){function r(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?o=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?o=function(e){e=e.substring(1);var t=0,n=e.length,r=[];if(3==n)for(;t<n;t++)r.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)r.push(parseInt("0x"+e.substring(t,t+2)));return r}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(o===n&&r(a),o(a))}var o;e.generateLowResBitmap=function(n){n=n||10;for(var r,o,i,l,s,d=50,c=49,u=[];c>=0;c--)for(u.push(o=[]),r=0;r<d;r++)o.push(a(r+"_"+c));return l=t.createElement("img"),s=e.generateBitmapDataURL(u,n),l.src=s,l.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",l.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",i=t.getElementById("img"),null===i&&(i=t.createElement("div"),i.id="img",t.getElementById("wrap").appendChild(i)),i.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',i.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},i.appendChild(l),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),function(e){e(function(){e("body").tooltip({selector:"[rel=tooltip]"})})}(jQuery),angular.module("bloqhead.genetixApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/");var r=[];r.push({name:"home",url:"/",templateUrl:"components/home.html"}),r.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),r.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),r.forEach(function(t){e.state(t)})}]).run(["gameService","populationService",function(e,t){e.init(),t.init()}]);var game=angular.module("bloqhead.genetixApp");game.factory("Breeder",["$filter","TraitInspector",function(e,t){function n(e,t){for(var n=Math.random(),r=angular.copy(n<=d.crossoverrate?e:t),a=r[2]/255,o="",i="",l=0;l<8;l++)o+=Math.random()<a?"1":"0",i+=Math.random()<a?"1":"0";r[0],r[1];return r[0]^=parseInt(o,2),r[1]^=parseInt(i,2),r}function r(e,t){return generateBitmapDataURL(l(o(e),e.length),t)}function a(e,t){return generateBitmapDataURL(l(i(e),e.length),t)}function o(e){for(var t=[],n=0;n<e.length;n++){var r=e[n][0],a=e[n][1],o=Math.abs(r-a)/255;r>a?a=0:r=0,r*=o,a*=o,t.push([r,a,0])}return t}function i(e){for(var t=[],n=0;n<e.length;n++)t.push([0,0,e[n][2]]);return t}function l(e,t){for(var n=[],r=0;r<e.length/t;r++){for(var a=[],o=0;o<t;o++)a.push(e[o+r*t]);n.push(a)}return n}var s=function(e){this.traitInspector=new t,this.update(e),this.setRandomName()};s.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.generation=e.generation||this.generation||0,this.scale=e.scale||this.scale||6,this.genes=e.genes||this.genes||[],this.redGreenImage=r(this.genes,this.scale),this.blueImage=a(this.genes,this.scale),this.traits=this.traitInspector.getTraits(this.genes)},s.prototype.breed=function(e,t){for(var r=this,a=e,o=new s({id:t,generation:r.generation+1,genes:[]}),i=0;i<r.genes.length;i++){var l=r.genes[i],d=a.genes[i];o.genes.push(n(l,d))}return o.update({scale:6}),o},s.prototype.getTraits=function(){return this.traits},s.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},s.prototype.setRandomName=function(){this.name=this.getRandomName()},s.prototype.getRandomName=function(){if(!this.genes||0===this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?c[randomIntFromInterval(0,c.length-1)]:u[randomIntFromInterval(0,u.length-1)],t=p[randomIntFromInterval(0,p.length-1)]+g[randomIntFromInterval(0,g.length-1)]+m[randomIntFromInterval(0,m.length-1)];return e+t};var d={crossoverrate:.5},c=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],u=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],p=["","","","","","Van ","Von ","O'","Mc","Mc"],g=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],m=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return s}]);var game=angular.module("bloqhead.genetixApp");game.factory("Population",["$filter","Breeder","geneDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.geneDefinitions=n,this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.population=e.population|this.population||this.createInitialPopulation(e.size),this.breeders=e.breeders|this.breeders||[]},r.prototype.createInitialPopulation=function(e){for(var n=this,r=[],a=0;a<e;a++){for(var o=[],i=0;i<n.geneDefinitions.length;i++)o.push([0,0,0]);var l=a%2===0?255:0,s=a%2===0?0:255;o[42][0]=l,o[42][1]=s;var d=new t({id:a,generation:0,scale:6,genes:angular.copy(o)});d.update(),r.push(d)}return r},r.prototype.isBreeding=function(){for(var e=!1,t=!1,n=0;n<this.breeders.length;n++){var r=this.getById(this.breeders[n]);if(r.hasTrait("Male")?e=!0:t=!0,e&&t)break}return e&&t},r.prototype.getById=function(e){return this.population.filter(function(t){return t.id===e})[0]},r.prototype.getByGeneration=function(e){return this.population.filter(function(t){return t.generation===e})},r}]);var game=angular.module("bloqhead.genetixApp");game.constant("geneDefinitions",function(){var e=[];return e[0]={dom:"Broad Shoulders",rec:"Slender Shoulders",attr:["STR"]},e[1]={dom:"Thick Skull",rec:"Soft Skull",attr:["STR"]},e[2]={dom:"Large Arms",rec:"Small Arms",attr:["STR"]},e[3]={dom:"Large Legs",rec:"Small Legs",attr:["STR"]},e[4]={dom:"Big Chest",rec:"Weak Chest",attr:["STR"]},e[5]={dom:"Tough Jaw",rec:"Weak Jaw",attr:["STR"]},e[6]={dom:"Oafish",rec:"Mousey",attr:["STR"]},e[7]={dom:"",rec:"",attr:["STR"]},e[8]={dom:"",rec:"",attr:["STR"]},e[9]={dom:"",rec:"",attr:["STR"]},e[10]={dom:"",rec:"",attr:["STR"]},e[11]={dom:"",rec:"",attr:["STR"]},e[12]={dom:"",rec:"",attr:["STR"]},e[13]={dom:"",rec:"",attr:["STR"]},e[14]={dom:"Calculated Decisions",rec:"Reckless",attr:["INT"]},e[15]={dom:"Lateral Thinker",rec:"Single Minded",attr:["INT"]},e[16]={dom:"Quick Learner",rec:"Forgetful",attr:["INT"]},e[17]={dom:"",rec:"",attr:["INT"]},e[18]={dom:"",rec:"",attr:["INT"]},e[19]={dom:"",rec:"",attr:["INT"]},e[20]={dom:"",rec:"",attr:["INT"]},e[21]={dom:"",rec:"",attr:["INT"]},e[22]={dom:"",rec:"",attr:["INT"]},e[23]={dom:"",rec:"",attr:["INT"]},e[24]={dom:"",rec:"",attr:["INT"]},e[25]={dom:"",rec:"",attr:["INT"]},e[26]={dom:"",rec:"",attr:["INT"]},e[27]={dom:"",rec:"",attr:["INT"]},e[28]={dom:"Full Lips",rec:"Thin Lips",attr:["CHR"]},e[29]={dom:"Dark Skin",rec:"Fair Skin",attr:["CHR"]},e[30]={dom:"Eloquent",rec:"Catatonic",attr:["CHR"]},e[31]={dom:"Powerful Voice",rec:"Quiet Voice",attr:["CHR"]},e[32]={dom:"",rec:"",attr:["CHR"]},e[33]={dom:"",rec:"",attr:["CHR"]},e[34]={dom:"",rec:"",attr:["CHR"]},e[35]={dom:"",rec:"",attr:["CHR"]},e[36]={dom:"",rec:"",attr:["CHR"]},e[37]={dom:"",rec:"",attr:["CHR"]},e[38]={dom:"",rec:"",attr:["CHR"]},e[39]={dom:"",rec:"",attr:["CHR"]},e[40]={dom:"",rec:"",attr:["CHR"]},e[41]={dom:"",rec:"",attr:["CHR"]},e[42]={dom:"Female",rec:"Male",attr:["LCK"]},e[43]={dom:"",rec:"",attr:["LCK"]},e[44]={dom:"",rec:"",attr:["LCK"]},e[45]={dom:"",rec:"",attr:["LCK"]},e[46]={dom:"",rec:"",attr:["LCK"]},e[47]={dom:"",rec:"",attr:["LCK"]},e[48]={dom:"",rec:"",attr:["LCK"]},e[49]={dom:"",rec:"",attr:["LCK"]},e}()),game.constant("traitDefinitions",function(){var e=[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Female",genes:[[42,0,255]]},{name:"Male",genes:[[42,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}],t=[],n=function(t){return e.filter(function(e){return t===e.name})[0]},r=function(e){if(angular.isDefined(e.requiredTraits))for(var a=0;a<e.requiredTraits.length;a++){var o=e.requiredTraits[a],i=n(o);t.indexOf(i.name)===-1&&r(i);for(var l=0;l<i.genes.length;l++)e.genes.push(i.genes[l])}t.push(e.name)},a=function(){for(var t=0;t<e.length;t++){var n=e[t];r(n)}return e};return a()}()),game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){"undefined"==typeof e&&(e={})},r.prototype.getTraits=function(e){var t=[];if(e.length)for(var r=0;r<n.length;r++){for(var a=n[r],o=!0,i=0;i<a.genes.length&&o===!0;i++){var l=a.genes[i],s=e[l[0]][1]-e[l[0]][0];(s<l[1]||s>l[2])&&(o=!1)}o&&t.push(a)}return t},r}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div class="bloqhead-component"><button type="button" class="btn btn-xs btn-danger" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["gameService","gameStates",function(e,t){var n=this;n.$onInit=function(){n.currentState=e.getState()},n.toggleState=function(){n.currentState=n.currentState===t.RUNNING?t.PAUSED:t.RUNNING,e.setState(n.currentState)},n.getIcon=function(){return n.currentState===t.RUNNING?"fa-pause":"fa-play"}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","populationService",function(e,t){var n=this;n.$onInit=function(){n.breeders=[],n.population=[],t.SubscribePopulationUpdateEvent(e,n.updatePopulation),t.SubscribeBreederUpdateEvent(e,n.updateBreeders)},n.updateGene=function(e,t,r,a){if(a){var o=n.breeders[e];o.genes[t]=r,o.update()}},n.addBreeder=function(e){t.addBreeder(e)},n.removeBreeder=function(e){t.removeBreeder(e)},n.updateBreeders=function(e,t){n.breeders=t},n.updatePopulation=function(e,t){n.population=t}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:!0,require:{mainCtrl:"^bloqhead.components.mainGame"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit}});var game=angular.module("bloqhead.genetixApp");game.constant("gameStates",{PAUSED:0,RUNNING:1}),game.service("gameService",["$window","$rootScope","gameStates",function(e,t,n){var r=this;r.init=function(e){angular.isDefined(e)||(e={}),r.stepTimeMs=e.stepTimeMs||1e3,r.lastTime=0,r.currentState=n.PAUSED,r.gameLoop(0)},r.getState=function(){return r.currentState},r.setState=function(e){r.currentState=e},r.gameLoop=function(r){for(var a=this,o=0;a.lastTime+r>a.stepTimeMs*(o+1);)o++;a.lastTime=a.lastTime-a.stepTimeMs*o,a.currentState==n.RUNNING&&o>0&&t.$emit("gameLoopEvent",o),e.requestAnimationFrame(this.gameLoop.bind(this))},r.SubscribeGameLoopEvent=function(e,n){var r=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.service("populationService",["$rootScope","gameService","Population",function(e,t,n){var r=this;r.init=function(a){angular.isDefined(a)||(a={}),r.breedSteps=a.breedSteps||r.breedSteps||6,r.stepsSinceBreed=0,r.population=a.population||new n({size:10}),t.SubscribeGameLoopEvent(e,r.handleGameLoop)},r.handleGameLoop=function(t,n){if("gameLoopEvent"!==t.name)return void console.log("populateService.handleGameLoop - Invalid event: "+t);if(r.population.isBreeding())for(r.stepsSinceBreed+=n;r.stepsSinceBreed>=r.breedSteps;)r.stepsSinceBreed-=r.breedSteps,console.log("BREED!"),e.$emit("populationUpdateEvent",r.population.population)},r.addBreeder=function(t){r.population.breeders.indexOf(t)===-1&&(r.population.breeders.push(t),e.$emit("breederUpdateEvent",r.population.breeders))},r.removeBreeder=function(t){var n=r.population.breeders.indexOf(t);n!==-1&&(r.population.breeders.splice(n,1),r.population.isBreeding()||(r.stepsSinceBreed=0),e.$emit("breederUpdateEvent",r.population.breeders))},r.SubscribeBreederUpdateEvent=function(t,n){var a=e.$on("breederUpdateEvent",n);t.$on("$destroy",a),e.$emit("breederUpdateEvent",r.population.breeders)},r.SubscribePopulationUpdateEvent=function(t,n){var a=e.$on("populationUpdateEvent",n.bind(this));t.$on("$destroy",a),e.$emit("populationUpdateEvent",r.population.population)}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("genomeEditor",{bindings:{unit:"<",updateGene:"&"},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e,t.expando=!1},t.randomize=function(e){var n=[];n.push(randomIntFromInterval(0,255)),n.push(randomIntFromInterval(0,255)),n.push(randomIntFromInterval(0,255)),t.updateGene({$geneIndex:e,$values:n})},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0===randomIntFromInterval(0,1)?"Male":"Female",r="Male"==n?255:0,a="Male"==n?0:255;t.updateGene({$geneIndex:42,$values:[r,a,0]}),t.unit.setRandomName()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,r,a,o){var i=this;i.lastBreederID=0,i.newBreederGender="Male",i.killBreeder=function(e){i.diggers.splice(i.diggers.indexOf(e),1)},i.addNewBreeder=function(){for(var e=[],t=0;t<a.length;t++)e.push([0,0,0]);var n="Male"==i.newBreederGender?255:0,o="Male"==i.newBreederGender?0:255;e[42][0]=n,e[42][1]=o;var l=new r({id:i.lastBreederID++,generation:0,scale:6,genes:e});l.update(),i.diggers.unshift(l)},i.$onInit=function(){i.geneDefinitions=a,i.traitDefinitions=o,i.diggers=[],i.updateGene=function(e,t,n){var r=i.diggers[e];r.genes[t]=n,r.update()}}}]),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<ul class="nav nav-pills"><li><a ui-sref="home.main">Main</a></li><li><a ui-sref="home.test">Test Interface</a></li></ul><div class="row"><div class="col-xs-1"><bloqhead-game-control></bloqhead-game-control></div></div><div ui-view=""></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-2"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Goals"><bloqhead-goal-list></bloqhead-goal-list></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Resources"></bloqhead-player-box></div></div></div><div class="col-xs-8"><div class="row"><div class="col-xs-6" ng-repeat="breederid in $ctrl.breeders"><bloqhead-player-box title="Breeder"><button type="button" class="close" ng-click="$ctrl.removeBreeder(breederid)"><span>&times;</span></button><genome-editor unit="$ctrl.population[breederid]" update-gene="$ctrl.updateGene(breederid, $geneIndex, $values, true)"></genome-editor></bloqhead-player-box></div></div></div><div class="col-xs-2"><bloqhead-player-box title="Population"><div ng-repeat="child in $ctrl.population"><genome-editor unit="child" update-gene="$ctrl.updateGene($index, $geneIndex, $values, false)"></genome-editor><button class="btn btn-sm btn-primary" ng-click="$ctrl.addBreeder($index)">Breed Me</button></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" ng-bind="$ctrl.title"></h3></div><div class="panel-body"><ng-transclude></ng-transclude></div><div class="panel-footer"><span ng-bind="$ctrl.footer"></span></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4>{{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values</th><th><button type="button " class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll(); "><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions "><td ng-bind="$index "></td><td ng-bind="gene.dom "></td><td ng-bind="gene.rec "></td><td>D <input type="number " min="0 " max="255 " ng-model="$ctrl.unit.genes[$index][1] " ng-change="$ctrl.unit.update() "> R <input type="number " min="0 " max="255 " ng-model="$ctrl.unit.genes[$index][0] " ng-change="$ctrl.unit.update() "> M <input type="number " min="0 " max="255 " ng-model="$ctrl.unit.genes[$index][2] " ng-change="$ctrl.unit.update() "></td><td><button type="button " class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index); "><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#other" role="tab" data-toggle="tab">Other</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><fieldset><div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-4" ng-repeat="digger in $ctrl.diggers"><button type="button" class="close" ng-click="$ctrl.killBreeder(digger)"><span>&times;</span></button><genome-editor unit="digger" update-gene="$ctrl.updateGene($index, $geneIndex, $values)"></genome-editor></div></div></fieldset></div><div role="tabpanel" class="tab-pane" id="other"><div class="well"><h3>Nothing to see here....</h3></div></div></div></div>')}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
