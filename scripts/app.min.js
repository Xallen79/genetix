function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,i,a,o=e.length,s=o?e[0].length:0,r="",l=[];t>0;t--)r+="\0";for(n=0;n<o;n++){for(i=0;i<s;i++)a=e[n][i],l.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));l.push(r)}return l.join("")}function n(e,t){var n,i,a,o=e.length,s=parseInt(o*t),r=o?e[0].length:0,l=parseInt(r*t),c=[];for(a=0;a<s;a++)for(c.push(n=[]),i=0;i<l;i++)n.push(e[parseInt(a/t)][parseInt(i/t)]);return c}window.generateBitmapDataURL=function(i,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(i=n(i,a));var o,s=i.length,r=s?i[0].length:0,l=(4-3*r%4)%4,c=(3*r+l)*s,d=54+c;return s=e(s,4),r=e(r,4),c=e(c,4),d=e(d,4),o="BM"+d+"\0\0\0\x006\0\0\0(\0\0\0"+r+s+"\0\0\0\0\0\0"+c+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(i,l),"data:image/bmp;base64,"+btoa(o)}}(),function(e,t,n){function i(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?o=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?o=function(e){e=e.substring(1);var t=0,n=e.length,i=[];if(3==n)for(;t<n;t++)i.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)i.push(parseInt("0x"+e.substring(t,t+2)));return i}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(o===n&&i(a),o(a))}var o;e.generateLowResBitmap=function(n){n=n||10;for(var i,o,s,r,l,c=50,d=49,p=[];d>=0;d--)for(p.push(o=[]),i=0;i<c;i++)o.push(a(i+"_"+d));return r=t.createElement("img"),l=e.generateBitmapDataURL(p,n),r.src=l,r.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",r.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",s=t.getElementById("img"),null===s&&(s=t.createElement("div"),s.id="img",t.getElementById("wrap").appendChild(s)),s.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',s.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},s.appendChild(r),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),angular.module("bloqhead.genetixApp",["ui.router","lz-string","ui.bootstrap","sprintf","ngAnimate","lvl.directives.dragdrop","ui.toggle"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$uibTooltipProvider","$animateProvider",function(e,t,n,i,a){t.otherwise("/main");var o=[];o.push({name:"home",url:"/",component:"bloqhead.components.home"}),o.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),o.push({name:"home.farm",url:"farm",component:"bloqhead.components.farmUI"}),o.push({name:"home.achievements",url:"achievements",component:"bloqhead.components.achievementsUI"}),o.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),o.forEach(function(t){e.state(t)}),i.options({appendToBody:!0,placement:"auto top",popupCloseDelay:250,popupDelay:250})}]).run(["gameService",function(e){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.achievementsUI",{templateUrl:"components/achievements/achievements.html",controller:"bloqhead.controllers.achievementsUI",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.achievementsUI",["$rootScope","achievementSetup","resourceTypes","achievementService",function(e,t,n,i){var a=this;a.achievementService=i,a.achievementSetup=t,a.$onInit=function(){a.achievementProgress=i.getProgressSnapshot(),console.log(a.achievementProgress)},a.getAchievementClass=function(e){var t={};return t},a.getAchievementRankClass=function(e,t){var i={};if(e.res){var o=a.achievementService.state.progress.achievements[e.aid]||{};o.lastRank>=t[0]&&(i["achievement-rank-"+n[e.res].attr]=!0)}return i}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBee",{templateUrl:"components/bee/bee.html",controller:"bloqheader.controllers.bee",bindings:{unit:"<",canBreed:"<",assign:"&",mode:"@",display:"@"}}),game.controller("bloqheader.controllers.bee",["$uibModal","jobTypes","bloqheadGetGeneProgressStyle","resourceTypes",function(e,t,n,i){var a=this;a.$onInit=function(){a.display=a.display||"TILE",a.jobTypes=t,a.resourceTypes=i},a.canFertilize=function(){return!0},a.assignMe=function(e){"CONSUME"===e&&(e="egg"===a.unit.beetype?"CONSUME_EGG":"CONSUME_LARVA"),a.assign({$id:a.unit.id,$type:e})},a.getGeneTraitRangeStyle=function(e,t){return n().traitRange(e,t)},a.getGeneRangeStyle=function(e){return n().range(e[0],e[1])},a.getGeneValueStyle=function(e){return n().value(e[1]-e[0])},a.imageHover=function(e){},a.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return a.unit}}})}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBuildingList",{templateUrl:"components/buildingList/buildingList.html",controller:"bloqhead.controllers.buildingList",bindings:{hive:"="}}),game.controller("bloqhead.controllers.buildingList",["$scope","resourceTypes",function(e,t){var n=this;n.$onInit=function(){n.buildings=n.hive.buildings,n.resourceTypes=t},n.build=function(e){n.hive.build(e)}}]);var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],i=0;i<e.length;i++)e[i].hasTrait(t)&&n.push(e[i]);return n}}),game.factory("Bee",["$filter","TraitInspector","Genome","jobTypes","resourceTypes","logService","Point",function(e,t,n,i,a,o,r){var l=function(e){this.traitInspector=new t,this.update(e)};l.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.pos=e.pos||this.pos||"A1",this.tripStart=e.tripStart||this.tripStart||null,this.tripEnd=e.tripEnd||this.tripEnd||null,this.tripElaspedTime=e.tripElaspedTime||this.tripElaspedTime||0,this.tripTotalTime=e.tripTotalTime||this.tripTotalTime||0,this.waitingAtResource=angular.isDefined(e.waitingAtResource)?e.waitingAtResource:!angular.isDefined(this.waitingAtResource)||this.waitingAtResource,this.dt=e.dt||this.dt||(new Date).getTime(),this.queenParentId=e.queenParentId||this.queenParentId||null,this.droneParentId=e.droneParentId||this.droneParentId||null,this.generation=e.generation||this.generation||0,this.jid=e.currentJob||e.jid||this.jid||"IDLE",this.msSinceWork=e.msSinceWork||this.msSinceWork||0,this.jobStepIndex=e.jobStepIndex||this.jobStepIndex||0,this.nodeIds=e.nodeIds||this.nodeIds||[],this.nodes=this.nodes||[],this.nodeIndex=e.nodeIndex||this.nodeIndex||0,this.onStrike=e.onStrike||this.onStrike||!1,this.earnings=e.earnings||this.earnings||angular.copy(c),this.beeMutationChance=e.beeMutationChance||this.beeMutationChance||.005,this.genome=new n(e.genomeState||this.genomeState||{mutationChance:this.beeMutationChance}),this.genomeState=this.genome.getState(),this.dead=e.dead||this.dead||!1,this.baskets=e.baskets||this.baskets||{NECTAR:0,POLLEN:0,WATER:0},this.traits=this.traitInspector.getTraits(this.genome),this.abilities=this.traitInspector.getAbilities(this.traits),this.name=this.beetype+"#"+this.id},l.prototype.getState=function(){var e={id:this.id,pos:this.pos,tripStart:this.tripStart,tripEnd:this.tripEnd,tripElaspedTime:this.tripElaspedTime,tripTotalTime:this.tripTotalTime,waitingAtResource:this.waitingAtResource,dt:this.dt,queenParentId:this.queenParentId,droneParentId:this.droneParentId,generation:this.generation,jid:this.jid,msSinceWork:this.msSinceWork,jobStepIndex:this.jobStepIndex,nodeIndex:this.nodeIndex,onStrike:this.onStrike,earnings:this.earnings,beeMutationChance:this.beeMutationChance,genomeState:this.genomeState,nodeIds:this.nodeIds};return e},l.prototype.getTraits=function(){return this.traits},l.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},l.prototype.getAbility=function(e){return this.abilities[e]},l.prototype.die=function(){o.logBreedMessage(this.name+" died."),this.dead=!0},l.prototype.mature=function(e){o.logGeneralMessage(this.beetype+" cannot mature. type: "+e)},l.prototype.hatch=function(e){o.logGeneralMessage(this.beetype+" cannot hatch. type: "+e)},l.prototype.storageAmount=function(e){var t=this.getAbility("STR_"+e).value;return t-this.baskets[e]},l.prototype.storageFull=function(){return this.storageAmount("NECTAR")+this.storageAmount("POLLEN")+this.storageAmount("WATER")===0},l.prototype.setJob=function(e){if(this.jid!==e){var t=i[e];if(t.beetypes.indexOf(this.beetype)==-1)return void o.logGeneralMessage(this.beetype+" cannot be assigned to the job: "+e);this.harvesting&&(this.nodes[this.nodeIndex].mapResource.DoneHarvesting(),this.harvesting=!1),this.jid=e,this.msSinceWork=0,this.jobStepIndex=-1,this.nodes=[],this.nodeIds=[],this.nodeIndex=0,this.trip=null,this.tripStart=null,this.tripEnd=null,this.tripTotalTime=null,this.tripElaspedTime=null,this.isMoving=!1}},l.prototype.addNode=function(e){console.log(e),this.jid!==i.FORAGER.jid&&this.setJob(i.FORAGER.jid),this.nodeIds.indexOf(e.id)===-1&&(this.nodes.push(e),this.nodeIds.push(e.id))},l.prototype.removeNode=function(e){this.nodes.splice(this.nodes.indexOf(e),1),this.nodeIds.splice(this.nodeIds.indexOf(e.id),1)},l.prototype.doSpawn=function(e,t,n){var i=this.getAbility(n.spawn.rate).value;for(this.msSinceWork+=e;this.msSinceWork>=i;){if(this.canLayEggs(t)){var a=this.layEgg(t.getNextId());t.bees.push(a)}this.msSinceWork-=i}},l.prototype.doProduce=function(e,t,n){var i=this.getAbility(n.produce.rate).value;if(this.msSinceWork+=e,this.msSinceWork>=i)for(var a=this.getAbility(n.produce.yield);this.msSinceWork>=i;){for(var o=[],r=!1,l=0;l<n.produce.cost.length;l++){var c=this.getAbility(n.produce.cost[l]);if(r=t.changeResource(c.c_rid,-1*c.value)>=0,!r)break;o.push({rid:c.c_rid,amount:c.value})}if(r&&(r=t.changeResource(a.rid,a.value)>=0),r)this.msSinceWork-=i;else{for(s=0;s<o.length;s++)t.changeResource(o[s].rid,o[s].amount);this.msSinceWork=0}}},l.prototype.doTravel=function(e,t,n,i){if(this.tripStart!==this.pos){this.isMoving=!0;var a=this.getAbility(n.travel.rate).value;this.tripStart=this.pos,this.tripElaspedTime=0,this.tripEnd=this.nodes[this.nodeIndex].id,this.tripTotalTime=i.GetHexDistance(this.nodes[this.nodeIndex],i.GetHexById(this.tripStart))*a}this.tripElaspedTime+=e,this.tripElaspedTime>=this.tripTotalTime&&(this.isMoving=!1,this.jobStepIndex++,this.msSinceWork=0,this.tripStart=null,this.pos=this.nodes[this.nodeIndex].id,this.nodes[this.nodeIndex].mapResource.QueueHarvest(this))},l.prototype.doCollect=function(e,t,n,i){if(!this.waitingAtResource){var s=this.nodes[this.nodeIndex].mapResource,r=this.getAbility(n.collect.rate).value*s.harvestMultiplier;for(this.msSinceWork+=e;this.msSinceWork>=r;){var l=!1,c=a.NECTAR.rid;s.GetAvailable(c)>0&&this.storageAmount(c)>0&&(this.baskets[c]+=s.Collect(c,1),l=!0),c=a.POLLEN.rid,!l&&s.GetAvailable(c)>0&&this.storageAmount(c)>0&&(this.baskets[c]+=s.Collect(c,1),l=!0),c=a.WATER.rid,!l&&s.GetAvailable(c)>0&&this.storageAmount(c)>0&&(this.baskets[c]+=s.Collect(c,1),l=!0),l?this.msSinceWork-=r:(o.logWorkMessage(this.name+" done harvesting."),this.harvesting=!1,this.nodes[this.nodeIndex].mapResource.DoneHarvesting(),this.msSinceWork-=r,this.nodeIndex+1===this.nodes.length?(this.nodeIndex=0,this.goHome(0,t,i)):this.storageFull()?this.goHome(0,t,i):(this.jobStepIndex=0,this.nodeIndex++))}}},l.prototype.doDeposit=function(e,t,n){var i=this.getAbility(n.deposit.rate).value;if(this.msSinceWork+=e,this.msSinceWork>=i){var o=!1,s=a.NECTAR.rid;this.baskets[s]>0&&t.changeResource(s,1)>=0&&(this.baskets[s]--,o=!0),s=a.POLLEN.rid,this.baskets[s]>0&&t.changeResource(s,1)>=0&&(this.baskets[s]--,o=!0),s=a.WATER.rid,this.baskets[s]>0&&t.changeResource(s,1)>=0&&(this.baskets[s]--,o=!0),o||(this.jobStepIndex=0),this.msSinceWork-=i}},l.prototype.goHome=function(e,t,n){if(this.tripStart!==this.pos){this.jobStepIndex=-1;var a=this.getAbility("SPD_FLY").value;this.tripStart=this.pos,this.tripElaspedTime=0,this.tripEnd=t.pos,this.tripTotalTime=n.GetHexDistance(n.GetHexById(this.tripEnd),n.GetHexById(this.tripStart))*a,this.isMoving=!0}if(this.tripElaspedTime+=e,this.tripElaspedTime>=this.tripTotalTime){this.isMoving=!1;var s=i[this.jid];this.jobStepIndex=0,this.msSinceWork=0,this.tripStart=null,this.pos=this.tripEnd,o.logWorkMessage(this.name+" returned home.");var r=this.jobStepIndex;s.jid===i.FORAGER.jid&&(s.steps.filter(function(e,t){e.hasOwnProperty("deposit")&&(r=t)}),this.jobStepIndex=r)}},l.prototype.doWork=function(e,t,n){var a=i[this.jid];if(this.jobStepIndex===-1)return void this.goHome(e,t,n);var o=a.steps[this.jobStepIndex];switch(this.jid){case i.BREEDER.jid:o.hasOwnProperty("spawn")&&this.doSpawn(e,t,o);break;case i.NURSE.jid:case i.PRODUCER_FOOD.jid:case i.PRODUCER_HONEY.jid:case i.BUILDER.jid:case i.UNDERTAKER.jid:o.hasOwnProperty("produce")&&this.doProduce(e,t,o);break;case i.FORAGER.jid:o.hasOwnProperty("travel")?this.doTravel(e,t,o,n):o.hasOwnProperty("collect")?this.doCollect(e,t,o,n):o.hasOwnProperty("deposit")&&this.doDeposit(e,t,o);break;default:this.msSinceWork=0}};var c={};for(var d in a)c[d]={rid:d,amount:0};var p={QUEEN:"queen",DRONE:"drone",WORKER:"worker",EGG:"egg",LARVA:"larva"},u=function(e){this.config=e,this.beetype=p.QUEEN,this.minDrones=10,l.call(this,e)};u.prototype=Object.create(l.prototype),u.prototype.update=function(e){e=e||{},l.prototype.update.apply(this,[e]),this.droneGenomeStates=e.droneGenomeStates||this.droneGenomeStates||[],this.droneIds=e.droneIds||this.droneIds||[]},u.prototype.getState=function(){var e=l.prototype.getState.apply(this);return e.droneGenomeStates=this.droneGenomeStates,e.droneIds=this.droneIds,e},u.prototype.mate=function(e){return e.beetype!==p.DRONE?void console.log("Queen cannot mate with: "+e.beetype):(this.droneGenomeStates.push(e.genome.getState()),this.droneIds.push(e.id),void e.die())},u.prototype.canLayEggs=function(e){var t=this.droneGenomeStates.length>=this.minDrones;return t&=e.getNurseryCount()<e.getNurseryLimit()},u.prototype.layEgg=function(e){var t=this.genome.getEggGenome(),n=new m({id:e,dt:(new Date).getTime(),generation:this.generation+1,genomeState:t.getState(),queenParentId:this.id,beeMutationChance:this.beeMutationChance,pos:this.pos});return n.update(),n},u.prototype.fertilizeEgg=function(e,t){var n=randomIntFromInterval(0,this.droneGenomeStates.length-1),i=this.droneGenomeStates[n],a=e.genome.fertilize(i),o=new v({id:t,dt:(new Date).getTime(),generation:this.generation+1,genomeState:a.getState(),queenParentId:this.id,droneParentId:this.droneIds[n],beeMutationChance:this.beeMutationChance,pos:this.pos});return o};var h=function(e){this.beetype=p.WORKER,l.call(this,e)};h.prototype=Object.create(l.prototype),h.prototype.update=function(e){e=e||{},l.prototype.update.apply(this,[e])},h.prototype.getState=function(){var e=l.prototype.getState.apply(this);return e};var g=function(e){this.beetype=p.DRONE,l.call(this,e)};g.prototype=Object.create(l.prototype),g.prototype.update=function(e){e=e||{},l.prototype.update.apply(this,[e])},g.prototype.getState=function(){var e=l.prototype.getState.apply(this);return e};var m=function(e){this.beetype=p.EGG,l.call(this,e)};m.prototype=Object.create(l.prototype),m.prototype.update=function(e){e=e||{},l.prototype.update.apply(this,[e])},m.prototype.getState=function(){var e=l.prototype.getState.apply(this);return e},m.prototype.hatch=function(e){if(e===p.DRONE)return new g({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:i.IDLE.jid,beeMutationChance:this.beeMutationChance,pos:this.pos})};var v=function(e){this.beetype=p.LARVA,l.call(this,e)};return v.prototype=Object.create(l.prototype),v.prototype.update=function(e){e=e||{},l.prototype.update.apply(this,[e])},v.prototype.getState=function(){var e=l.prototype.getState.apply(this);return e},v.prototype.mature=function(e){return e===p.WORKER?new h({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:i.IDLE.jid,beeMutationChance:this.beeMutationChance,pos:this.pos}):e===p.QUEEN?new u({id:this.id,genomeState:this.genome.getState(),generation:this.generation,jid:i.IDLE.jid,beeMutationChance:this.beeMutationChance,pos:this.pos}):void 0},{Queen:u,Drone:g,Worker:h,Egg:m,Larva:v,Types:p}}]);var game=angular.module("bloqhead.genetixApp");game.factory("Genome",["Chromosome",function(e){var t=function(e){e=e||{},this.update(e)};return t.prototype.update=function(e){this.chromosomeCount=e.chromosomeCount||this.chromosomeCount||10,this.geneCount=e.GeneCount||this.geneCount||10,this.mutationChance=e.mutationChance||this.mutationChance||0,this.hasChromosomePairs=angular.isDefined(e.hasChromosomePairs)?e.hasChromosomePairs:!angular.isDefined(this.hasChromosomePairs)||this.hasChromosomePairs,this.chromosomes=angular.isDefined(e.chromosomes)?this.loadChromosomes(e.chromosomes):this.chromosomes||this.generateNewChromosomes()},t.prototype.getState=function(){return{chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,hasChromosomePairs:this.hasChromosomePairs,mutationChance:this.mutationChance,chromosomes:angular.copy(this.chromosomes)}},t.prototype.generateNewChromosomes=function(){var t=[];t.push([]),this.hasChromosomePairs&&t.push([]),chromoState={geneCount:this.geneCount,mutationChance:this.mutationChance};for(var n=0;n<this.chromosomeCount;n++)t[0].push(new e(chromoState)),this.hasChromosomePairs&&t[1].push(new e(chromoState));return t},t.prototype.loadChromosomes=function(t){var n=[];n.push([]),this.hasChromosomePairs&&n.push([]);for(var i=0;i<this.chromosomeCount;i++){var a={geneCount:t[0][i].geneCount,mutationChance:t[0][i].mutationChance,genes:t[0][i].genes,mutationString:t[0][i].mutationString};n[0].push(new e(a)),this.hasChromosomePairs&&(a={geneCount:t[1][i].geneCount,mutationChance:t[1][i].mutationChance,genes:t[1][i].genes,mutationString:t[1][i].mutationString},n[1].push(new e(a)))}return n},t.prototype.getGene=function(e,t){var n=0;return n=this.hasChromosomePairs?this.chromosomes[0][e].getGene(t)|this.chromosomes[1][e].getGene(t):this.chromosomes[0][e].getGene(t)},t.prototype.fertilize=function(e){var n=new t(e);if(this.hasChromosomePairs===n.hasChromosomePairs)return void console.error("Cannot mate these genomes.",this,n);var i=[];i.push(angular.copy(this.chromosomes[0])),i.push(angular.copy(n.chromosomes[0]));for(var a=0;a<this.chromosomeCount;a++)i[0][a].doMutation(),i[1][a].doMutation();var o=new t({chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,hasChromosomePairs:!0,chromosomes:i});return console.log(o),o},t.prototype.getEggGenome=function(){var n=[];n.push([]);for(var i=0;i<this.chromosomeCount;i++){var a=randomIntFromInterval(0,1),o=this.chromosomes[a][i];n[0].push(new e({geneCount:o.geneCount,mutationChance:o.mutationChance,genes:o.genes}))}var s=new t({hasChromosomePairs:!1,chromosomeCount:this.chromosomeCount,geneCount:this.geneCount,chromosomes:n,mutationChance:this.mutationChance});return s},t}]),game.factory("Chromosome",[function(){geneMask=[1,2,4,8,16,32,64,128,256,512,1024];var e=function(e){e=e||{},this.update(e)};return e.prototype.update=function(e){if(this.geneCount=e.geneCount||this.geneCount||10,this.genes=angular.isDefined(e.genes)?e.genes:angular.isDefined(this.genes)?this.genes:randomIntFromInterval(0,Math.pow(2,this.geneCount)-1),this.mutationChance=e.mutationChance||this.mutationChance||.01,this.mutationString=e.mutationString||this.mutationString||"",geneMask=geneMask||[],geneMask.length<this.geneCount){geneMask=[];for(var t=0;t<this.geneCount;t++)geneMask.push(Math.pow(2,t))}},e.prototype.toBitString=function(){return this.genes.toString(2)},e.prototype.getGene=function(e){return this.genes&geneMask[e]},e.prototype.doMutation=function(){this.mutationString="";for(var e=0;e<this.geneCount;e++)Math.random()<this.mutationChance?this.mutationString+="1":this.mutationString+="0";this.gene^=parseInt(this.mutationString,2)},e}]);var game=angular.module("bloqhead.genetixApp");game.factory("Hive",["$rootScope","$filter","$q","Bee","logService","jobTypes","resourceTypes","buildingTypes",function(e,t,n,i,a,o,s,r){var l=function(e){this.update(e)};return l.prototype.update=function(e){e=e||{},this.id=e.id||this.id,this.pos=e.pos||this.pos||"A1",this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.newbornLimit=e.newbornLimit||this.newbornLimit||0,this.beeMutationChance=e.beeMutationChance||this.beeMutationChance||.005,this.nextId=e.nextId||this.nextId||0,this.updateResources(e),this.updateBees(e),this.updateBuildings(e)},l.prototype.getState=function(){for(var e=this,t={id:this.id,currentGeneration:this.currentGeneration,beeMutationChance:this.beeMutationChance,nextId:this.nextId,queenStates:[],droneStates:[],workerStates:[],eggStates:[],larvaStates:[],resources:this.resources,buildings:this.buildings,pos:this.pos},n=e.getBeesByType(i.Types.QUEEN),a=e.getBeesByType(i.Types.DRONE),o=e.getBeesByType(i.Types.WORKER),s=e.getBeesByType(i.Types.EGG),r=e.getBeesByType(i.Types.LARVA),l=0;l<n.length;l++)t.queenStates.push(n[l].getState());for(var c=0;c<a.length;c++)t.droneStates.push(a[c].getState());for(var d=0;d<o.length;d++)t.workerStates.push(o[d].getState());for(var p=0;p<s.length;p++)t.eggStates.push(s[p].getState());for(var u=0;u<r.length;u++)t.larvaStates.push(r[u].getState());return t},l.prototype.getBeesByType=function(e){return t("filter")(this.bees,{beetype:e},!0)},l.prototype.getBeeById=function(e){return t("filter")(this.bees,{id:e},!0)[0]},l.prototype.getNurseryCount=function(){return this.getBeesByType(i.Types.EGG).length+this.getBeesByType(i.Types.LARVA).length},l.prototype.getNurseryLimit=function(){return this.nurseryLimit},l.prototype.getPopulationCount=function(){return this.bees.length-this.getNurseryCount()},l.prototype.getPopulationLimit=function(){return this.populationLimit},l.prototype.getHeadQueen=function(){return t("filter")(this.getBeesByType(i.Types.QUEEN),{jid:"BREEDER"})[0]},l.prototype.processEggFate=function(e,n){var o,s=this.bees.filter(function(t,n){if(t.id===e&&t.beetype===i.Types.EGG)return o=n,!0})[0],r="";switch(n){case"DRONE":var l=s.hatch(i.Types.DRONE);this.bees[o]=l,r=t("fmt")("New drone in Hive#%(id)d! (%(newname)s)",{id:this.id,newname:l.name});break;case"LARVA":var c=this.getHeadQueen();if(c){var d=c.fertilizeEgg(s,s.id);this.bees[o]=d,r=t("fmt")("New larva in Hive#%(id)d! (%(newname)s)",{id:this.id,newname:d.name})}else r=t("fmt")("Cannot fertilize egg. There is no queen assigned to breeding duties.");break;case"CONSUME_EGG":r=t("fmt")("%(name)s has been turned into food for Hive#%(id)d",{name:s.name,id:this.id}),this.bees.splice(o,1);break;default:r=t("fmt")("Invalid %(fate)s",{fate:n}),console.error("Invalid fate: "+n)}a.logBreedMessage(r)},l.prototype.processLarvaFate=function(e,n){var o,s=this.bees.filter(function(t,n){if(t.id===e)return o=n,!0})[0],r="";switch(n){case"WORKER":var l=s.mature(i.Types.WORKER);this.bees[o]=l,r=t("fmt")("New worker in Hive#%(id)d! (%(name)s)",{name:s.name,id:this.id});break;case"QUEEN":var c=s.mature(i.Types.QUEEN);this.bees[o]=c,r=t("fmt")("New queen in Hive#%(id)d! (%(name)s)",{name:s.name,id:this.id});break;case"CONSUME_LARVA":r=t("fmt")("%(name)s will be turned into food for Hive#%(id)d",{name:s.name,id:this.id}),s.die();break;default:r=r=t("fmt")("Invalid %(fate)s",{fate:n}),console.error("Invalid fate: "+n)}a.logBreedMessage(r)},l.prototype.setUnitJob=function(e,n){var i=this.getBeeById(e,"WORKER");if(i&&i.setJob(n)){var s=o[n].name,r=s.charAt(0).toLowerCase(),l="a"===r||"e"===r||"i"===r||"o"===r||"u"===r?"an":"a",c=t("fmt")("%(name)s is now %(article)s %(job)s",{name:i.name,article:l,job:s});a.logWorkMessage(c)}},l.prototype.processFate=function(e,t){"DRONE"===t||"LARVA"===t||"CONSUME_EGG"===t?this.processEggFate(e,t):this.processLarvaFate(e,t)},l.prototype.build=function(e,t){var n=this,i=!0,a=[];if(t)e.gifted++;else for(var o=0;o<e.nextCost.length&&(i=n.changeResource(e.nextCost[o].rid,-1*e.nextCost[o].amount)>=0,i);o++)a.push(e.nextCost[o]);if(i)t||e.purchased++;else for(var s=0;s<a.length;s++)n.changeResource(a[s].rid,a[s].amount);return n.updateBuildings(),i},l.prototype.changeResource=function(e,t){var n=this,i=n.resources[e];if(i[2]===!1&&i[1]!==-1)return void console.error(e+" is not enabled, cannot increase amount.");i[0]+=t;var a=t;return i[1]!=-1&&i[0]>i[1]&&(a=t-(i[0]-i[1]),i[0]=i[1]),i[0]<0?(i[0]-=t,-1):0===a?-2:(n.updateBuildings(),i[0])},l.prototype.handleGameLoop=function(e,t,n){var i=this;if(0!==t){if("gameLoopEvent"!==e.name)return void console.error("Hive.handleGameLoop - Invalid event: "+e);for(var a=0;a<i.bees.length;a++)i.bees[a].doWork(t,this,n)}},l.prototype.getNextId=function(){return t("fmt")("%d-H%d",++this.nextId,this.id)},l.prototype.updateBees=function(e){var t=this;if(e=e||{},t.bees=t.bees||[],e.queenStates)for(var n=0;n<e.queenStates.length;n++)t.bees.push(new i.Queen(e.queenStates[n]));if(0===t.getBeesByType(i.Types.QUEEN).length&&t.createInitialQueen(!0),e.droneStates)for(var a=0;a<e.droneStates.length;a++)t.bees.push(new i.Drone(e.droneStates[a]));if(e.workerStates)for(var o=0;o<e.workerStates.length;o++)t.bees.push(new i.Worker(e.workerStates[o]));if(e.eggStates)for(var s=0;s<e.eggStates.length;s++)t.bees.push(new i.Egg(e.eggStates[s]));if(e.larvaStates){t.larva=[];for(var r=0;r<e.larvaStates.length;r++)t.bees.push(new i.Larva(e.larvaStates[r]))}},l.prototype.createInitialQueen=function(e){var t=this,n=new i.Queen({id:t.getNextId(),generation:0,dominant:!0,beeMutationChance:this.beeMutationChance,jid:"BREEDER",pos:this.pos});if(e)for(var a=0;a<10;a++){var o=new i.Drone({id:t.getNextId(),generation:0,beeMutationChance:this.beeMutationChance,pos:this.pos});n.mate(o)}n.update(),t.bees.push(n)},l.prototype.updateResources=function(e){var t=this;e=e||{},t.resources=e.resources||t.resources||{};var n=!1,i={NECTAR:[0,0,!0],POLLEN:[0,0,!0],WATER:[0,0,!0],FOOD:[0,0,!0],HONEY:[0,0,!0],ROYAL_JELLY:[0,0,!0],WAX:[0,0,!0],DEADBEES:[0,-1,!0],DEFENSE:[0,-1,!0]};for(var a in s)if(s.hasOwnProperty(a)){var o=t.resources[a];"undefined"==typeof o&&(o=i[a]||[0,911,n,1],t.resources[a]=o)}},l.prototype.updateBuildings=function(e){var n=this;e=e||{},n.buildings=e.buildings||n.buildings||{};for(var i in r)if(r.hasOwnProperty(i)){var a=n.buildings[i];"undefined"==typeof a&&(a=angular.copy(r[i]),n.buildings[i]=a),a.rid&&(a.name=t("fmt")(a.name,{resource:s[a.rid].name}),a.description=t("fmt")(a.description,{resource:s[a.rid].name})),n.setCanBuild(a),n.updateSize(a)}},l.prototype.setNextCost=function(e){e.nextCost=[];for(var t=0;t<e.cost.length;t++){var n=e.cost[t],i=Math.ceil(n.base*Math.pow(1+n.percent/100,e.purchased));e.nextCost.push({rid:n.rid,resourceName:s[n.rid].name,amount:i})}},l.prototype.setCanBuild=function(e){var t=this;t.setNextCost(e);for(var n=e.nextCost,i=0;i<n.length;i++){var a=t.resources[n[i].rid];if(!angular.isDefined(a)||a[0]<n[i].amount)return e.canBuild=!1,!1}return e.canBuild=!0,!0},l.prototype.getSize=function(e){return Math.floor(e.size.base*Math.pow(1+e.size.percent/100,e.gifted+e.purchased-1))},l.prototype.updateSize=function(e){var t=this;"storage"===e.use?t.resources[e.rid][1]=t.getSize(e):"housing"===e.use?t.populationLimit=t.getSize(e):"nursery"===e.use&&(t.nurseryLimit=t.getSize(e))},l}]);var game=angular.module("bloqhead.genetixApp");game.factory("MapResource",["$filter","logService",function(e,t){var n=function(e){this.update(e)};return n.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.level=e.level||this.level||1,this.pos=e.pos||this.pos||"A1",this.dt=e.dt||this.dt||(new Date).getTime(),this.color=e.color||this.color||"green",this.image=e.image||this.image||"bee.svg",this.cooldown=e.cooldown||this.cooldown||5e3,this.cooldownRemaining=e.cooldownRemaining||this.cooldownRemaining||0,this.pollen=e.pollen||this.pollen||0,this.col_pollen=e.col_pollen||this.col_pollen||0,this.nectar=e.nectar||this.nectar||0,this.col_nectar=e.col_nectar||this.col_nectar||0,this.water=e.water||this.water||0,this.col_water=e.col_water||this.col_water||0,this.harvestMultiplier=e.harvestMultiplier||this.harvestMultiplier||1,this.beeIsHarvesting=e.beeIsHarvesting||this.beeIsHarvesting||!1,this.resourceName=e.resourceName||this.resourceName||"??",this.bees=this.bees||[],this.name=this.resourceName+" #"+this.id},n.prototype.getState=function(){for(var e={id:this.id,level:this.level,pos:this.pos,dt:this.dt,color:this.color,image:this.image,cooldown:this.cooldown,cooldownRemaining:this.cooldownRemaining,pollen:this.pollen,nectar:this.nectar,water:this.water,harvestMultiplier:this.harvestMultiplier,beeIsHarvesting:this.beeIsHarvesting,resourceName:this.resourceName,beeids:[]},t=0;t<this.bees;t++)e.beeids.push(this.bees[t].id);return e},n.prototype.QueueHarvest=function(e){t.logWorkMessage(e.name+" reached "+this.name),e.waitingAtResource=!0,this.bees.push(e)},n.prototype.ProcessElapsedTime=function(e){if(this.cooldownRemaining>0&&(this.cooldownRemaining-=e),this.cooldownRemaining<=0&&this.bees.length>0&&this.beeIsHarvesting===!1){this.beeIsHarvesting=!0;var t=this.bees.shift();t.waitingAtResource=!1,t.harvesting=!0}},n.prototype.DoneHarvesting=function(){this.cooldownRemaining=this.cooldown,this.beeIsHarvesting=!1,this.col_nectar=0,this.col_pollen=0,this.col_water=0},n.prototype.GetAvailable=function(e){var t=0;switch(e){case"NECTAR":t=this.nectar-this.col_nectar;break;case"POLLEN":t=this.pollen-this.col_pollen;break;case"WATER":t=this.water-this.col_water}return t},n.prototype.Collect=function(e,t){var n=0,i=0;switch(e){case"NECTAR":i=this.GetAvailable(e),t<=i?n=t:i>0&&(n=i),this.col_nectar+=n;break;case"POLLEN":i=this.GetAvailable(e),t<=i?n=t:i>0&&(n=i),this.col_pollen+=n;break;case"WATER":i=this.GetAvailable(e),t<=i?n=t:i>0&&(n=i),this.col_water+=n}return n},n}]);var game=angular.module("bloqhead.genetixApp");game.factory("TraitInspector",["$filter","traitDefinitions","beeAbilities",function(e,t,n){var i=function(e){this.update(e)};i.prototype.update=function(e){"undefined"==typeof e&&(e={})},i.prototype.getTraits=function(e){for(var n=[],i=c(t),a=0;a<i.length;a++){for(var o=i[a],s=!0,r=0;r<o.genes.length&&s===!0;r++){var l=o.genes[r],d=e.getGene(l.chromosome,l.gene);d!==l.value&&(s=!1)}s&&n.push(o)}return n},i.prototype.getAbilities=function(e){for(var t=angular.copy(n),i=0;i<e.length;i++)for(var a=e[i],o=0;o<a.mods.length;o++){var s=a.mods[o];for(var r in s)s.hasOwnProperty(r)&&(t[r].add=t[r].add||0,t[r].percent=t[r].percent||0,t[r].add+=angular.isDefined(s[r].add)?s[r].add:0,t[r].percent+=angular.isDefined(s[r].percent)?s[r].percent/100:0)}for(var l in t)if(t.hasOwnProperty(l)){var c=t[l];c.add=c.add||0,c.percent=c.percent||0,c.value=c.baseValue,c.value+=c.add,c.value*=1+c.percent}return t};var a=[],o=[],s=!1,r=function(e){return o.filter(function(t){return e===t.name})[0]},l=function(e){if(angular.isDefined(e.requiredTraits))for(var t=0;t<e.requiredTraits.length;t++){var n=e.requiredTraits[t],i=r(n);a.indexOf(i.name)===-1&&l(i);for(var o=0;o<i.genes.length;o++)e.genes.push(angular.copy(i.genes[o]))}a.push(e.name)},c=function(e){if(s)return o;o=e;for(var t=0;t<o.length;t++){var n=o[t];l(n)}return s=!0,o};return i}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div><button title="Save Game" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.saveGame();"><i class="fa fa-floppy-o"></i></button><button title="Hard Reset" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.resetSave();"><i class="fa fa-recycle"></i></button><button title="Play/Pause" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',
controller:["$scope","gameService","gameLoopService","gameStates",function(e,t,n,i){var a=this;a.$onInit=function(){a.currentState=n.getState().currentState},a.toggleState=function(){a.currentState=a.currentState===i.RUNNING?i.PAUSED:i.RUNNING,n.setState(a.currentState)},a.getIcon=function(){return a.currentState===i.RUNNING?"fa-pause":"fa-play"},a.resetSave=function(){t.hardReset()},a.saveGame=function(){t.saveGame()}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadGoalList",{templateUrl:"components/goalList/goalList.html",controller:"bloqhead.controllers.goalList",bindings:{}}),game.controller("bloqhead.controllers.goalList",["$rootScope","resourceTypes","achievementService",function(e,t,n){var i=this;i.resourceTypes=t,i.achievementService=n,i.$onInit=function(){}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log",bindings:{pauseScroll:"<"}}),game.controller("bloqhead.controllers.log",["$scope","$location","$anchorScroll","$timeout","logService","logTypes",function(e,t,n,i,a,o){var s=this;s.$onInit=function(){s.messages=[],a.SubscribeNewMessageEvent(e,s.receiveMessages)},s.getLogClass=function(e){var t="list-group-item-",n="";switch(e){case o.GENERAL:n="color-general";break;case o.ACHIEVEMENT:n="color-achievement";break;case o.BREED:n="color-breed";break;case o.WORK:n="color-work";break;default:n=t+"none"}return n},s.receiveMessages=function(e,t){s.messages=t,s.pauseScroll||(s.scrolling=!0,i(function(){n("scrollBottom"),s.scrolling=!1},0,!1))}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this,i=500;n.init=function(e){e&&(n.messages=[],n.logGeneralMessage("Welcome to Genetix!"))},n.logGeneralMessage=function(a){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:a}),n.messages.length>i&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(a){n.messages.push({type:t.BREED,timestamp:Date.now(),message:a}),n.messages.length>i&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(a){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:a}),n.messages.length>i&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logWorkMessage=function(a){n.messages.push({type:t.WORK,timestamp:Date.now(),message:a}),n.messages.length>i&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,i){var a=e.$on("newMessageEvent",i.bind(this));t.$on("$destroy",a),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.home",{templateUrl:"components/home.html",controller:"bloqhead.controllers.home"}),game.controller("bloqhead.controllers.home",function(){this.$onInit=function(){}}),game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","$filter","achievementService","mapService",function(e,t,n,i){var a=this;a.$onInit=function(){a.maxPopulation=0,i.SubscribeHiveChangeEvent(e,a.updateHive),n.SubscribeNewRewardEvent(e,a.rewardEarned)},a.rewardEarned=function(e,t){console.log(t)},a.assign=function(e,t){a.hive.setUnitJob(e,t)},a.decideFate=function(e,t){a.hive.processFate(e,t)},a.updateHive=function(e,t){a.hive=t.currentHive}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadMap",{templateUrl:"components/map/map.html",controller:"bloqhead.controllers.map",bindings:{}}),game.controller("bloqhead.controllers.map",["$scope","$rootScope","$timeout","$filter","$q","mapService",function(e,t,n,i,a,o){function s(e,t){p.mapconfig=t,p.mapconfig.canvasSize&&l(),p.mapconfig.canvasLocation?p.moveCanvas(p.mapconfig.canvasLocation.X,p.mapconfig.canvasLocation.Y):p.moveCanvas(0,0)}function r(){"undefined"!=typeof c&&"undefined"!=typeof d&&(p.needsResize&&(p.needsResize=!1,l()),o.drawMap(d))}function l(){var e=parseFloat(c.style.width),t=parseFloat(c.style.height);c.style.width=p.mapconfig.canvasSize.X+"px",c.style.height=p.mapconfig.canvasSize.Y+"px",c.width=c.offsetWidth,c.height=c.offsetHeight,e=e||p.mapconfig.canvasSize.X,t=t||p.mapconfig.canvasSize.Y;var n=parseInt((0-(p.mapconfig.canvasSize.X-e))/2),i=parseInt((0-(p.mapconfig.canvasSize.Y-t))/2);p.dontTranslate||0===n&&0===i||p.moveCanvasBy(n,i),p.dontTranslate=!1}var c,d,p=this,u=20,h=160,g=["bee.svg","bee-2.svg","egg.svg","honeypot.svg","larva.svg","nectar.svg","nectar2.svg","pollen.svg","tombstone.svg"];p.loadPercent=0,p.mapService=o,p.needsResize=!0,p.$onInit=function(){},p.$postLink=function(){p.loadImages(g).then(function(e){p.images=e,p.setupCanvas()},function(e){console.error(e)},function(e){p.loadPercent=e})},p.onDragStart=function(e){var t=angular.element(document.getElementById(e)).data("beeid");o.setRangeGraph(t)},p.onDragStop=function(){o.setRangeGraph(null)},p.dropped=function(e,t,n){var i=angular.element(document.getElementById(e)).data("beeid"),a=o.map.GetHexAt({X:n.x,Y:n.y});a&&a.inRange&&"undefined"!=typeof a.mapResource&&o.getBeeById(i).addNode(a)},p.setupCanvas=function(){c=document.getElementById("map"),d=c.getContext("2d"),c.parentElement.addEventListener("mousewheel",p.mousewheel,!1),c.parentElement.addEventListener("mousedown",p.mousedown,!1),document.addEventListener("mouseup",p.mouseup,!1),c.addEventListener("click",p.click,!1),o.SubscribeMapInitializedEvent(e,s),o.SubscribeMapUpdateEvent(e,r),p.setHexSize(p.mapconfig.HEIGHT)},p.loadImages=function(e){var t=a.defer(),n=[],i=0;return angular.forEach(e,function(o){var s=a.defer();!function(){var n=$(new Image(100,100)).on("load",function(){i++,t.notify(Math.ceil(i/e.length*100)),s.resolve({name:o,image:n})}).prop("src","images/map/"+o)}(),n.push(s.promise)}),a.all(n).then(function(e){for(var n={},i=0;i<e.length;i++)n[e[i].name]=e[i].image;t.resolve(n)},function(e){t.reject(e)}),t.promise},p.mousewheel=function(e){return e.wheelDeltaY>0&&p.zoomIn(),e.wheelDeltaY<0&&p.zoomOut(),!1},p.mousedown=function(e){document.addEventListener("mousemove",p.mousemove,!1)},p.mouseup=function(e){document.removeEventListener("mousemove",p.mousemove),n(function(){p.stopClick=!1})},p.click=function(e){return p.stopClick||o.mapClicked(e.offsetX,e.offsetY),!1},p.mousemove=function(e){p.moveCanvasBy(e.movementX,e.movementY),0===e.movementX&&0===e.movementY||(p.stopClick=!0)},p.zoomIn=function(){p.mapconfig.HEIGHT<h&&p.setHexSize(1.1*p.mapconfig.HEIGHT)},p.zoomOut=function(){p.mapconfig.HEIGHT>u&&p.setHexSize(p.mapconfig.HEIGHT/1.1)},p.resetZoom=function(){p.setHexSize(50),p.moveCanvas(0,0),p.dontTranslate=!0},p.moveCanvas=function(e,t){c.style.left=e+"px",c.style.top=t+"px",p.mapService.mapMoved(e,t)},p.moveCanvasBy=function(e,t){var n=parseFloat(c.style.left)+e,i=parseFloat(c.style.top)+t;p.moveCanvas(n,i)},p.setHexSize=function(e){p.mapconfig=o.setHexSizeByHeight(e),p.needsResize=!0}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:{boxTitleHtml:"?bloqheadPlayerBoxTitle"},require:{mainCtrl:"^bloqhead.components.home"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{boxTitle:"@",footer:"@",maxHeight:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit},e.maxHeightOveride=function(){var t={};return"undefined"!=typeof e.maxHeight&&(t.maxHeight=e.maxHeight),t}}),game.component("bloqheadPlayerBoxTitle",{require:{playerBoxCtrl:"^bloqheadPlayerBox"}});var game=angular.module("bloqhead.genetixApp");game.filter("applyPopulationFilter",["Bee",function(e){return function(t,n){if(null===t||"undefined"==typeof t)return[];"string"==typeof n&&(n=JSON.parse(n));var i=[],a=[],o=[];n&&n.type?o=t.getBeesByType(n.type):(o=o.concat(t.getBeesByType(e.Types.QUEEN)),o=o.concat(t.getBeesByType(e.Types.DRONE)),o=o.concat(t.getBeesByType(e.Types.WORKER)));for(var s=0;s<o.length;s++){var r=!0;if(n&&n.traits)for(var l=0;l<n.traits.length;l++){var c=n.traits[l],d=!0;if("-"==c[0]&&(c=c.slice(1),d=!1),d!==o[s].hasTrait(c)){r=!1;break}}r&&i.push(o[s]),r||a.push(o[s])}return i}}]),game.service("bloqheadGetGeneProgressStyle",[function(){function e(e,t,n,i,a){return(e-t)*(a-i)/(n-t)+i}return function(t){var n=t||{};return{range:function(t,n){var i={},a=e(-1*t,-255,255,0,100),o=e(n,-255,255,0,100);return i.marginLeft=a+"%",i.width=o-a+"%",i},traitRange:function(t,i){var a={};if(null!==i)for(var o=n.indexOf(t),s=0;s<i.genes.length;s++){var r=i.genes[s];if(r[0]==o){var l=e(r[1],-255,255,0,100),c=e(r[2],-255,255,0,100);a.marginLeft=l+"%",a.width=c-l+"%"}}return a},value:function(t){var n=e(t,-255,255,0,100);n>98&&(n=98),n<2&&(n=2);var i={position:"absolute",marginLeft:n-2+"%",top:"0px",bottom:"0px",width:"4%",backgroundColor:"white",border:"1px solid black"};return i}}}}]),game.component("bloqheadPopulationList",{templateUrl:"components/populationList/populationList.html",controller:"bloqhead.controllers.populationList",bindings:{hive:"<"}}),game.controller("bloqhead.controllers.populationList",["$uibModal","resourceTypes","jobTypes",function(e,t,n){var i=this;i.jobTypes=n,i.criteria=[],i.$onInit=function(){},i.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})},i.getCustomFilter=function(){for(var e=[],t=0;t<i.criteria.length;t++){var n=i.criteria[t];"trait"==n.type&&e.push(n.val.name)}return JSON.stringify({traits:e})},i.deleteCriteria=function(e){i.criteria.splice(e,1)},i.openTraitSelector=function(t){var n=e.open({animation:!0,component:"bloqheadTraitSelector",size:"lg",resolve:{unit:function(){return t}}});n.result.then(function(e){i.criteria.push({type:"trait",val:e})},function(){})},i.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})}}]),game.component("bloqheadPopulationPanel",{require:{parent:"^bloqheadPopulationList"},templateUrl:"components/populationList/populationPanel.html",controller:"bloqhead.controllers.populationPanel",bindings:{population:"<",filter:"<",orderBy:"<"}}),game.controller("bloqhead.controllers.populationPanel",["$timeout","bloqheadGetGeneProgressStyle","resourceTypes",function(e,t,n){var i=this;i.resourceTypes=n,i.$onInit=function(){i.orderBy=i.orderBy||"-dt"},i.getGeneTraitRangeStyle=function(e,n){return t().traitRange(e,n)},i.getGeneRangeStyle=function(e){return t().range(e[0],e[1])},i.getGeneValueStyle=function(e){return t().value(e[1]-e[0])},i.getWorkerIcon=function(e,t){var i=[];return i.push(n[t].icon),e&&i.push("onstrike"),i},i.imageHover=function(e){var t=[];for(var n in i.attributes)t.push(n);var a=e.target.clientWidth,o=e.offsetX,s=a/5,r=Math.floor(o/s);r=Math.min(t.length-1,r),i.hoverAttr=t[r]}}]),game.component("bloqheadTraitSelector",{templateUrl:"components/populationList/traitSelector.html",controller:"bloqhead.controllers.traitSelector",bindings:{resolve:"<",close:"&",dismiss:"&"}}),game.controller("bloqhead.controllers.traitSelector",["traitDefinitions","bloqheadGetGeneProgressStyle",function(e,t){var n=this;n.trait=null,n.showLocked=!1;var i="?";n.getGeneDominant=function(e){return e.locked?i:e.dom},n.getGeneRecessive=function(e){return e.locked?i:e.rec},n.traitEnter=function(e){n.trait=e},n.traitLeave=function(e){n.trait=null},n.$onInit=function(){n.unit=n.resolve.unit,n.traitDefinitions=angular.copy(e)},n.select=function(e){n.close({$value:e})},n.ok=function(){n.close({$value:n.trait})},n.cancel=function(){n.dismiss({$value:"cancel"})},n.getGeneRangeStyle=function(e){var i=t().traitRange(e,n.trait);return i}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadResourceList",{templateUrl:"components/resourceList/resourceList.html",controller:"bloqhead.controllers.resourceList",bindings:{assign:"&",hive:"="}}),game.controller("bloqhead.controllers.resourceList",["$scope","resourceTypes","jobTypes",function(e,t,n){var i=this;i.resourceTypes=t,i.jobTypes=n,i.getWorkerIcon=function(e){return i.resourceTypes[e].icon},i.$onInit=function(){i.workers=i.hive.getBeesByType("worker")},i.getUnlockedResources=function(){var e={};for(var t in i.hive.resources)i.hive.resources.hasOwnProperty(t)&&i.hive.resources[t][2]===!0&&(e[t]=i.hive.resources[t]);return e},i.getWorkerRate=function(e){var t=0;return t},i.getWorkerCount=function(e){var t=0;return t},i.dropped=function(e,n,a,o){var s=t[o].jids[0],r=angular.element(document.getElementById(e)).data("beeid");i.assign({$id:r,$jid:s})}}]);var game=angular.module("bloqhead.genetixApp");game.service("achievementService",["$rootScope","$filter","achievementSetup","logService","resourceTypes","buildingTypes",function(e,t,n,i,a,o){var s=this;s.init=function(e){s.state=e||{},s.achievementSetup=n||{},s.state.hasOwnProperty("progress")||(s.state={progress:{achievements:{},perks:[]}})},s.getState=function(){return s.state},s.getProgressSnapshot=function(){return angular.copy(s.state.progress)},s.updateProgress=function(t,n){var a=s.state.progress.achievements[t],o=s.achievementSetup.achievements[t];a||(a={aid:t,amount:0,lastRank:0,nextRank:s.getNextRankAmount(t,0)},s.state.progress.achievements[t]=a);var r=a.amount,l=r;if((o.cumulative||!1)===!0?n>r&&(l=n):n>0&&(l=a.amount+n),a.amount=l,r!=l)for(var c=0;c<o.ranks.length;c++){var d=o.ranks[c][0];if(d>a.lastRank&&d>r&&d<=l){var p=s.getAchievementMessage(o.aid,d);i.logAchievementMessage(p),a.lastRank=d,a.nextRank=s.getNextRankAmount(t,a.amount);for(var u={achievement:o,amountRequired:d,msg:p,perks:[]},h=0;h<o.ranks[c][1].length;h++){var g=s.applyPerk(o.ranks[c][1][h]);null!==g&&u.perks.push(g)}e.$emit("newRewardEvent",u)}}},s.applyPerk=function(e){var a=e[0],o=n.perks[a];if(o.once){var r=t("filter")(s.state.progress.perks,{pid:a});if(0!==r.length)return null}var l=s.getPerkMessage(e,o);i.logAchievementMessage(l);var c={pid:a,msg:l,arr:e,dt:(new Date).getTime()};return s.state.progress.perks.push(c),c},s.getNextRankAmount=function(e,t){var i=n.achievements[e].ranks,a=s.state.progress.achievements[e];if(!a&&i.length>0)return i[0][0];for(var o=0;o<i.length;o++)if(i[o][0]>a.amount)return i[o][0];return-1},s.getAchievementMessage=function(e,i,a){var o=n.achievements[e],s=o[a]||o.logmsg||o.desc||o.name||"Unknown",r={name:o.name,req:i};return r.name=t("fmt")(r.name,r),t("fmt")(s,r)},s.getPerkMessage=function(e,i){var s=e[0],r=n.perks[s],l=r[i]||r.logmsg||r.desc||r.name||"Unknown",c={name:r.name};switch(r.pid.substring(0,4)){case"P_R_":c.res=a[e[1]].name,c.amt=e[2]||0;break;case"P_B_":c.buildingType=o[e[1]].name,c.amt=e[2]||0,c.plural=c.amt>1?"s":"";break;default:for(var d=1;d<e.length;d++)c[d]=e[d]}return c.name=t("fmt")(c.name,c),t("fmt")(l,c)},s.SubscribeNewRewardEvent=function(t,n){var i=e.$on("newRewardEvent",n.bind(this));t.$on("$destroy",i)}}]);var game=angular.module("bloqhead.genetixApp");game.service("gameLoopService",["$window","$rootScope","gameStates","logService",function(e,t,n,i){var a=this;a.initialized=!1,a.init=function(e){e=e||{},a.saveTime=e.saveTime||Date.now(),a.stepTimeMs=e.stepTimeMs||a.stepTimeMs||50,a.lastTime=a.lastTime||a.saveTime-Date.now(),a.currentState=e.currentState||a.currentState||n.RUNNING,a.initialized||(a.initialized=!0,a.gameLoop(0))},a.getState=function(){return{stepTimeMs:a.stepTimeMs,currentState:a.currentState,saveTime:a.saveTime}},a.setState=function(e){a.currentState=e,e===n.PAUSED?i.logGeneralMessage("Game paused."):i.logGeneralMessage("Game resumed.")},a.gameLoop=function(i){var a=this;a.saveTime=Date.now();for(var o=0;i-a.lastTime>=a.stepTimeMs*(o+1);)o++;a.lastTime+=a.stepTimeMs*o,a.currentState===n.RUNNING&&o>0?t.$apply(t.$emit("gameLoopEvent",a.stepTimeMs*o)):a.currentState===n.PAUSED&&t.$apply(t.$emit("gameLoopEvent",0)),e.requestAnimationFrame(this.gameLoop.bind(this))},a.SubscribeGameLoopEvent=function(e,n){var i=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",i)}}]),game.service("gameService",["$rootScope","gameSaveKey","defaultState","logService","gameLoopService","achievementService","LZString","traitDefinitions","mapService",function(e,t,n,i,a,o,s,r,l){function c(e,t){d.msSinceSave+=t,d.msSinceSave>=d.autoSaveMs&&(d.saveGame(!0),d.msSinceSave=0)}var d=this,p=!1;d.init=function(i){var o=s.decompressFromBase64(localStorage.getItem(t)),r=o?angular.fromJson(o):void 0;d.gameState=i||r||n,d.autoSaveMs=d.gameState.autoSaveMs||d.autoSaveMs||3e4,d.startGame(),d.msSinceSave=0,p||(a.SubscribeGameLoopEvent(e,c),p=!0)},d.startGame=function(){try{i.init(d.gameState.clearLog)}catch(e){console.error(e)}try{o.init(angular.merge({},n.achievementServiceState,d.gameState.achievementServiceState))}catch(e){console.error(e)}try{l.init(angular.merge({},n.mapServiceState,d.gameState.mapServiceState))}catch(e){console.error(e)}try{a.init(angular.merge({},n.gameLoopServiceState,d.gameState.gameLoopServiceState))}catch(e){console.error(e)}},d.hardReset=function(){localStorage.removeItem(t),d.init()},d.saveGame=function(e){var n=angular.copy(d.gameState);n.achievementServiceState=angular.copy(o.getState()),n.gameLoopServiceState=angular.copy(a.getState()),n.mapServiceState=angular.copy(l.getState());var r=s.compressToBase64(angular.toJson(angular.copy(n)));localStorage.setItem(t,r),e?i.logGeneralMessage("Game autosaved."):i.logGeneralMessage("Game saved.")}}]);var game=angular.module("bloqhead.genetixApp");game.service("mapService",["$rootScope","$filter","gameLoopService","logService","Grid","Point","Hive","MapResource",function(e,t,n,i,a,o,s,r){function l(){var e=m.map.config.MAPWIDTH*(m.map.config.WIDTH+m.map.config.SIDE)-m.map.config.SIDE,t=m.map.config.MAPHEIGHT*m.map.config.HEIGHT;return e+=2*m.map.config.MARGIN,t+=2*m.map.config.MARGIN,new o(e,t)}function c(e){e.clearRect(0,0,e.canvas.width,e.canvas.height)}function d(e){for(var t in m.map.Hexes)m.map.Hexes[t].draw(e)}function p(e){for(var t=0;t<m.mapResources.length;t++){var n=m.mapResources[t],i=m.map.GetHexById(n.pos);e.fillStyle=n.color,e.beginPath(),e.arc(i.MidPoint.X,i.MidPoint.Y,.3*m.map.config.HEIGHT,0,2*Math.PI),e.closePath(),e.fill(),e.lineWidth=2,e.strokeStyle="black",e.stroke()}}function u(e){for(var t=0;t<m.hives.length;t++){var n=m.hives[t],i=m.map.GetHexById(n.pos),a="H"+n.id;e.fillStyle=n.id===m.map.config.currentHiveID?"yellow":"grey",e.beginPath(),e.arc(i.MidPoint.X,i.MidPoint.Y,.3*m.map.config.HEIGHT,0,2*Math.PI),e.closePath(),e.fill(),e.lineWidth=2,e.strokeStyle="black",e.stroke(),e.fillStyle="black",e.font="bolder 8pt Trebuchet MS,Tahoma,Verdana,Arial,sans-serif",e.textAlign="center",e.textBaseline="middle",e.fillText(a,i.MidPoint.X,i.MidPoint.Y),h(e,n)}}function h(e,t){for(var n=0;n<t.bees.length;n++){var i=t.bees[n];if(i.isMoving){var a=m.map.GetHexById(i.tripStart),o=m.map.GetHexById(i.tripEnd),s=i.tripElaspedTime/i.tripTotalTime;isNaN(s)&&(s=1);var r=a.MidPoint.X+(o.MidPoint.X-a.MidPoint.X)*s,l=a.MidPoint.Y+(o.MidPoint.Y-a.MidPoint.Y)*s;e.fillStyle="yellow",e.beginPath(),e.arc(r,l,.2*m.map.config.HEIGHT,0,2*Math.PI),e.closePath(),e.fill(),e.lineWidth=1,e.strokeStyle="black",e.stroke(),e.fillStyle="black",e.font="bolder 6pt Trebuchet MS,Tahoma,Verdana,Arial,sans-serif",e.textAlign="center",e.textBaseline="middle",e.fillText(i.id,r,l)}}}var g,m=this;m.init=function(t){if(g=t||g||{},m.hives=[],m.mapResources=[],angular.isDefined(g.mapconfig)){m.map=new a(g.mapconfig);for(var i=0;i<g.hiveStates.length;i++){for(var o=new s(g.hiveStates[i]),l=0;l<o.bees.length;l++)for(var c=o.bees[l],d=0;d<c.nodeIds.length;d++)c.nodes.push(m.map.GetHexById(c.nodeIds[d]));m.hives.push(o)}for(var p=0;p<g.mapResourcesStates.length;p++){var u=new r(g.mapResourcesStates[p]);m.mapResources.push(u),m.map.GetHexById(u.pos).mapResource=u;for(var h=0;g.mapResourcesStates[p].beeids.length;h++){var v=m.getBeeById(g.mapResourcesStates[p].beeids[h]);u.bees.push(v)}}}else m.generateInitialMap(),g.mapconfig=m.map.config;n.SubscribeGameLoopEvent(e,m.handleGameLoop),m.sendMapInitializedEvent(),m.sendHiveChangeEvent(),g.initialized=!0},m.getState=function(){g.mapconfig=m.map.config,g.hiveStates=[];for(var e=0;e<m.hives.length;e++)g.hiveStates.push(m.hives[e].getState());g.mapResourcesStates=[];for(var t=0;t<m.mapResources.length;t++)g.mapResourcesStates.push(m.mapResources[t].getState());return g},m.getHiveByPosition=function(e){return t("filter")(m.hives,{pos:e},!0)[0]},m.getCurrentHive=function(){return m.getHiveById(m.map.config.currentHiveID)},m.getHiveById=function(e){return t("filter")(m.hives,{id:e},!0)[0]},m.getBeeById=function(e){return m.getHiveById(parseInt(e.substring(e.indexOf("H")+1))).getBeeById(e)},m.mapClicked=function(e,t){var n=new o(e,t),i=m.map.GetHexAt(n),a=m.map.GetHexById(m.map.config.selectedHexID);if(null!==i&&"undefined"!=typeof i){null!==a&&"undefined"!=typeof a&&(i.id===a.id?console.log("TODO: show additional info via dialog or somethin"):a.selected=!1),i.selected=!0,m.map.config.selectedHexID=i.id;var s=m.getHiveByPosition(i.id);s&&s.id!=m.map.config.currentHiveID&&(m.map.config.currentHiveID=s.id,m.sendHiveChangeEvent())}},m.mapMoved=function(e,t){m.map.config.canvasLocation=new o(e,t)},m.setRangeGraph=function(e){if(e)for(var t=m.getCurrentHive(),n=t.getBeeById(e),i=n.getAbility("RNG").value,a=m.map.GetHexById(t.pos),o=0;o<m.map.Hexes.length;o++){var s=m.map.Hexes[o];s.inRange=m.map.GetHexDistance(a,s)<=i}else{m.range=null;for(var r=0;r<m.map.Hexes.length;r++)m.map.Hexes[r].inRange=!1}},m.SubscribeMapInitializedEvent=function(t,n){var i=e.$on("mapInitializedEvent",n.bind(this));t.$on("$destroy",i),m.sendMapInitializedEvent()},m.sendMapInitializedEvent=function(){e.$emit("mapInitializedEvent",m.map.config)},m.SubscribeMapUpdateEvent=function(t,n){var i=e.$on("mapUpdateEvent",n.bind(this));t.$on("$destroy",i),m.sendMapUpdateEvent()},m.sendMapUpdateEvent=function(){e.$emit("mapUpdateEvent")},m.SubscribeHiveChangeEvent=function(t,n){var i=e.$on("hiveChangeEvent",n.bind(this));t.$on("$destroy",i),m.sendHiveChangeEvent()},m.sendHiveChangeEvent=function(){e.$emit("hiveChangeEvent",{currentHive:m.getCurrentHive()})},m.handleGameLoop=function(e,t){for(;t>=n.stepTimeMs;){for(var i=0;i<m.mapResources.length;i++)m.mapResources[i].ProcessElapsedTime(n.stepTimeMs);for(var a=0;a<m.hives.length;a++)m.hives[a].handleGameLoop(e,n.stepTimeMs,m.map);t-=n.stepTimeMs}m.sendMapUpdateEvent()},m.drawMap=function(e){c(e),d(e),p(e),u(e)},m.addHive=function(e){var t=m.hives.length+1,n=new s({id:t,initialSize:2,maxSize:5,beeMutationChance:.0025,pos:e});return m.hives.push(n),n},m.addWaterNode=function(e){var t=m.map.GetHexById(e);if("undefined"!=typeof t.mapResources)return null;var n=m.mapResources.length+1,i=new r({id:n,resourceName:"Water",pos:e,color:"#04328C",cooldown:0,water:1e4});return m.mapResources.push(i),t.mapResource=i,i},m.addCloverNode=function(e,t){t=parseFloat(t)||1,0===t&&(t=1);var n=m.map.GetHexById(e);if("undefined"!=typeof n.mapResources)return null;var i=m.mapResources.length+1,a=new r({id:i,level:t,resourceName:"Clover",pos:e,color:"#2C4001",cooldown:5e3,harvestMultiplier:1/t,nectar:3*t,pollen:2*t});return m.mapResources.push(a),n.mapResource=a,a},m.generateInitialMap=function(){m.map=new a({MAPWIDTH:7,MAPHEIGHT:7}),m.setHexSizeByHeight(50),m.map.config.canvasLocation=new o(0,0),m.addHive("G5"),m.addHive("G9"),m.addWaterNode("D6"),m.addWaterNode("J10"),m.addWaterNode("E3"),m.addCloverNode("I7",1),m.addCloverNode("H6",1),m.addCloverNode("G11",1),m.addCloverNode("D4",1),m.addCloverNode("B2",2),m.addCloverNode("G13",2),m.addCloverNode("A7",3),m.addCloverNode("E7",3),m.map.config.currentHiveID=m.hives[0].id},m.setHexSizeByHeight=function(e){e=e||30;var t=e*(2/Math.sqrt(3)),n=-3,i=-2*t,a=Math.pow(t,2)+Math.pow(e,2),o=(-i-Math.sqrt(Math.pow(i,2)-4*n*a))/(2*n);return m.map.config.WIDTH=t,m.map.config.HEIGHT=e,m.map.config.SIDE=o,m.map.Relocate(),m.map.config.canvasSize=l(),g.mapconfig=m.map.config,m.map.config},m.setHexSizeBySide=function(e,t){e=e||18,t=t||2/Math.sqrt(3);var n=e,i=t,a=Math.pow(i,2),o=(1+a)/a,s=n/a,r=(1-4*a)/(4*a)*Math.pow(n,2),c=(-s+Math.sqrt(Math.pow(s,2)-4*o*r))/(2*o),d=(2*c+n)/(2*i),p=2*c+n,u=2*d;return m.map.config.WIDTH=p,m.map.config.HEIGHT=u,m.map.config.SIDE=n,m.map.Relocate(),m.map.config.canvasSize=l(),g.mapconfig=m.map.config,m.map.config}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"<"},controller:["Bee","traitDefinitions",function(e,t){var n=this;n.lastBreederID=0,n.newBreederGender="Male",n.killBreeder=function(e){n.units.splice(n.units.indexOf(e),1)},n.addNewBreeder=function(){}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Bee","traitDefinitions",function(e,t){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("configurationTab",{bindings:{},controller:["Bee","traitDefinitions","resourceTypes","jobTypes","defaultBuildings",function(e,t,n,i,a){var o=this;o.$onInit=function(){o.snapshot={traitDefinitions:angular.copy(t),resourceTypes:angular.copy(n),jobTypes:angular.copy(i),defaultBuildings:angular.copy(a)}}}],templateUrl:"components/testInterface/configurationTab.html"}),app.component("genomeEditor",{bindings:{u:"=",resolve:"<"},controller:[function(){var e=this;e.$onInit=function(){e.expando=!0,e.unit=e.u||e.resolve.unit||{}},e.randomizeName=function(){e.unit.name=e.unit.getRandomName()},e.randomize=function(e){},e.randomizeAll=function(){}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Bee","traitDefinitions",function(e,t,n,i,a){var o=this;o.$onInit=function(){o.traitDefinitions=a,o.units=[]}}]),app.component("fontTab",{templateUrl:"components/testInterface/fontTab.html",controller:"bloqhead.controllers.testInterface"});var game=angular.module("bloqhead.genetixApp");game.factory("Grid",["Hexagon","Point",function(e,t){var n=function(t){this.config=t||{},this.config.MAPWIDTH=this.config.MAPWIDTH||8,this.config.MAPHEIGHT=this.config.MAPHEIGHT||5,this.config.HEIGHT=this.config.HEIGHT||91.14378277661477,this.config.WIDTH=this.config.WIDTH||91.14378277661477,this.config.SIDE=this.config.SIDE||50,this.config.MARGIN=this.config.MARGIN||5,this.config.STROKEWIDTH=this.config.STROKEWIDTH||3,this.config.SHOW_HEX_ID=this.config.SHOW_HEX_ID||!1,this.config.SHOW_HEX_XY=this.config.SHOW_HEX_XY||!1,this.Hexes=[];for(var n={},i=0,a=0;i<=2*(this.config.MAPHEIGHT-1);){var o=0,s=0;i%2==1&&(s=(this.config.WIDTH-this.config.SIDE)/2+this.config.SIDE,o=1);for(var r=s;o<=2*(this.config.MAPWIDTH-1);){var l=this.GetHexId(i,o),c=new e(l,o,i,this.config),d=o;c.PathCoOrdX=o,this.Hexes.push(c),n[d]||(n[d]=[]),n[d].push(c),o+=2,r+=this.config.WIDTH+this.config.SIDE}i++,a+=this.config.HEIGHT/2}for(var p in n){var u=n[p],h=Math.floor(p/2)+p%2;for(var g in u){var m=u[g];m.PathCoOrdY=h++}}return this};return n.Static={Letters:"ABCDEFGHIJKLMNOPQRSTUVWXYZ"},n.prototype.GetHexId=function(e,t){for(var i=e,a="";i>25;)a=n.Static.Letters[i%26]+a,i-=26;return n.Static.Letters[i]+a+(t+1)},n.prototype.Relocate=function(){for(var e in this.Hexes)this.Hexes[e].Relocate(this.config)},n.prototype.GetHexAt=function(e){for(var t in this.Hexes)if(this.Hexes[t].Contains(e))return this.Hexes[t];return null},n.prototype.GetHexDistance=function(e,t){var n=e.PathCoOrdX-t.PathCoOrdX,i=e.PathCoOrdY-t.PathCoOrdY;return(Math.abs(n)+Math.abs(i)+Math.abs(n-i))/2},n.prototype.GetHexById=function(e){for(var t in this.Hexes)if(this.Hexes[t].id==e)return this.Hexes[t];return null},n.prototype.GetNearestHex=function(e){var t,n=Number.MAX_VALUE,i=null;for(var a in this.Hexes)t=this.Hexes[a].distanceFromMidPoint(e),t<n&&(n=t,i=this.Hexes[a]);return i},n}]);var game=angular.module("bloqhead.genetixApp");game.factory("Hexagon",["Point",function(e){var t=function(e,t,n,i){var a=i||{HEIGHT:91.14378277661477,WIDTH:91.14378277661477,SIDE:50};this.config=i,this.id=e,this.col=t,this.row=n,this.selected=!1,this.inRange=!1,this.Relocate(a)};return t.prototype.Relocate=function(t){this.config=t;var n=this.col*(t.WIDTH+t.SIDE/2)-this.col*t.WIDTH/2,i=this.row*(t.HEIGHT/2),a=(t.WIDTH-t.SIDE)/2,o=t.HEIGHT/2;t.MARGIN&&(n+=t.MARGIN,i+=t.MARGIN),this.Points=[],this.Points.push(new e(a+n,i)),this.Points.push(new e(a+t.SIDE+n,i)),this.Points.push(new e(t.WIDTH+n,o+i)),this.Points.push(new e(a+t.SIDE+n,t.HEIGHT+i)),this.Points.push(new e(a+n,t.HEIGHT+i)),this.Points.push(new e(n,o+i)),this.TopLeftPoint=new e(n,i),this.BottomRightPoint=new e(n+t.WIDTH,i+t.HEIGHT),this.MidPoint=new e(n+t.WIDTH/2,i+t.HEIGHT/2)},t.prototype.draw=function(e){this.selected?e.fillStyle="#7283BA":this.inRange?e.fillStyle="tomato":e.fillStyle="#EDC867",e.strokeStyle="black",e.lineWidth=this.config.STROKEWIDTH,e.beginPath(),e.moveTo(this.Points[0].X,this.Points[0].Y);for(var t=1;t<this.Points.length;t++){var n=this.Points[t];e.lineTo(n.X,n.Y)}if(e.closePath(),e.fill(),e.stroke(),this.id&&(this.config.SHOW_HEX_ID||this.config.SHOW_HEX_XY)){e.fillStyle="black",e.font="bolder 8pt Trebuchet MS,Tahoma,Verdana,Arial,sans-serif",e.textAlign="center",e.textBaseline="middle";var i="";this.config.SHOW_HEX_ID&&(i+=this.id+" "),this.config.SHOW_HEX_XY&&(i+=this.row+","+this.col),e.fillText(i,this.MidPoint.X,this.MidPoint.Y)}},t.prototype.isInBounds=function(t,n){return this.Contains(new e(t,n))},t.prototype.isInHexBounds=function(e){return this.TopLeftPoint.X<e.X&&this.TopLeftPoint.Y<e.Y&&e.X<this.BottomRightPoint.X&&e.Y<this.BottomRightPoint.Y},t.prototype.Contains=function(e){var t=!1;if(this.isInHexBounds(e)){var n,i=0;for(n=0,i=this.Points.length-1;n<this.Points.length;i=n++){var a=this.Points[n],o=this.Points[i];(a.Y<=e.Y&&e.Y<o.Y||o.Y<=e.Y&&e.Y<a.Y)&&e.X<(o.X-a.X)*(e.Y-a.Y)/(o.Y-a.Y)+a.X&&(t=!t)}}return t},t.prototype.distanceFromMidPoint=function(e){var t=this.MidPoint.X-e.X,n=this.MidPoint.Y-e.Y;return Math.sqrt(t*t+n*n)},t}]);var game=angular.module("bloqhead.genetixApp");game.factory("Line",function(){var e=function(e,t,n,i){this.X1=e,this.Y1=t,this.X2=n,this.Y2=i};return e});var game=angular.module("bloqhead.genetixApp");game.factory("Point",function(){var e=function(e,t){this.X=e,this.Y=t};return e});var game=angular.module("bloqhead.genetixApp");game.factory("Rectangle",function(){var e=function(e,t,n,i){this.X=e,this.Y=t,this.Width=n,this.Height=i};return e}),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<div ng-init="$ctrl.pauseScroll=false"><div class="nopadding col-xs-3"><div class="row topRow"><div class="col-xs-12 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-list"></i> Log <i class="pull-right fa" ng-class="$ctrl.pauseScroll ? \'fa-play\' : \'fa-pause\'" ng-click="$ctrl.pauseScroll=!$ctrl.pauseScroll" title="Autoscroll On/Off"></i></bloqhead-player-box-title><bloqhead-log pause-scroll="$ctrl.pauseScroll"></bloqhead-log></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-goal-list></bloqhead-goal-list></div></div><div class="row"><div class="col-xs-12"></div></div></div><div class="col-xs-9 fullH nopadding"><div ui-view="" class="animate-view"></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/achievements/achievements.html",'<div class="col-xs-12"><bloqhead-player-box box-title="Achievements"><div class="achievement-container"><div class="row" ng-repeat="ag in $ctrl.achievementSetup.achievementGroups"><div class="col-xs-12"><h6 ng-bind="ag.name"></h6><div class="row achievement-list" ng-repeat="aid in ag.aids"><div class="col-xs-12 col-md-2 col-sm-1"><div class="achievement-cell" ng-class="$ctrl.getAchievementClass($ctrl.achievementSetup.achievements[aid])" uib-tooltip-template="\'achievementTooltip.html\'" tooltip-class="achievement-tooltip"><p ng-bind="$ctrl.achievementSetup.achievements[aid].name"></div></div><div class="col-xs-12 col-md-10 col-sm-11"><div class="row achievement-rank-row"><div class="col-xs-6 col-sm-3 col-lg-1" ng-repeat="ar in $ctrl.achievementSetup.achievements[aid].ranks"><div class="achievement-rank-cell" ng-class="$ctrl.getAchievementRankClass($ctrl.achievementSetup.achievements[aid], ar)"><span ng-bind="ar[0]"></span><br><div ng-repeat="p in ar[1]" style="display: inline-block" uib-tooltip-template="\'perkTooltip.html\'" tooltip-class="perk-tooltip"><i class="fa fa-gift"></i>&nbsp;</div></div></div></div></div></div></div></div></div></bloqhead-player-box><script type="text/ng-template" id="achievementTooltip.html"><div data-attr="NONE">\n            <h5 ng-bind="$ctrl.achievementSetup.achievements[aid].desc"></h5>\n            <p ng-bind="\'Total Progress: \' + ($ctrl.achievementService.state.progress.achievements[aid].amount || 0)"></p>\n            <p ng-if="$ctrl.achievementService.state.progress.achievements[aid].nextRank != -1" ng-bind="\'Next Rank: \' + ($ctrl.achievementService.state.progress.achievements[aid].nextRank || 0)"></p>\n            <div class="progress progress-custom">\n                <div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.achievementService.state.progress.achievements[aid].amount}}" aria-valuemin="{{$ctrl.achievementService.state.progress.achievements[aid].lastRank}}" aria-valuemax="{{$ctrl.achievementService.state.progress.achievements[aid].nextRank}}"\n                    ng-style="{width: (100*(($ctrl.achievementService.state.progress.achievements[aid].amount - $ctrl.achievementService.state.progress.achievements[aid].lastRank) / ($ctrl.achievementService.state.progress.achievements[aid].nextRank-$ctrl.achievementService.state.progress.achievements[aid].lastRank))) + \'%\'}">\n\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="perkTooltip.html"><div>\n            <h5 ng-bind="$ctrl.achievementService.getPerkMessage(p, \'name\')"></h5>\n            <p ng-bind="$ctrl.achievementService.getPerkMessage(p, \'desc\')" />\n        </div></script></div>');
}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/bee/bee.html",'<div class="bloqhead-component" ng-if="$ctrl.display === \'TILE\'" ng-init="unit = $ctrl.unit"><h5 ng-click="$ctrl.showDetails()"><div class="col-xs-12 mortal-name"><span>{{$ctrl.unit.name}}</span>&nbsp;<i class="fa {{trait.icon}} {{trait.style}}" ng-repeat="trait in $ctrl.unit.traits" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></div></h5><div ng-show="$ctrl.mode === \'POP\'"><button ng-disabled="!$ctrl.canBreed" class="btn btn-sm btn-primary" ng-click="$ctrl.assignMe()">Breed Me</button><div class="btn-group" uib-dropdown dropdown-append-to-body="true"><button type="button" class="btn btn-sm btn-primary" uib-dropdown-toggle>Work <span class="caret"></span></button><ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="single-button"><li ng-repeat="(key, job) in $ctrl.jobTypes"><a href="javascript:void(0);" ng-bind="job.name" ng-click="$ctrl.assignMe(key)"></a></li></ul></div><span class="pull-right" ng-bind="$ctrl.unit.jid"></span></div><div class="row" ng-show="$ctrl.mode === \'NURSE\'"><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'egg\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'LARVA\')" ng-disabled="!$ctrl.canFertilize()">Fertilize</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'egg\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'DRONE\')" ng-disabled="!$ctrl.canBreed">Make Drone</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'larva\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'QUEEN\')" ng-disabled="!$ctrl.canBreed">Make Queen</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip" ng-if="$ctrl.unit.beetype===\'larva\'"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'WORKER\')" ng-disabled="!$ctrl.canBreed">Make Worker</button></div><div class="scalable-list-button" uib-tooltip-template="\'costTooltip.html\'" tooltip-class="building-tooltip"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'CONSUME\')">Consume</button></div></div></div><script type="text/ng-template" id="costTooltip.html"><div style="text-align: left;">\n        <h5>Cost to banish</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in unit.societyValue">\n                <i class="fa" ng-class="$ctrl.resourceTypes[cost.rid].icon" ></i>\n                <!--data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"-->\n                <span ng-bind="cost.amount"></span>&nbsp;\n            </span>\n        </p>\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/buildingList/buildingList.html",'<div class="row"><div class="col-xs-12"><div class="scalable-list-button-big" ng-repeat="building in $ctrl.hive.buildings" ng-if="building.nextCost.length > 0" tooltip-placement="bottom" uib-tooltip-template="\'resourceTooltip.html\'" tooltip-class="building-tooltip"><button type="button" ng-bind="(building.name + \' (\' + (building.gifted + building.purchased) + \')\')" ng-disabled="!building.canBuild" class="btn btn-xs btn-primary" ng-click="$ctrl.build(building)"></button></div></div></div><script type="text/ng-template" id="resourceTooltip.html"><div style="text-align: left;">\n        <h5>{{building.description}}</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in building.nextCost">\n                <i class="fa" ng-class="$ctrl.resourceTypes[cost.rid].icon"></i>\n                <!--data-attr="{{$ctrl.resourceTypes[cost.rid].attr}}"-->\n                <span ng-bind="cost.amount"></span>&nbsp;\n            <!--<span ng-bind="cost.resource"></span>-->\n            </span>\n        </p>\n        <!--\n        <p ng-repeat="cost in building.costToBuild" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></p>\n        -->\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/goalList/goalList.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-9"><i class="fa fa-check-square-o"></i> Goals</div><div class="col-xs-3"><div class="pull-right"></div></div></div></bloqhead-player-box-title><div class="row goal-container"><h4>Active Goals</h4><h4>Daily Goals</h4></div></bloqhead-player-box>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li><li ng-show="$ctrl.scrolling"><a id="scrollBottom"></a></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class=""><div class="row topRow"><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-th"></i> Resources</bloqhead-player-box-title><div class="row"><bloqhead-resource-list hive="$ctrl.hive" assign="$ctrl.assign($id, $jid)"></bloqhead-resource-list></div></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-building"></i> Hive Expansion</bloqhead-player-box-title><bloqhead-building-list hive="$ctrl.hive"></bloqhead-building-list></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="icon-foot"></i> Nursery [{{$ctrl.hive.getNurseryCount()}} / {{$ctrl.hive.getNurseryLimit()}}]</bloqhead-player-box-title><div class="row breeder-container"><div ng-repeat="child in $ctrl.hive.getBeesByType(\'egg\')" class="col-xs-12 col-lg-12 animate-repeat"><bloqhead-bee mode="NURSE" unit="child" assign="$ctrl.decideFate($id, $type)" can-breed="$ctrl.hive.getPopulationCount()<$ctrl.hive.getPopulationLimit()"></bloqhead-bee></div><div ng-repeat="child in $ctrl.hive.getBeesByType(\'larva\')" class="col-xs-12 col-lg-12 animate-repeat"><bloqhead-bee mode="NURSE" unit="child" assign="$ctrl.decideFate($id, $type)" can-breed="$ctrl.hive.getPopulationCount()<$ctrl.hive.getPopulationLimit()"></bloqhead-bee></div></div></bloqhead-player-box></div></div><div class="row" id="bottomRow"><div class="col-xs-8 fullH"><bloqhead-map></bloqhead-map></div><div class="col-xs-4 fullH"><bloqhead-population-list hive="$ctrl.hive" max-population="$ctrl.hive.getPopulationLimit()"></bloqhead-population-list></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/map/map.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-5"><i class="fa fa-map"></i> Map</div></div></bloqhead-player-box-title><div class="row map-container" style="overflow: hidden;  position: relative"><span ng-hide="$ctrl.loadPercent == 100" ng-bind="(\'Loading: \' + $ctrl.loadPercent + \'%\')"></span><div ng-show="$ctrl.loadPercent == 100" class="pull-left"><span>ID <input type="checkbox" ng-model="$ctrl.mapService.getState().mapconfig.SHOW_HEX_ID"></span><span>XY <input type="checkbox" ng-model="$ctrl.mapService.getState().mapconfig.SHOW_HEX_XY"></span></div><div ng-show="$ctrl.loadPercent == 100" class="btn-group pull-right" style="z-index: 100" role="group"><div class="btn btn-sm btn-info" ng-click="$ctrl.resetZoom()"><i class="fa fa-arrows-alt"></i></div><div class="btn btn-sm btn-info" ng-click="$ctrl.zoomOut()"><i class="fa fa-minus"></i></div><div class="btn btn-sm btn-info" ng-click="$ctrl.zoomIn()"><i class="fa fa-plus"></i></div></div><canvas ng-show="$ctrl.loadPercent == 100" id="map" style="position:absolute;top:0px;left:0px" lvl-drop-target="true" on-drag-start="$ctrl.onDragStart(dragId)" on-drag-stop="$ctrl.onDragStop()" on-drop="$ctrl.dropped(dragId, dropId, relativePos)"></canvas></div></bloqhead-player-box>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="player-box"><h3 class="box-title" ng-transclude="boxTitleHtml">{{$ctrl.boxTitle}}</h3><div class="player-content"><ng-transclude></ng-transclude></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationList.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-9"><i class="fa fa-globe"></i> Hive#{{$ctrl.hive.id}} Population [{{$ctrl.hive.getPopulationCount()}} / {{$ctrl.hive.getPopulationLimit()}}]</div><div class="col-xs-3"><div class="pull-right"></div></div></div></bloqhead-player-box-title><div class="row population-container"><div class="col-xs-12"><uib-tabset type="pills"><div uib-tab template-url="tab.html" heading="Gender View"><div class="col-xs-6 col-lg-6"><h4>Queens</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'queen\',traits:[]}"></bloqhead-population-panel><h4>Workers</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'worker\',traits:[]}"></bloqhead-population-panel><h4>Drones</h4><bloqhead-population-panel population="$ctrl.hive" filter="{type:\'drone\',traits:[]}"></bloqhead-population-panel></div></div><div uib-tab template-url="tab.html" heading="Custom View"><div class="col-xs-12"><div class="row"><div class="col-xs-12"><div class="btn btn-xs btn-primary trait-filter-item" ng-repeat="c in $ctrl.criteria" ng-click="$ctrl.deleteCriteria($index)"><div ng-if="c.type=\'trait\'"><span ng-bind="c.val.name"></span> <button type="button" class="close" ng-click="$ctrl.deleteCriteria($index)"><span>×</span></button></div></div><button class="btn btn-xs btn-primary" type="button" href="javascript:void(0);" ng-click="$ctrl.openTraitSelector()">Add Filter</button></div></div><div class="row"><div class="col-xs-12"><bloqhead-population-panel population="$ctrl.hive" filter="$ctrl.getCustomFilter()"></bloqhead-population-panel></div></div></div></div></uib-tabset></div></div></bloqhead-player-box><script type="text/ng-template" id="tab.html"><li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item tab-list-button">\n        <button ng-click="select($event)" class="btn btn-xs">{{heading}}</button>\n    </li></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationPanel.html",'<div class="population-panel"><table><tr ng-repeat="bee in $ctrl.population | applyPopulationFilter: $ctrl.filter | orderBy: $ctrl.orderBy" class="population-list animate-repeat"><td lvl-draggable="true" data-beeid="{{bee.id}}"><span ng-bind="bee.name"></span>&nbsp;<i class="fa {{trait.icon}}" ng-repeat="trait in bee.traits" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></td></tr></table></div><script type="text/ng-template" id="traitTooltip.html"><div class="text-center">\n        <h4>{{trait.name}}</h4>\n        <div class="genes-table">\n            <div class="genes-tr">\n                <div class="genes-th rec">Recessive</div>\n                <div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div>\n                <div class="genes-th dom ">Dominant</div>\n            </div>\n            <div class="genes-tr " ng-repeat="gene in trait.genes">\n                <!--<div class="genes-td rec " ng-bind="$ctrl.geneDefinitions[gene[0]].rec "></div>\n                <div class="genes-td" data-attr="{{$ctrl.geneDefinitions[gene[0]].attr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[gene[0]]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneTraitRangeStyle($ctrl.geneDefinitions[gene[0]], trait)"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom" ng-bind="$ctrl.geneDefinitions[gene[0]].dom"></div>-->\n            </div>\n        </div>\n        <br />\n        <br />\n    </div></script><script type="text/ng-template" id="attrTooltip.html"><div class="text-center">\n        <h4>{{$ctrl.attributes[$ctrl.hoverAttr].name}}</h4>\n        <h5>{{$ctrl.attributes[$ctrl.hoverAttr].desc}}</h5>\n        <br />\n        <div class="genes-table">\n            <!--<div class="genes-tr " ng-repeat="gene in $ctrl.geneDefinitions | filter:{attr: $ctrl.hoverAttr}" ng-if="unit.genesUnlocked.indexOf($ctrl.geneDefinitions.indexOf(gene)) >=0">\n                <div class="genes-td rec"><span ng-bind="gene.rec"></span>: <span ng-bind="{{-1*unit.genes[$ctrl.geneDefinitions.indexOf(gene)][0]}}"></span></div>\n                <div class="genes-td" data-attr="{{$ctrl.hoverAttr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)])"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom"><span ng-bind="gene.dom"></span>: <span ng-bind="unit.genes[$ctrl.geneDefinitions.indexOf(gene)][1]"></span></div>-->\n        </div>\n    </div>\n    <br />\n    <br />\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/traitSelector.html",'<div class="modal-body" id="modal-body"><div class="row"><div class="pull-right" style="margin-right: 3vw"><toggle ng-model="$ctrl.showLocked" style="lock" off="<i class=\'fa fa-unlock\'></i>" on="<i class=\'fa fa-lock\'></i>" size="btn-sm" offstyle="btn-success" onstyle="btn-danger"></toggle></div><div class="col-xs-4"><fieldset><h5>Genes</h5><div class="genes-table"><div class="genes-tr"><div class="genes-th rec">Recessive</div><div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div><div class="genes-th dom">Dominant</div></div><div class="genes-tr" ng-repeat="g in $ctrl.geneDefinitions" ng-show="g.unlocked || $ctrl.showLocked"><div class="genes-td rec" ng-bind="$ctrl.getGeneRecessive(g)"></div><div class="genes-td" data-attr="{{g.attr}}"><div class="progress progress-trait-selector"><div class="progress-bar" role="progressbar" aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(g)"></div></div></div><div class="genes-td dom" ng-bind="$ctrl.getGeneDominant(g)"></div></div></div></fieldset></div><div class="col-xs-8">Traits<div class="row"><div class="col-xs-12"><span class="trait-icon" ng-repeat="t in $ctrl.traitDefinitions"><button ng-show="t.unlocked || $ctrl.showLocked" class="btn btn-sm btn-info" type="button" ng-click="$ctrl.select(t)" ng-bind="t.name" data-ng-mouseenter="$ctrl.traitEnter(t);" ng-mouseleave="$ctrl.traitLeave(t);"></button></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/resourceList/resourceList.html",'<div class="resource-list col-xs-12"><div class="row" ng-repeat="(key, value) in $ctrl.hive.resources" ng-if="value[2] === true" data-attr="{{$ctrl.resourceTypes[key].attr}}" lvl-drop-target="true" on-drop="$ctrl.dropped(dragId, dropId, relativePos, key)"><div class="col-xs-12 col-sm-3"><h5 uib-tooltip="{{$ctrl.resourceTypes[key].desc}}">{{$ctrl.resourceTypes[key].name}}</h5></div><div class="col-xs-12 col-sm-9"><div class="progress progress-custom" ng-if="value[1] !== -1"><div class="progress-bar" role="progressbar" aria-valuenow="{{value[0]}}" aria-valuemin="0" aria-valuemax="{{value[1]}}" ng-style="{width: (100*(value[0]/value[1])) + \'%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerRate(key)"></span>/s </span><span class="amounts" ng-bind="value[0] + \' / \' + value[1]"></span></div></div><div class="progress progress-custom" ng-if="value[1] === -1"><div class="progress-bar" role="progressbar" aria-valuenow="1" aria-valuemin="0" aria-valuemax="1" ng-style="{width: \'100%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerRate(key)"></span>/s </span><span class="amounts" ng-bind="value[0]"></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor u="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/configurationTab.html",'<div class="row"><div class="col-xs-12"><h5>Resources</h5><div class="row"><span ng-repeat="rt in $ctrl.snapshot.resourceTypes" ng-bind="rt.name"></span></div><h5>Buildings</h5><h5>Workers</h5><h5>Genetix</h5><h5>Achievements</h5></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/fontTab.html","<style>#font-examples {\n        height: 90vh;\n    }\n    \n    #font-examples div {\n        font-size: 1.1vw;\n        color: gold;\n    }\n    \n    #font-examples input {\n        color: black;\n    }</style><div id=\"font-examples\" ng-init=\"fonts = ['hammer', 'shield', 'tools', 'happy', 'happy2', 'bee', 'egg','pollen','water','bee-2', 'honeypot', 'larva', 'tombstone', 'jar']\"><div class=\"col-xs-1\" ng-repeat=\"font in fonts|orderBy:font\"><i class=\"icon-{{font}}\"></i> <input type=\"text\" readonly=\"readonly\" value=\"{{font}}\"></div></div>")}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions" ng-if="$ctrl.unit.genes[$index][2] > 0"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div><div ng-repeat="earning in $ctrl.unit.earnings"><span ng-bind="earning.rid"></span>: <span ng-bind="earning.amount"></span></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div class="col-xs-12"><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li><li role="presentation"><a data-target="#configuration" role="tab" data-toggle="tab">Configuration</a></li><li role="presentation"><a data-target="#fonts" role="tab" data-toggle="tab">Fonts</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div><div role="tabpanel" class="tab-pane" id="configuration"><configuration-tab></configuration-tab></div><div role="tabpanel" class="tab-pane" id="fonts"><font-tab></font-tab></div></div></div>')}])}(),angular.module("bloqhead.genetixApp").constant("buildingTypes",{DORMITORY:{name:"Dormitory",description:"Where the adult bees live.",use:"housing",size:{base:20,percent:15},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},NURSERY:{name:"Nursery",description:"Where the eggs and larva live.",use:"nursery",size:{base:5,percent:12.5},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_NECTAR:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"NECTAR",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_POLLEN:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"POLLEN",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_WATER:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"WATER",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_FOOD:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"FOOD",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_HONEY:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"HONEY",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_JELLY:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"ROYAL_JELLY",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1},STORAGE_WAX:{name:"%(resource)s Storage",description:"Stores %(resource)s.",use:"storage",rid:"WAX",size:{base:75,percent:100},cost:[{rid:"WAX",base:50,percent:125}],purchased:0,gifted:1,unlocked:!0,multiplier:1}}),angular.module("bloqhead.genetixApp").constant("jobTypes",{IDLE:{jid:"IDLE",name:"Idler",steps:[],beetypes:["queen","drone","worker","larva","egg"]},BREEDER:{jid:"BREEDER",name:"Breeding Queen",description:"Head Queen, performs the task of laying eggs and fertlizing them.",steps:[{spawn:{rate:"PRD_EGG"}}],beetypes:["worker"]},FORAGER:{jid:"FORAGER",name:"Forager",description:"Collects nectar, pollen, or water",steps:[{travel:{rate:"SPD_FLY"}},{collect:{rate:"SPD_CLT",storage:"STR_%(rid)s"}},{deposit:{rate:"SPD_DEP"}}],beetypes:["worker"]},NURSE:{jid:"NURSE",name:"Nurse Bee",description:"Cares for eggs and produces royal jelly from honey and pollen",steps:[{produce:{rate:"PRD_JELLY",yield:"YLD_JELLY",cost:["COST_JELLY_HONEY","COST_JELLY_POLLEN"]}}],beetypes:["worker"]},PRODUCER_FOOD:{jid:"PRODUCER_FOOD",name:"Food producer",description:"Converts stored honey, pollen, and water into usable food",steps:[{produce:{rate:"PRD_FOOD",cost:["COST_FOOD_HONEY","COST_FOOD_POLLEN","COST_FOOD_WATER"],yield:"YLD_FOOD"}}],beetypes:["worker"]},PRODUCER_HONEY:{jid:"PRODUCER_HONEY",name:"Honey producer",description:"Converts stored nectar into honey",steps:[{produce:{rate:"PRD_HONEY",cost:["COST_HONEY_NECTAR"],yield:"YLD_HONEY"}}],beetypes:["worker"]},BUILDER:{jid:"BUILDER",name:"Builder",description:"Converts stored food into wax",steps:[{produce:{rate:"PRD_WAX",cost:["COST_WAX_FOOD"],yield:"YLD_WAX"}}],beetypes:["worker"]},UNDERTAKER:{jid:"UNDERTAKER",name:"Undertaker bee",description:"Converts dead bees and rejected eggs into food",steps:[{produce:{rate:"PRD_FOOD",cost:["COST_FOOD_DEADBEES"],yield:"YLD_FOOD"}}],beetypes:["worker"]},GUARD:{jid:"GUARD",name:"Guard bee",description:"Protects the hive which reduces the mortality rate",steps:[{protect:{amount:"DEF"}}],beetypes:["worker","drone"]}}),angular.module("bloqhead.genetixApp").constant("resourceTypes",{NECTAR:{rid:"NECTAR",name:"Nectar",desc:"Used for creating honey.",jids:["FORAGER"],icon:"fa-tint"},POLLEN:{rid:"POLLEN",name:"Pollen",desc:"Used for food creation.",jids:["FORAGER"],icon:"icon-pollen"},WATER:{rid:"WATER",name:"Water",desc:"Used for food creation and breeding.",jids:["FORAGER"],icon:"icon-water"},FOOD:{rid:"FOOD",name:"Food",desc:"Nurishment for the hive.",jids:["PRODUCER_FOOD"],icon:"fa-apple"},HONEY:{rid:"HONEY",name:"Honey",desc:"Used for making royal jelly and food and in building.",jids:["PRODUCER_HONEY"],icon:"icon-honeypot"},ROYAL_JELLY:{rid:"ROYAL_JELLY",name:"Royal Jelly",desc:"Used for breeding new queens.",jids:["NURSE"],icon:"icon-jar"},WAX:{rid:"WAX",name:"Wax",desc:"Used in honeycomb construction.",jids:["BUILDER"],icon:"icon-tools"},DEADBEES:{rid:"DEADBEES",name:"Dead bees",desc:"Dead bees that take up space, convert them to food.",jids:["UNDERTAKER"],icon:"icon-tombstone"},DEFENSE:{rid:"DEFENSE",name:"Defense",desc:"Hive defensive ability.",jids:["GUARD"],icon:"icon-shield"}}),angular.module("bloqhead.genetixApp").constant("traitDefinitions",[{name:"Big stinger",desc:"A stinger built for defense.",genes:[{chromosome:0,gene:0,value:1}],mods:[{DEF:{add:5}}],icon:"icon-shield text-success"},{name:"Little stinger",desc:"This below average sized stinger is bad for defense.",genes:[{chromosome:0,gene:0,value:0}],mods:[{DEF:{add:-5}}],icon:"icon-shield text-danger"},{name:"Extra Range 1",desc:"Can fly 1 additional cell.",genes:[{chromosome:1,gene:0,value:1}],mods:[{RNG:{add:1}}],icon:"fa-arrow-up text-success"},{name:"10% More Venomous",desc:"Extra venom for better defense.",genes:[{chromosome:2,gene:0,value:0}],requiredTraits:["Big stinger"],mods:[{DEF:{percent:10}}],icon:"icon-shield text-success"},{name:"Fly 10% Faster",desc:"Little stinger, faster flier.",genes:[{chromosome:2,gene:0,value:0}],requiredTraits:["Little stinger"],mods:[{SPD_FLY:{percent:-10}}],icon:"fa-bolt text-success"}]).constant("beeAbilities",{DEF:{name:"Defense",desc:"Ability to defend the hive.",baseValue:1,rid:"DEFENSE"},RNG:{name:"Range",desc:"Number of cells a bee can fly before having to return to the hive.",baseValue:2},STR_POLLEN:{name:"Pollen Storage",desc:"The amount of pollen a bee can hold.",baseValue:10,rid:"POLLEN"},STR_NECTAR:{name:"Nectar Storage",desc:"The amount of nectar a bee can hold.",baseValue:10,rid:"NECTAR"},STR_WATER:{name:"Water Storage",desc:"The amount of water a bee can hold.",baseValue:10,rid:"WATER"},SPD_FLY:{name:"Flight Speed",desc:"The rate at which a bee can traverse 1 cell.",baseValue:4e3},SPD_CLT:{name:"Collection Speed",desc:"The rate at which a bee can collect 1 resource from a node.",baseValue:1e3},SPD_DEP:{name:"Deposit Speed",desc:"The rate at which a bee can deposits 1 resource from its resource baskets.",baseValue:1500},PRD_HONEY:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:1e4,rid:"HONEY"},YLD_HONEY:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:4,rid:"HONEY"},COST_HONEY_NECTAR:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:2,rid:"HONEY",c_rid:"NECTAR"},PRD_WAX:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:3e4,rid:"WAX"},YLD_WAX:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"WAX"},COST_WAX_FOOD:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",
baseValue:2,rid:"WAX",c_rid:"FOOD"},PRD_JELLY:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:3e4,rid:"ROYAL_JELLY"},YLD_JELLY:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"ROYAL_JELLY"},COST_JELLY_HONEY:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:10,rid:"ROYAL_JELLY",c_rid:"HONEY"},COST_JELLY_POLLEN:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:10,rid:"ROYAL_JELLY",c_rid:"POLLEN"},PRD_FOOD:{name:"%(resource)s Production Rate",desc:"The rate at which a bee can produce %(resource)s.",baseValue:1e4,rid:"FOOD"},YLD_FOOD:{name:"%(resource) Production Yield",desc:"The amount of %(resource)s a bee can produce.",baseValue:1,rid:"FOOD"},COST_FOOD_POLLEN:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:2,rid:"FOOD",c_rid:"POLLEN"},COST_FOOD_HONEY:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:1,rid:"FOOD",c_rid:"HONEY"},COST_FOOD_WATER:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:2,rid:"FOOD",c_rid:"WATER"},COST_FOOD_DEADBEES:{name:"%(resource)s Production Cost (%(cost)s)",desc:"The amount of %(cost)s a bee needs to produce %(resource)s.",baseValue:5,rid:"FOOD",c_rid:"DEADBEES"},PRD_EGG:{name:"Egg Production",desc:"The rate at which a bee can produce eggs.",baseValue:3e4}}),angular.module("bloqhead.genetixApp").constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3,WORK:4}),angular.module("bloqhead.genetixApp").constant("achievementSetup",{achievementGroups:[{name:"Population",aids:["A_BIRTHS"]},{name:"Resources",aids:["A_DIRT_E","A_BRICKS_E","A_STEEL_E","A_WATER_E","A_WOOD_E","A_GOLD_E","A_SCIENCE_E","A_EVOCOIN_E","A_HAPPINESS_E"]},{name:"Buildings",aids:["A_SODHOUSE_B","A_DIRTPILE_B","A_WOODSHED_B","A_WATERHOLE_B"]}],achievements:{A_BIRTHS:{aid:"A_BIRTHS",name:"The Chosen One",desc:"Create a new unit",ranks:[[1,[["P_R_BONUS","DIRT",20]]],[3,[["P_R_BONUS","WOOD",20]]],[5,[["P_R_BONUS","EVOCOIN",1]]]]},A_DIRT_E:{aid:"A_DIRT_E",name:"Earn Dirt",desc:"Earn Dirt Desc",logmsg:"Earn Dirt Log",res:"DIRT",ranks:[[5,[["P_R_MULTIPLIER","DIRT",25]]],[25,[["P_R_UNLOCK","WOOD"],["P_B_UNLOCK","WOODSHED"],["P_B_BONUS","WOODSHED",1]]],[100,[["P_R_MULTIPLIER","DIRT",50]]],[1e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[2e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[3e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[4e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[5e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[7500,[["P_B_MULTIPLIER","DIRTPILE",50]]],[1e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[15e3,[["P_B_MULTIPLIER","DIRTPILE",75]]],[2e4,[["P_B_MULTIPLIER","DIRTPILE",100]]],[3e4,[["P_R_MULTIPLIER","DIRT",100]]],[5e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[8e4,[["P_B_MULTIPLIER","DIRTPILE",50]]]]},A_BRICKS_E:{aid:"A_BRICKS_E",name:"Earn Bricks",desc:"Earn Bricks Desc",logmsg:"Earn Bricks Log",res:"BRICKS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_STEEL_E:{aid:"A_STEEL_E",name:"Earn Steel",desc:"Earn Steel Desc",logmsg:"Earn Steel Log",res:"STEEL",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_WATER_E:{aid:"A_WATER_E",name:"Earn Water",desc:"Earn Water Desc",logmsg:"Earn Water Log",res:"WATER",ranks:[[50,[["P_R_MULTIPLIER","WATER",10]]],[75,[["P_B_MULTIPLIER","WATERHOLE",10]]],[500,[["P_R_MULTIPLIER","WATER",10]]],[750,[["P_B_MULTIPLIER","WATERHOLE",10]]],[2500,[["P_B_UNLOCK","LIBRARY"]]],[5e3,[["P_R_MULTIPLIER","WATER",10]]],[7500,[["P_B_MULTIPLIER","WATERHOLE",10]]],[5e4,[["P_R_MULTIPLIER","WATER",50]]],[75e3,[["P_B_MULTIPLIER","WATERHOLE",10]]]]},A_WOOD_E:{aid:"A_WOOD_E",name:"Earn Wood",desc:"Earn Wood Desc",logmsg:"Earn Wood Log",res:"WOOD",ranks:[[50,[["P_R_UNLOCK","WATER"],["P_B_UNLOCK","WATERHOLE"],["P_B_BONUS","WATERHOLE",1]]],[250,[["P_R_MULTIPLIER","WOOD",50]]],[500,[["P_B_MULTIPLIER","WOODSHED",100]]],[1e3,[["P_B_MULTIPLIER","WOODSHED",100]]],[2500,[["P_R_MULTIPLIER","WOOD",50]]],[5e3,[["P_R_MULTIPLIER","WOOD",50]]],[1e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]],[2e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]]]},A_GOLD_E:{aid:"A_GOLD_E",name:"Earn Gold",desc:"Earn Gold Desc",logmsg:"Earn Gold Log",res:"GOLD",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_SCIENCE_E:{aid:"A_SCIENCE_E",name:"Earn Science",desc:"Earn Science Desc",logmsg:"Earn Science Log",res:"SCIENCE",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_HAPPINESS_E:{aid:"A_HAPPINESS_E",name:"Earn Happiness",desc:"Earn Happiness Desc",logmsg:"Earn Happiness Log",res:"HAPPINESS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_EVOCOIN_E:{aid:"A_EVOCOIN_E",name:"Earn EVO-Coins",desc:"Earn EVO-Coins Desc",logmsg:"Earn EVO-Coins Log",res:"EVOCOIN",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",20]]]]},A_SODHOUSE_B:{aid:"A_SODHOUSE_B",name:"Build a Sod House",desc:"Build a Sod House",logmsg:"Build a Sod House",res:"HAPPINESS",ranks:[[4,[["P_B_BONUS","DIRTPILE",4],["P_B_BONUS","WOODSHED",4],["P_B_BONUS","WATERHOLE",4]]]]},A_DIRTPILE_B:{aid:"A_DIRTPILE_B",name:"Build a Dirt Pile",desc:"Build a Dirt Pile",logmsg:"Build a Dirt Pile",res:"DIRT",ranks:[[25,[["P_R_MULTIPLIER","DIRT",250]]]]},A_WOODSHED_B:{aid:"A_WOODSHED_B",name:"Build a Woodshed",desc:"Build a Woodshed",logmsg:"Build a Woodshed",res:"WOOD",ranks:[[25,[["P_R_MULTIPLIER","WOOD",250]]]]},A_WATERHOLE_B:{aid:"A_WATERHOLE_B",name:"Build a Water Hole",desc:"Build a Water Hole",logmsg:"Build a Water Hole",res:"WATER",ranks:[[25,[["P_R_MULTIPLIER","WATER",250]]]]},A_LIBRARY_B:{aid:"A_LIBRARY_B",name:"Build a Library",desc:"Build a Library",logmsg:"Build a Library",res:"SCIENCE",ranks:[[1,[["P_R_UNLOCK","SCIENCE"]]]]}},perks:{P_R_UNLOCK:{pid:"P_R_UNLOCK",name:"New Resource: %(res)s",desc:"Unlocks the %(res)s resource.",logmsg:"The %(res)s resource has been unlocked.",once:!1},P_R_MULTIPLIER:{pid:"P_R_MULTIPLIER",name:"Resource Multiplier",desc:"Increases the rate at which you aquire %(res)s by %(amt)d%%.",logmsg:"Earned %(name)s - The rate that you aquire %(res)s has been increased by %(amt)d%%."},P_R_BONUS:{pid:"P_R_BONUS",name:"Bonus Resources",desc:"%(amt)d %(res)s will be added to your storage.",logmsg:"%(amt)d %(res)s has been added to your storage."},P_B_UNLOCK:{pid:"P_B_UNLOCK",name:"New building: %(buildingType)s",desc:"Unlocks the %(buildingType)s building.",logmsg:"The %(buildingType)s building has been unlocked."},P_B_BONUS:{pid:"P_B_GIFT",name:"Bonus Buildings",desc:"%(amt)d free %(buildingType)s%(plural)s for you to use.",logmsg:"You have been given %(amt)d %(buildingType)s%(plural)s."},P_B_MULTIPLIER:{pid:"P_B_MULTIPLIER",name:"%(buildingType)s multiplier",desc:"Your %(buildingType)ss now hold %(amt)d%% more.",logmsg:"Your %(buildingType)ss just got %(amt)d%% bigger."}}}),angular.module("bloqhead.genetixApp").constant("defaultState",{clearLog:!0,autoSaveMs:3e4,gameLoopServiceState:{stepTimeMs:50},achievementServiceState:null,resourceServiceState:{resources:{}},buildingServiceState:{buildings:{}}}).constant("gameSaveKey","GENETIX_SAVE").constant("gameStates",{PAUSED:0,RUNNING:1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
