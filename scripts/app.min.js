function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#other" role="tab" data-toggle="tab">Other</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><fieldset><div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-4" ng-repeat="digger in $ctrl.diggers"><div style="border: 1px solid grey"><button type="button" class="close" ng-click="$ctrl.killBreeder(digger)"><span>&times;</span></button><genome-editor unit="digger" update-gene="$ctrl.updateGene($index, $geneIndex, $values)"></genome-editor></div></div></div></fieldset></div><div role="tabpanel" class="tab-pane" id="other"><div class="well"><h3>Nothing to see here....</h3></div></div></div></div>')}])}();var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("genomeEditor",{bindings:{unit:"<",updateGene:"&"},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e},t.randomize=function(e){var n=[];n.push(randomIntFromInterval(0,255)),n.push(randomIntFromInterval(0,255)),n.push(randomIntFromInterval(0,255)),t.updateGene({$geneIndex:e,$values:n})},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0==randomIntFromInterval(0,1)?"Male":"Female",r="Male"==n?255:0,a="Male"==n?0:255;t.updateGene({$geneIndex:42,$values:[r,a,0]}),t.unit.setRandomName()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,r,a,i){var o=this;o.lastBreederID=0,o.newBreederGender="Male",o.killBreeder=function(e){o.diggers.splice(o.diggers.indexOf(e),1)},o.addNewBreeder=function(){for(var e=[],t=0;t<a.length;t++)e.push([0,0,0]);var n="Male"==o.newBreederGender?255:0,t="Male"==o.newBreederGender?0:255;e[42][0]=n,e[42][1]=t;var i=new r({id:o.lastBreederID++,generation:0,scale:6,genes:e});i.update(),o.diggers.unshift(i)},o.$onInit=function(){o.geneDefinitions=a,o.traitDefinitions=i,o.diggers=[],o.updateGene=function(e,t,n){var r=o.diggers[e];r.genes[t]=n,r.update()}}}]);var game=angular.module("bloqhead.genetixApp");game.constant("gameStates",{PAUSED:0,RUNNING:1}),game.service("gameService",["$window","$rootScope","Breeder","geneDefinitions","gameStates","traitDefinitions",function(e,t,n,r,a,i){var o=this;o.init=function(e){angular.isDefined(e)||(e={}),o.stepTimeMs=e.stepTimeMs||5e3,o.lastTime=0,o.diggers=[],o.diggerOffspring=[],o.diggerAncestors=[],o.maxOffspring=e.maxOffspring||30,o.currentState=a.RUNNING;for(var t=0;t<2;t++){for(var i=new n({id:t,generation:0,scale:6}),s=0;s<r.length;s++)i.genes.push([0,0,5]);0===t&&(i.genes[42]=[255,0,0]),1==t&&(i.genes[42]=[0,255,0]),i.update(),o.diggers.push(i)}o.gameLoop(0)},o.SubscribeBreedEvent=function(e,n){var r=t.$on("breedEvent",n.bind(this));e.$on("$destroy",r)},o.SubscribeNewGenerationEvent=function(e,n){var r=t.$on("newGenerationEvent",n);e.$on("$destroy",r)},o.getState=function(){return o.currentState},o.setState=function(e){o.currentState=e},o.breed=function(e){for(var n=0;n<e;n++)if(o.diggerOffspring.length<o.maxOffspring){var r=o.diggers[0].breed(o.diggers[1],o.diggerOffspring.length);o.diggerOffspring.push(r),t.$emit("breedEvent",o.diggerOffspring)}else o.nextGeneration(),t.$emit("newGenerationEvent",{Ancestors:o.diggerAncestors,Diggers:o.diggers})},o.nextGeneration=function(){o.diggerAncestors.push(o.diggers),o.diggerAncestors.length>o.maxOffspring&&(o.diggerAncestors=o.diggerAncestors.slice(1)),o.diggers=[];var e=o.determineNextParents(o.aggressive);o.diggers.push(e[0]),o.diggers.push(e[1]),o.diggerOffspring=[]},o.determineNextParents=function(e){for(var t=o.diggerOffspring[0].genes.length,n={index:-1,value:-255*t},r={index:-1,value:-255*t},a=0;a<o.diggerOffspring.length;a++){var i=o.diggerOffspring[a],s=e(i);i.hasTrait("Male")&&n.value<s?(n.index=a,n.value=s):i.hasTrait("Female")&&r.value<s&&(r.index=a,r.value=s)}return o.diggerOffspring[n.index].update({scale:6}),o.diggerOffspring[r.index].update({scale:6}),[o.diggerOffspring[n.index],o.diggerOffspring[r.index]]},o.greenFitness=function(e){for(var t=e.genes.length,n=0,r=0;r<t;r++)n+=e.genes[r][1]-e.genes[r][0];return n},o.redFitness=function(e){for(var t=e.genes.length,n=0,r=0;r<t;r++)n+=e.genes[r][0]-e.genes[r][1];return n},o.blueFitness=function(e){for(var t=e.genes.length,n=0,r=0;r<t;r++)n+=e.genes[r][2];return n},o.aggressive=function(e){var t=i.filter(function(e){return"Aggressive"===e.name})[0];return o.traitFitness(e,t)},o.traitFitness=function(e,t){for(var n=t.genes.length,r=1,a=0;a<n;a++){var i=t.genes[a],o=e.genes[i[0]],s=o[1]-o[0],g=(i[2]+i[1])/2;if(0===o[0]&&0===o[1]&&0===o[2])return-1;s!=g&&(r*=Math.abs(s-g))}return 1/r},o.gameLoop=function(t){for(var n=this,r=0;n.lastTime+t>n.stepTimeMs*(r+1);)r++;n.lastTime=n.lastTime-n.stepTimeMs*r,n.currentState==a.RUNNING&&n.breed(r),e.requestAnimationFrame(this.gameLoop.bind(this))}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","$timeout","gameService",function(e,t,n){var r=this;r.$onInit=function(){r.helloText="Hello main game",r.diggers=n.diggers,r.diggerOffspring=[],r.diggerAncestors=[],n.SubscribeBreedEvent(e,function(t,n){e.$apply(function(){r.diggerOffspring=n})}),n.SubscribeNewGenerationEvent(e,function(t,n){e.$apply(function(){r.diggers=n.Diggers,r.diggerAncestors=n.Ancestors})})}}]);var app=angular.module("bloqhead.genetixApp");app.component("gameControl",{template:'<div><button type="button" class="btn btn-xs btn-danger" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["gameService","gameStates",function(e,t){var n=this;n.$onInit=function(){n.currentState=e.getState()},n.toggleState=function(){n.currentState=n.currentState===t.RUNNING?t.PAUSED:t.RUNNING,e.setState(n.currentState)},n.getIcon=function(){return n.currentState===t.RUNNING?"fa-pause":"fa-play"}}]});var game=angular.module("bloqhead.genetixApp");game.constant("geneDefinitions",function(){var e=[];return e[0]={dom:"Broad Shoulders",rec:"Slender Shoulders",attr:["STR"]},e[1]={dom:"Thick Skull",rec:"Soft Skull",attr:["STR"]},e[2]={dom:"Large Arms",rec:"Small Arms",attr:["STR"]},e[3]={dom:"Large Legs",rec:"Small Legs",attr:["STR"]},e[4]={dom:"Big Chest",rec:"Weak Chest",attr:["STR"]},e[5]={dom:"Tough Jaw",rec:"Weak Jaw",attr:["STR"]},e[6]={dom:"Oafish",rec:"Mousey",attr:["STR"]},e[7]={dom:"",rec:"",attr:["STR"]},e[8]={dom:"",rec:"",attr:["STR"]},e[9]={dom:"",rec:"",attr:["STR"]},e[10]={dom:"",rec:"",attr:["STR"]},e[11]={dom:"",rec:"",attr:["STR"]},e[12]={dom:"",rec:"",attr:["STR"]},e[13]={dom:"",rec:"",attr:["STR"]},e[14]={dom:"Calculated Decisions",rec:"Reckless",attr:["INT"]},e[15]={dom:"Lateral Thinker",rec:"Single Minded",attr:["INT"]},e[16]={dom:"Quick Learner",rec:"Forgetful",attr:["INT"]},e[17]={dom:"",rec:"",attr:["INT"]},e[18]={dom:"",rec:"",attr:["INT"]},e[19]={dom:"",rec:"",attr:["INT"]},e[20]={dom:"",rec:"",attr:["INT"]},e[21]={dom:"",rec:"",attr:["INT"]},e[22]={dom:"",rec:"",attr:["INT"]},e[23]={dom:"",rec:"",attr:["INT"]},e[24]={dom:"",rec:"",attr:["INT"]},e[25]={dom:"",rec:"",attr:["INT"]},e[26]={dom:"",rec:"",attr:["INT"]},e[27]={dom:"",rec:"",attr:["INT"]},e[28]={dom:"Full Lips",rec:"Thin Lips",attr:["CHR"]},e[29]={dom:"Dark Skin",rec:"Fair Skin",attr:["CHR"]},e[30]={dom:"Eloquent",rec:"Catatonic",attr:["CHR"]},e[31]={dom:"Powerful Voice",rec:"Quiet Voice",attr:["CHR"]},e[32]={dom:"",rec:"",attr:["CHR"]},e[33]={dom:"",rec:"",attr:["CHR"]},e[34]={dom:"",rec:"",attr:["CHR"]},e[35]={dom:"",rec:"",attr:["CHR"]},e[36]={dom:"",rec:"",attr:["CHR"]},e[37]={dom:"",rec:"",attr:["CHR"]},e[38]={dom:"",rec:"",attr:["CHR"]},e[39]={dom:"",rec:"",attr:["CHR"]},e[40]={dom:"",rec:"",attr:["CHR"]},e[41]={dom:"",rec:"",attr:["CHR"]},e[42]={dom:"Female",rec:"Male",attr:["LCK"]},e[43]={dom:"",rec:"",attr:["LCK"]},e[44]={dom:"",rec:"",attr:["LCK"]},e[45]={dom:"",rec:"",attr:["LCK"]},e[46]={dom:"",rec:"",attr:["LCK"]},e[47]={dom:"",rec:"",attr:["LCK"]},e[48]={dom:"",rec:"",attr:["LCK"]},e[49]={dom:"",rec:"",attr:["LCK"]},e}()),game.constant("traitDefinitions",function(){var e=[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Female",genes:[[42,0,255]]},{name:"Male",genes:[[42,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}],t=[],n=function(t){return e.filter(function(e){return t===e.name})[0]},r=function(e){if(angular.isDefined(e.requiredTraits))for(var a=0;a<e.requiredTraits.length;a++){var i=e.requiredTraits[a],o=n(i);t.indexOf(o.name)===-1&&r(o);for(var s=0;s<o.genes.length;s++)e.genes.push(o.genes[s])}t.push(e.name)},a=function(){for(var t=0;t<e.length;t++){var n=e[t];r(n)}return e};return a()}()),game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){"undefined"==typeof e&&(e={})},r.prototype.getTraits=function(e){var t=[];if(e.length)for(var r=0;r<n.length;r++){for(var a=n[r],i=!0,o=0;o<a.genes.length&&i===!0;o++){var s=a.genes[o],g=e[s[0]][1]-e[s[0]][0];(g<s[1]||g>s[2])&&(i=!1)}i&&t.push(a)}return t},r}]);var game=angular.module("bloqhead.genetixApp");game.factory("Breeder",["$filter","TraitInspector",function(e,t){function n(e,t){for(var n=Math.random(),r=angular.copy(n<=l.crossoverrate?e:t),a=r[2]/255,i="",o="",s=0;s<8;s++)i+=Math.random()<a?"1":"0",o+=Math.random()<a?"1":"0";r[0],r[1];return r[0]^=parseInt(i,2),r[1]^=parseInt(o,2),r}function r(e,t){return generateBitmapDataURL(s(i(e),e.length),t)}function a(e,t){return generateBitmapDataURL(s(o(e),e.length),t)}function i(e){for(var t=[],n=0;n<e.length;n++){var r=e[n][0],a=e[n][1],i=Math.abs(r-a)/255;r>a?a=0:r=0,r*=i,a*=i,t.push([r,a,0])}return t}function o(e){for(var t=[],n=0;n<e.length;n++)t.push([0,0,e[n][2]]);return t}function s(e,t){for(var n=[],r=0;r<e.length/t;r++){for(var a=[],i=0;i<t;i++)a.push(e[i+r*t]);n.push(a)}return n}var g=function(e){this.traitInspector=new t,this.update(e),this.setRandomName()};g.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.generation=e.generation||this.generation||0,this.scale=e.scale||this.scale||6,this.genes=e.genes||this.genes||[],this.redGreenImage=r(this.genes,this.scale),this.blueImage=a(this.genes,this.scale),this.traits=this.traitInspector.getTraits(this.genes)},g.prototype.breed=function(e,t){for(var r=this,a=e,i=new g({id:t,generation:r.generation+1,genes:[]}),o=0;o<r.genes.length;o++){var s=r.genes[o],l=a.genes[o];i.genes.push(n(s,l))}return i.update({scale:6}),i},g.prototype.getTraits=function(){return this.traits},g.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},g.prototype.setRandomName=function(){this.name=this.getRandomName()},g.prototype.getRandomName=function(){if(!this.genes||0==this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?d[randomIntFromInterval(0,d.length-1)]:c[randomIntFromInterval(0,c.length-1)],t=u[randomIntFromInterval(0,u.length-1)]+m[randomIntFromInterval(0,m.length-1)]+p[randomIntFromInterval(0,p.length-1)];return e+t};var l={crossoverrate:.5},d=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],c=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],u=["","","","","","Van ","Von ","O'","Mc","Mc"],m=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],p=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return g}]),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<h4>{{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}"><div style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td>R <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> G <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> B <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div>')}])}(),function(e){e(function(){e("body").tooltip({selector:"[rel=tooltip]"})})}(jQuery),angular.module("bloqhead.genetixApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/");var r=[];r.push({name:"home",url:"/",templateUrl:"components/home.html"}),r.push({name:"home.main",url:"genetix",component:"bloqhead.components.mainGame"}),r.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),r.forEach(function(t){e.state(t)}),n.html5Mode(!0)}]).run(["gameService",function(e){e.init()}]),function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,r,a,i=e.length,o=i?e[0].length:0,s="",g=[];t>0;t--)s+="\0";for(n=0;n<i;n++){for(r=0;r<o;r++)a=e[n][r],g.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));g.push(s)}return g.join("")}function n(e,t){var n,r,a,i=e.length,o=parseInt(i*t),s=i?e[0].length:0,g=parseInt(s*t),l=[];for(a=0;a<o;a++)for(l.push(n=[]),r=0;r<g;r++)n.push(e[parseInt(a/t)][parseInt(r/t)]);return l}window.generateBitmapDataURL=function(r,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(r=n(r,a));var i,o=r.length,s=o?r[0].length:0,g=(4-3*s%4)%4,l=(3*s+g)*o,d=54+l;return o=e(o,4),s=e(s,4),l=e(l,4),d=e(d,4),i="BM"+d+"\0\0\0\x006\0\0\0(\0\0\0"+s+o+"\0\0\0\0\0\0"+l+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(r,g),"data:image/bmp;base64,"+btoa(i)}}(),function(e,t,n){function r(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?i=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?i=function(e){e=e.substring(1);var t=0,n=e.length,r=[];if(3==n)for(;t<n;t++)r.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)r.push(parseInt("0x"+e.substring(t,t+2)));return r}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(i===n&&r(a),i(a))}var i;e.generateLowResBitmap=function(n){n=n||10;for(var r,i,o,s,g,l=50,d=49,c=[];d>=0;d--)for(c.push(i=[]),r=0;r<l;r++)i.push(a(r+"_"+d));return s=t.createElement("img"),g=e.generateBitmapDataURL(c,n),s.src=g,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",o=t.getElementById("img"),null===o&&(o=t.createElement("div"),o.id="img",t.getElementById("wrap").appendChild(o)),o.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',o.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},o.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<i class="fa fa-leaf"></i><span ng-bind="$ctrl.helloText"></span><div class="row"><div class="col-xs-12"><fieldset><legend>Parents</legend><span class="col-xs-2" ng-repeat="digger in $ctrl.diggers"><img class="img-responsive" ng-src="{{digger.redGreenImage}}"><img class="img-responsive" ng-src="{{digger.blueImage}}"><ul class="list-group"><li class="list-group-item">Generation: <span ng-bind="digger.generation"></span></li><li ng-repeat="trait in digger.getTraits()" class="list-group-item" ng-bind="trait.name"></li><li ng-if="digger.getTraits().length == 0" class="list-group-item">No Traits</li></ul></span></fieldset></div></div><div class="row"><div class="col-xs-12"><fieldset><legend>Offspring</legend><span class="col-xs-4"><div ng-repeat="digger in $ctrl.diggerOffspring"><div class="col-xs-6"><img class="img-responsive" ng-src="{{digger.redGreenImage}}"></div><div class="col-xs-6"><img class="img-responsive" ng-src="{{digger.blueImage}}"></div></div></span></fieldset></div></div><div class="row">&nbsp;</div><div class="row"><div class="col-xs-12"><fieldset><legend>Ancestors</legend><div class="col-xs-4"><div ng-repeat="ancestors in $ctrl.diggerAncestors"><div class="col-xs-6"><img class="img-responsive" ng-src="{{ancestors[0].redGreenImage}}"></div><div class="col-xs-6"><img class="img-responsive" ng-src="{{ancestors[1].redGreenImage}}"></div></div></div></fieldset></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<ul class="nav nav-pills"><li><a ui-sref="home.main">Main</a></li><li><a ui-sref="home.test">Test Interface</a></li></ul><game-control></game-control><div ui-view=""></div>')}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
