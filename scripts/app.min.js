function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,r,a,i=e.length,o=i?e[0].length:0,s="",l=[];t>0;t--)s+="\0";for(n=0;n<i;n++){for(r=0;r<o;r++)a=e[n][r],l.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));l.push(s)}return l.join("")}function n(e,t){var n,r,a,i=e.length,o=parseInt(i*t),s=i?e[0].length:0,l=parseInt(s*t),d=[];for(a=0;a<o;a++)for(d.push(n=[]),r=0;r<l;r++)n.push(e[parseInt(a/t)][parseInt(r/t)]);return d}window.generateBitmapDataURL=function(r,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(r=n(r,a));var i,o=r.length,s=o?r[0].length:0,l=(4-3*s%4)%4,d=(3*s+l)*o,c=54+d;return o=e(o,4),s=e(s,4),d=e(d,4),c=e(c,4),i="BM"+c+"\0\0\0\x006\0\0\0(\0\0\0"+s+o+"\0\0\0\0\0\0"+d+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(r,l),"data:image/bmp;base64,"+btoa(i)}}(),function(e,t,n){function r(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?i=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?i=function(e){e=e.substring(1);var t=0,n=e.length,r=[];if(3==n)for(;t<n;t++)r.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)r.push(parseInt("0x"+e.substring(t,t+2)));return r}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(i===n&&r(a),i(a))}var i;e.generateLowResBitmap=function(n){n=n||10;for(var r,i,o,s,l,d=50,c=49,u=[];c>=0;c--)for(u.push(i=[]),r=0;r<d;r++)i.push(a(r+"_"+c));return s=t.createElement("img"),l=e.generateBitmapDataURL(u,n),s.src=l,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",o=t.getElementById("img"),null===o&&(o=t.createElement("div"),o.id="img",t.getElementById("wrap").appendChild(o)),o.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',o.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},o.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),angular.module("bloqhead.genetixApp",["ui.router","lz-string","ui.bootstrap"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$uibTooltipProvider",function(e,t,n,r){t.otherwise("/main");var a=[];a.push({name:"home",url:"/",component:"bloqhead.components.home"}),a.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),a.push({name:"home.achievements",url:"achievements",component:"bloqhead.components.achievementsUI"}),a.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),a.forEach(function(t){e.state(t)}),r.options({appendToBody:!0,placement:"top-left",popupCloseDelay:250,popupDelay:250})}]).run(["gameService",function(e){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.achievementsUI",{templateUrl:"components/achievements/achievements.html",controller:"bloqhead.controllers.achievementsUI",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.achievementsUI",function(){var e=this;e.$onInit=function(){}});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBuildingList",{templateUrl:"components/buildingList/buildingList.html",controller:"bloqhead.controllers.buildingList"}),game.controller("bloqhead.controllers.buildingList",["$scope","buildingService","$sce",function(e,t,n){var r=this;r.$onInit=function(){r.buildings=[],t.SubscribeBuildingsChangedEvent(e,r.updateBuildings)},r.updateBuildings=function(e,t){r.buildings=t;for(var a=0;a<t.length;a++)t[a].tooltip=n.trustAsHtml(r.getCostTooltip(t[a].costToBuild));console.log(t)},r.getCostTooltip=function(e){for(var t='\'<ul class="list-group">',n=0;n<e.length;n++)t+='<li class="list-group-item"><span>'+e[n].amount+"</span> <span>"+e[n].resource+"</span></li>";return t+="</ul>'"}}]);var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],r=0;r<e.length;r++)e[r].hasTrait(t)&&n.push(e[r]);return n}}),game.factory("Breeder",["$filter","TraitInspector",function(e,t){function n(e,t,n){var r=Math.random(),a=n/255,i=angular.copy(r<=s.crossoverrate?e:t);i[0]/=a,i[1]/=a;for(var o=i[2]/255,l="",d="",c=0;c<8;c++)l+=Math.random()<o?"1":"0",d+=Math.random()<o?"1":"0";i[0],i[1];return i[0]^=parseInt(l,2),i[1]^=parseInt(d,2),i[0]*=a,i[1]*=a,i}function r(e,t){return generateBitmapDataURL(i(a(e,t),e.length),20)}function a(e,t){for(var n=[],r=1+t/50,a=205/t,i=0;i<e.length;i++){var o=e[i][0],s=e[i][1],l=Math.abs(o-s)*a;o>s?(o=l,o*=r,s=0):(o=0,s=l,s*=r),o>255&&(o=255),s>255&&(s=255),n.push([o,s,0])}return n}function i(e,t){for(var n=[],r=0;r<e.length/t;r++){for(var a=[],i=0;i<t;i++)a.push(e[i+r*t]);n.push(a)}return n}var o=function(e){this.traitInspector=new t,this.update(e)};o.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.mother=e.mother||this.mother||null,this.father=e.father||this.father||null,this.generation=e.generation||this.generation||0,this.genes=e.genes||this.genes||[],this.breederGeneCap=e.breederGeneCap||this.breederGeneCap||25,this.redGreenImage=r(this.genes,this.breederGeneCap),this.traits=this.traitInspector.getTraits(this.genes),this.attributes=this.traitInspector.getAttributes(this.genes),this.name=this.name&&"Unknown Gender"!==this.name?this.name:e.name||this.getRandomName()},o.prototype.breed=function(e,t){for(var r=this,a=e,i=this.hasTrait("Male")?"Male":"Female",s=new o({id:t,generation:r.generation+1,genes:[],mother:"Female"==i?r:a,father:"Male"==i?r:a}),l=0;l<r.genes.length;l++){var d=r.genes[l],c=a.genes[l];s.genes.push(n(d,c,this.breederGeneCap))}return s.update(),s},o.prototype.getTraits=function(){return this.traits},o.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},o.prototype.getRandomName=function(){if(!this.genes||0===this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?l[randomIntFromInterval(0,l.length-1)]:d[randomIntFromInterval(0,d.length-1)],t=c[randomIntFromInterval(0,c.length-1)]+u[randomIntFromInterval(0,u.length-1)]+p[randomIntFromInterval(0,p.length-1)];return e+t};var s={crossoverrate:.5},l=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],d=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],c=["","","","","","Van ","Von ","O'","Mc","Mc"],u=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],p=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return o}]);var game=angular.module("bloqhead.genetixApp");game.factory("Population",["$filter","Breeder","geneDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){if(e=e||{},this.geneDefinitions=n,this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.breeders=e.breeders||this.breeders||[],this.breederLimit=e.breederLimit||this.breederLimit||0,this.maxSize=e.maxSize||this.maxSize||10,this.breederMutationBits=e.breederMutationBits||this.breederMutationBits||4,this.breederMutationChance=e.breederMutationChance||this.breederMutationChance||5,this.breederGenesUnlocked=e.breederGenesUnlocked||this.breederGenesUnlocked||[42],this.initialSize=e.initialSize||this.initialSize||2,e.members){this.members=[];for(var r=0;r<e.members.length;r++){var a=e.members[r],i=new t({id:a.id,mother:a.mother||null,father:a.father||null,generation:a.generation,genes:a.genes,mutationBits:a.mutationBits,name:a.name});i.update(),this.members.push(i)}}else this.members=this.members||this.createInitialPopulation(this.initialSize)},r.prototype.getState=function(){for(var e={currentGeneration:this.currentGeneration,breeders:this.breeders,breederLimit:this.breederLimit,maxSize:this.maxSize,breederMutationBits:this.breederMutationBits,breederMutationChance:this.breederMutationChance,breederGenesUnlocked:this.breederGenesUnlocked,initialSize:this.initialSize,members:[]},t=0;t<this.members.length;t++){var n=this.members[t];e.members.push({id:n.id,generation:n.generation,genes:n.genes,mutationBits:n.mutationBits,name:n.name})}return e},r.prototype.createInitialPopulation=function(e){for(var n=this,r=[],a=0;a<e;a++){for(var i=[],o=0;o<n.geneDefinitions.length;o++)i.push([0,0,0]),n.breederGenesUnlocked.indexOf(o)!==-1&&(i[o][2]=n.breederMutationChance);var s=a%2===0?255:0,l=a%2===0?0:255;i[42][0]=s,i[42][1]=l,i[42][2]=0;var d=new t({id:a,generation:0,genes:angular.copy(i),mutationBits:n.breederMutationBits});d.update(),r.push(d)}return r},r.prototype.isBreeding=function(){if(this.members.length>=this.maxSize)return!1;for(var e=!1,t=!1,n=0;n<this.breeders.length;n++){var r=this.getById(this.breeders[n]);if(r.hasTrait("Male")?e=!0:t=!0,e&&t)break}return e&&t},r.prototype.getById=function(e){return this.members.filter(function(t){return t.id===e})[0]},r.prototype.getByGeneration=function(e){return this.members.filter(function(t){return t.generation===e})},r.prototype.breed=function(){var e=this;if(!e.isBreeding())return null;var t=e.getById(e.breeders[0]),n=e.getById(e.breeders[1]),r=t.breed(n,e.members.length);return e.members.push(r),r},r}]);var game=angular.module("bloqhead.genetixApp");game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var r=function(e){this.update(e)};r.prototype.update=function(e){"undefined"==typeof e&&(e={})},r.prototype.getTraits=function(e){var t=[],r=s(n);if(e.length)for(var a=0;a<r.length;a++){for(var i=r[a],o=!0,l=0;l<i.genes.length&&o===!0;l++){var d=i.genes[l],c=e[d[0]][1]-e[d[0]][0];(c<d[1]||c>d[2])&&(o=!1)}o&&t.push(i)}return t},r.prototype.getAttributes=function(e){var t={STR:0,INT:0,END:0,CHR:0,LCK:0};if(e.length){for(var n=0,r=0,a=0,i=0,o=0,s=0;s<e.length;s++)s<10?n+=e[s][1]-e[s][0]:s<20?r+=e[s][1]-e[s][0]:s<30?a+=e[s][1]-e[s][0]:s<40?i+=e[s][1]-e[s][0]:o+=e[s][1]-e[s][0];t.STR=Math.floor(Math.sqrt((Math.abs(n)+20)/25))*(n<0?-1:1),t.INT=Math.floor(Math.sqrt((Math.abs(r)+20)/25))*(r<0?-1:1),t.END=Math.floor(Math.sqrt((Math.abs(a)+20)/25))*(a<0?-1:1),t.CHR=Math.floor(Math.sqrt((Math.abs(i)+20)/25))*(i<0?-1:1),t.LCK=Math.floor(Math.sqrt((Math.abs(o)+20)/25))*(o<0?-1:1)}return t};var a=[];traits=[];var i=function(e){return traits.filter(function(t){return e===t.name})[0]},o=function(e){if(angular.isDefined(e.requiredTraits))for(var t=0;t<e.requiredTraits.length;t++){var n=e.requiredTraits[t],r=i(n);a.indexOf(r.name)===-1&&o(r);for(var s=0;s<r.genes.length;s++)e.genes.push(r.genes[s])}a.push(e.name)},s=function(e){a=[],traits=e;for(var t=0;t<traits.length;t++){var n=traits[t];o(n)}return traits};return r}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div><button title="Hard Reset" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.resetSave();"><i class="fa fa-recycle"></i></button><button title="Play/Pause" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["$scope","gameService","gameLoopService","gameStates",function(e,t,n,r){var a=this;a.$onInit=function(){a.currentState=n.getState().currentState},a.toggleState=function(){a.currentState=a.currentState===r.RUNNING?r.PAUSED:r.RUNNING,n.setState(a.currentState)},a.getIcon=function(){return a.currentState===r.RUNNING?"fa-pause":"fa-play"},a.resetSave=function(){t.hardReset()}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log"}),game.controller("bloqhead.controllers.log",["$scope","logService","logTypes",function(e,t,n){var r=this;r.$onInit=function(){r.messages=[],t.SubscribeNewMessageEvent(e,r.receiveMessages)},r.getLogClass=function(e){var t="list-group-item-",r="";switch(e){case n.GENERAL:r="color-general";break;case n.ACHIEVEMENT:r="color-achievement";break;case n.BREED:r="color-breed";break;default:r=t+"none"}return r},r.receiveMessages=function(e,t){r.messages=t,$(".log-component")[0].scrollTop=$(".log-component")[0].scrollHeight}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this;n.init=function(e){e&&(n.messages=[],n.logGeneralMessage("Welcome to Genetix!"))},n.logGeneralMessage=function(r){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(r){n.messages.push({type:t.BREED,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(r){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,r){var a=e.$on("newMessageEvent",r.bind(this));t.$on("$destroy",a),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.home",{templateUrl:"components/home.html",controller:"bloqhead.controllers.home"}),game.controller("bloqhead.controllers.home",function(){this.$onInit=function(){}}),game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","populationService","achievementService","resourceService",function(e,t,n,r){var a=this;a.$onInit=function(){a.breeders=[],a.population=[],a.maxPopulation=0,a.maxBreeders=0,t.SubscribePopulationUpdateEvent(e,a.updatePopulation),t.SubscribeBreederUpdateEvent(e,a.updateBreeders),n.SubscribeNewRewardEvent(e,a.rewardEarned)},a.rewardEarned=function(e,t){console.log(t)},a.updateGene=function(e,n,r){t.updateMember(e,n,r)},a.addBreeder=function(e){t.addBreeder(e)},a.removeBreeder=function(e){t.removeBreeder(e)},a.updateBreeders=function(e,t){a.breeders=t.breeders,a.isBreeding=t.isBreeding,a.stepsSinceBreed=t.stepsSinceBreed,a.breedSteps=t.breedSteps},a.updatePopulation=function(e,t){a.population=t.population,a.maxPopulation=t.maxSize,a.breederLimit=t.breederLimit}}]),game.component("bloqheadBreeder",{templateUrl:"components/mainGame/breeder.html",controller:"bloqheader.controllers.breeder",bindings:{unit:"<",allowAssign:"<",canBreed:"<",assign:"&"}}),game.controller("bloqheader.controllers.breeder",function(){var e=this;e.$onInit=function(){e.allowAssign=!angular.isDefined(e.allowAssign)||e.allowAssign},e.assignMe=function(){e.assign({$id:e.unit.id})}});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:!0,require:{mainCtrl:"^bloqhead.components.home"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit}});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadResourceList",{templateUrl:"components/resourceList/resourceList.html",controller:"bloqhead.controllers.resourceList"}),game.controller("bloqhead.controllers.resourceList",["$scope","resourceService","resourceTypes",function(e,t,n){var r=this;r.resourceTypes=n,r.resources={},r.$onInit=function(){t.SubscribeResourceChangedEvent(e,r.resourceChanged),t.SubscribeResourceLimitChangedEvent(e,r.resourceLimitChanged),t.SubscribeResourceEnabledEvent(e,r.resourceEnabled),r.resources=t.getResourcesSnapshot()},r.getUnlockedResources=function(){var e={};for(var t in r.resources)r.resources.hasOwnProperty(t)&&r.resources[t][2]===!0&&(e[t]=r.resources[t]);return e},r.resourceChanged=function(e,t,n){r.resources[t]||(r.resources[t]=[]),r.resources[t][0]=n},r.resourceLimitChanged=function(e,t,n){r.resources[t]||(r.resources[t]=[]),r.resources[t][1]=n},r.resourceEnabled=function(e,t,n){r.resources[t][2]=n}}]);var game=angular.module("bloqhead.genetixApp");game.service("achievementService",["$rootScope","$filter","achievementSetup","logService","geneDefinitions","resourceTypes",function(e,t,n,r,a,i){var o=this;o.init=function(e){o.state=e||{},o.achievementSetup=n||{},o.state.hasOwnProperty("progress")||(o.state={progress:{achievements:[],perks:[]}})},o.getState=function(){return o.state},o.updateProgress=function(t,n){var a=o.state.progress.achievements[t],i=o.achievementSetup.achievements[t];a||(a={aid:t,amount:0},o.state.progress.achievements[t]=a);var s=a.amount,l=s;if(i.cumulative===!0?n>s&&(l=n):n>0&&(l=a.amount+n),a.amount=l,s!=l)for(var d=0;d<i.ranks.length;d++){var c=i.ranks[d][0];if(c>s&&c<=l){var u="Achievement Earned - "+i.name+" ("+c+")",p={achievement:i,amountRequired:c,msg:u,perks:[]};r.logAchievementMessage(u);for(var g=0;g<i.ranks[d][1].length;g++){var m=o.applyPerk(i.ranks[d][1][g]);null!==m&&p.perks.push(m)}e.$emit("newRewardEvent",p)}}},o.applyPerk=function(e){var s=e[0],l=n.perks[s];if(l.once){var d=t("filter")(o.state.progress.perks,{pid:s});if(0!==d.length)return null}var c=l.name+" - "+l.desc;switch(l.pid){case"P_G_ENHANCED":var u=a[e[1]];c=c.replace("[%dom]",u.dom),c=c.replace("[%rec]",u.rec),c=c.replace("[%attr]",u.attr[0]),c=c.replace("[%amt]",e[2]);break;case"P_R_BONUS":case"P_R_MULTIPLIER":c=c.replace("[%1]",i[e[1]].name),c=c.replace("[%2]",e[2]);break;default:for(var p=1;p<e.length;p++)c=c.replace("[%"+p+"]",e[p])}r.logAchievementMessage(c);var g={pid:s,msg:c,arr:e,dt:(new Date).toUTCString()};return o.state.progress.perks.push(g),g},o.SubscribeNewRewardEvent=function(t,n){var r=e.$on("newRewardEvent",n.bind(this));t.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.service("buildingService",["$rootScope","defaultBuildings","resourceTypes","resourceService","populationService",function(e,t,n,r,a){var i,o,s=this;s.init=function(n){i=angular.merge({},i,n),i.buildings=angular.merge({},t,i.buildings),s.updateStorage(),s.updateBreeders(),s.updateHousing(),r.SubscribeResourceChangedEvent(e,p),s.getBuildingSnapshot()},s.getState=function(){return i},s.getBuildingSnapshot=function(){var t=[];for(var n in i.buildings)if(i.buildings.hasOwnProperty(n)){var r=i.buildings[n];if(r.unlocked){var a=c(r),s=d(r);t.push({name:r.name,description:l(r,s),size:s,owned:r.purchased+r.gifted,costToBuild:a,canBuild:u(r,a)})}}return angular.equals(o,t)||e.$emit("buildingsChangedEvent",angular.copy(t)),o=t,angular.copy(t)},s.updateBreeders=function(){var e=0,t=i.breedingSizeMultiplier||1;for(var n in i.buildings)if(i.buildings.hasOwnProperty(n)){var r=i.buildings[n];if("breeding"===r.use){var o=r.sizeMultiplier||1;e+=Math.floor(r.size*o)}}e*=t,a.setBreederLimit(Math.floor(e))},s.updateStorage=function(){var e=i.storageSizeMultiplier||1,t=r.getResourcesSnapshot(),n=[];for(var a in i.buildings)if(i.buildings.hasOwnProperty(a)){var o=i.buildings[a];if("storage"===o.use){n.push(o.stores);var s=o.multiplier||1;t[o.stores].newAmount=t[o.stores].newAmount||0,t[o.stores].newAmount+=Math.floor(o.size*s)}}n.filter(function(n){t[n].newAmount=Math.floor(t[n].newAmount*e),t[n][1]!=t[n].newAmount&&r.setResourceLimit(n,t[n].newAmount)})},s.updateHousing=function(){var e=i.housingSizeMultiplier||1,t=0;for(var n in i.buildings)if(i.buildings.hasOwnProperty(n)){var r=i.buildings[n];if("housing"===r.use){var o=r.multiplier||1;t+=Math.floor(r.size*o)}}a.setPopulationLimit(Math.floor(t*e))},s.SubscribeBuildingsChangedEvent=function(t,n){var r=e.$on("buildingsChangedEvent",n.bind(this));t&&t.$on("$destroy",r),e.$emit("buildingsChangedEvent",s.getBuildingSnapshot())};var l=function(e,t){var n=e.description;return n.indexOf("{size}")!==-1&&(n=n.replace(/{size}/g,t)),n},d=function(e){var t=e.size*(e.multiplier||1);return"breeding"===e.use&&(t*=i.breedingSizeMultiplier||1),"storage"===e.use&&(t*=i.storageSizeMultiplier||1),"housing"===e.use&&(t*=i.housingSizeMultiplier||1),t},c=function(e){for(var t=[],r=0;r<e.baseCost.length;r++){var a=e.baseCost[r],i=a.amount*Math.pow(a.costMultiplier,e.purchased);t.push({resource:n[a.resource].name,resourceType:a.resource,amount:i})}return t},u=function(e,t){for(var n=r.getResourcesSnapshot(),a=0;a<t.length;a++){var i=n[t[a].resourceType];if(i[0]<t[a].amount)return!1}return!0},p=function(e,t,n){s.getBuildingSnapshot()}}]);var game=angular.module("bloqhead.genetixApp");game.service("gameLoopService",["$window","$rootScope","gameStates","logService",function(e,t,n,r){var a=this;a.initialized=!1,a.init=function(e){e=e||{},a.stepTimeMs=e.stepTimeMs||a.stepTimeMs||1e3,a.lastTime=0,a.currentState=n.PAUSED,a.initialized||(a.initialized=!0,a.gameLoop(0)),a.currentState=e.currentState||a.currentState||n.RUNNING},a.getState=function(){return{stepTimeMs:a.stepTimeMs,currentState:a.currentState}},a.setState=function(e){a.currentState=e,e===n.PAUSED?r.logGeneralMessage("Game paused."):r.logGeneralMessage("Game resumed.")},a.gameLoop=function(r){for(var a=this,i=0;a.lastTime+r>a.stepTimeMs*(i+1);)i++;a.lastTime=a.lastTime-a.stepTimeMs*i,a.currentState==n.RUNNING&&i>0&&t.$apply(t.$emit("gameLoopEvent",i)),e.requestAnimationFrame(this.gameLoop.bind(this))},a.SubscribeGameLoopEvent=function(e,n){var r=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",r)}}]),game.service("gameService",["$rootScope","gameSaveKey","defaultState","logService","gameLoopService","populationService","achievementService","resourceService","buildingService","LZString","traitDefinitions",function(e,t,n,r,a,i,o,s,l,d,c){var u=this;u.init=function(e){var r=d.decompressFromBase64(localStorage.getItem(t)),a=r?angular.fromJson(r):void 0;u.gameState=e||a||n,u.autoSaveSteps=u.gameState.autoSaveSteps||u.autoSaveSteps||10,u.startGame(),u.stepsSinceSave=0},u.startGame=function(){r.init(u.gameState.clearLog),i.init(angular.merge({},n.populationServiceState,u.gameState.populationServiceState)),s.init(angular.merge({},n.resourceServiceState,u.gameState.resourceServiceState)),o.init(angular.merge({},n.achievementServiceState,u.gameState.achievementServiceState)),l.init(angular.merge({},n.buildingServiceState,u.gameState.buildingServiceState)),a.init(angular.merge({},n.gameLoopServiceState,u.gameState.gameLoopServiceState))},u.hardReset=function(){localStorage.removeItem(t),u.init()},a.SubscribeGameLoopEvent(e,function(e,n){u.stepsSinceSave+=n;var c=s.getResource("DIRT");if(c>=13?s.changeResource("DIRT",-c):s.changeResource("DIRT",1),u.stepsSinceSave>u.autoSaveSteps){var p=angular.copy(u.gameState);p.populationServiceState=angular.copy(i.getState()),p.resourceServiceState=angular.copy(s.getState()),p.achievementServiceState=angular.copy(o.getState()),p.buildingServiceState=angular.copy(l.getState()),p.gameLoopServiceState=angular.copy(a.getState());var g=d.compressToBase64(angular.toJson(angular.copy(p)));localStorage.setItem(t,g),r.logGeneralMessage("Game autosaved."),u.stepsSinceSave=0}})}]);var game=angular.module("bloqhead.genetixApp");game.service("populationService",["$rootScope","gameLoopService","Population","logService","achievementService",function(e,t,n,r,a){var i=this;i.init=function(e){e=e||{},i.breedSteps=e.breedSteps||e.breedSteps||6,i.stepsSinceBreed=e.stepsSinceBreed||i.stepsSinceBreed||0,i.populationState=e.populationState||i.populationState,i.population=i.populationState?new n(i.populationState):i.population||new n,i.logService=r,i.sendBreederUpdateEvent(),i.sendPopulationUpdateEvent()},i.getState=function(){var e={breedSteps:i.breedSteps,stepsSinceBreed:i.stepsSinceBreed};return e.populationState=i.population.getState(),e},i.handleGameLoop=function(e,t){var n=!1;if("gameLoopEvent"!==e.name)return void console.error("populateService.handleGameLoop - Invalid event: "+e);if(i.population.isBreeding()){for(i.stepsSinceBreed+=t;i.stepsSinceBreed>=i.breedSteps;){i.stepsSinceBreed-=i.breedSteps;var o=i.population.breed();null!==o&&(r.logBreedMessage("New offspring! "+o.name),a.updateProgress("A_BIRTHS",1),n=!0)}i.sendBreederUpdateEvent(),n&&i.sendPopulationUpdateEvent()}},i.addBreeder=function(e){i.population.breeders.indexOf(e)===-1&&i.population.breeders.length<i.population.breederLimit&&(i.population.breeders.push(e),i.sendBreederUpdateEvent(),i.logService.logBreedMessage("Breeder added: "+i.population.getById(e).name))},i.removeBreeder=function(e){var t=i.population.breeders.indexOf(e);t!==-1&&(i.population.breeders.splice(t,1),i.population.isBreeding()||(i.stepsSinceBreed=0),i.sendBreederUpdateEvent(),i.logService.logBreedMessage("Breeder removed: "+i.population.getById(e).name))},i.updateMember=function(e,t,n){var r=i.population.getById(e);r.genes[t]=n,r.update(),i.sendPopulationUpdateEvent()},i.setBreederLimit=function(e){i.population.breederLimit=e,i.sendPopulationUpdateEvent()},i.setPopulationLimit=function(e){i.population.maxSize=e,i.sendPopulationUpdateEvent()},i.sendBreederUpdateEvent=function(){e.$emit("breederUpdateEvent",{breeders:i.population.breeders,isBreeding:i.population.isBreeding(),stepsSinceBreed:i.stepsSinceBreed,breedSteps:i.breedSteps})},i.sendPopulationUpdateEvent=function(){e.$emit("populationUpdateEvent",{population:i.population.members,maxSize:i.population.maxSize,breederLimit:i.population.breederLimit})},i.SubscribeBreederUpdateEvent=function(t,n){var r=e.$on("breederUpdateEvent",n);t.$on("$destroy",r),i.sendBreederUpdateEvent()},i.SubscribePopulationUpdateEvent=function(t,n){var r=e.$on("populationUpdateEvent",n.bind(this));t.$on("$destroy",r),i.sendPopulationUpdateEvent()},t.SubscribeGameLoopEvent(e,i.handleGameLoop)}]);var game=angular.module("bloqhead.genetixApp");game.service("resourceService",["$rootScope","$filter","logService","geneDefinitions","resourceTypes","achievementService",function(e,t,n,r,a,i){var o=this,s=!1;o.init=function(t){null!==t&&(o.state=t),s||i.SubscribeNewRewardEvent(e,o.rewardEarned),s=!0;var n=!1,r={DIRT:[0,0,!0],BRICKS:[0,0,n],WATER:[0,0,n],WOOD:[0,0,n],GOLD:[0,0,n],HAPPINESS:[0,-1,n],SCIENCE:[0,-1,n],STEEL:[0,0,n],EVOCOIN:[0,-1,n]};for(var l in a)if(a.hasOwnProperty(l)){var d=o.state.resources[l];"undefined"==typeof d&&(d=r[l]||[0,911,n],o.state.resources[l]=d),e.$emit("resourceChangedEvent",l,d[0]),e.$emit("resourceLimitChangedEvent",l,d[1]),e.$emit("resourceEnabledEvent",l,d[2])}},o.getState=function(){return o.state},o.rewardEarned=function(t,n){for(var r=0;r<n.perks.length;r++){var a=n.perks[r];"P_R_BONUS"===a.pid&&o.changeResource(a.arr[1],a.arr[2]),"P_M_HAPPINESS"===a.pid&&(o.state.resources.HAPPINESS[2]=!0,e.$emit("resourceEnabledEvent","HAPPINESS",!0))}},o.getResourcesSnapshot=function(){return angular.copy(o.state.resources)},o.getResource=function(e){return o.state.resources[e][0]},o.changeResource=function(t,n){var r=o.state.resources[t];return r[2]===!1&&r[1]!==-1?void console.error(t+" is not enabled, cannot increase amount."):(r[0]+=n,r[1]!=-1&&r[0]>r[1]&&(r[0]=r[1]),r[0]<0&&(r[0]=0),n>0&&i.updateProgress("A_"+t+"_E",n),n<0&&i.updateProgress("A_"+t+"_S",-n),i.updateProgress("A_"+t+"_C",r[0]),r[2]===!1&&(e.$emit("resourceEnabledEvent",t,!0),r[2]=!0),e.$emit("resourceChangedEvent",t,r[0],o.getResourcesSnapshot()),r[0])},o.setResourceLimit=function(t,n){var r=o.state.resources[t];return r[1]===-1?void console.error("Cannot set resource limit on: "+t):(r[1]=n,r[2]===!1&&n>0&&(r[2]=!0,e.$emit("resourceEnabledEvent",t,!0)),void e.$emit("resourceLimitChangedEvent",t,r[1]))},o.SubscribeResourceChangedEvent=function(t,n){var r=e.$on("resourceChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceLimitChangedEvent=function(t,n){var r=e.$on("resourceLimitChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceEnabledEvent=function(t,n){var r=e.$on("resourceEnabledEvent",n.bind(this));t&&t.$on("$destroy",r)}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){var r=this;r.lastBreederID=0,r.newBreederGender="Male",r.killBreeder=function(e){r.units.splice(r.units.indexOf(e),1)},r.addNewBreeder=function(){for(var n=[],a=0;a<t.length;a++)n.push([0,0,0]);var i="Male"==r.newBreederGender?255:0;n[42]=[i,255-i,0];var o=new e({id:r.lastBreederID++,generation:0,scale:6,genes:n});o.update(),r.units.unshift(o)}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("genomeEditor",{bindings:{unit:"="},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e,t.expando=!1},t.randomizeName=function(){t.unit.name=t.unit.getRandomName()},t.randomize=function(e){t.unit.genes[e]=[randomIntFromInterval(0,255),randomIntFromInterval(0,255),randomIntFromInterval(0,255)]},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0===randomIntFromInterval(0,1)?255:0;t.unit.genes[42]=[n,255-n,0],t.unit.update()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,r,a,i){var o=this;o.$onInit=function(){o.geneDefinitions=a,o.traitDefinitions=i,o.units=[]}}]),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<div class="row"><div class="col-xs-12 col-md-6 col-lg-4"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Log"><bloqhead-log></bloqhead-log></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Resources"><bloqhead-resource-list></bloqhead-resource-list></bloqhead-player-box></div></div></div><div class="col-xs-12 col-md-6 col-lg-8"><div ui-view=""></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/achievements/achievements.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Achievements"><div class="row breeder-container"><div ng-repeat="child in $ctrl.population" class="col-xs-12 col-sm-8 col-md-6 col-lg-4"><bloqhead-breeder unit="child" assign="$ctrl.addBreeder($id)"></bloqhead-breeder></div></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/buildingList/buildingList.html",'<div class="col-xs-12" title=""><div class="row"><div class="col-xs-5">Building</div><div class="col-xs-2">Owned</div></div><div class="row" ng-repeat="building in $ctrl.buildings" style="padding-bottom: 5px"><div class="col-xs-5"><h5 uib-tooltip="{{building.description}}">{{building.name}}</h5></div><div class="col-xs-2"><h5 ng-bind="building.owned"></h5></div><div class="col-xs-4"><div style="display: inline-block" tooltip-placement="top" uib-tooltip-template="\'resourceTooltip.html\'"><button ng-disabled="!building.canBuild" ng-if="building.costToBuild.length > 0" class="btn btn-sm btn-primary">Build</button></div></div></div><script type="text/ng-template" id="resourceTooltip.html"><div>\n            <h5>Requires</h5>\n            <div ng-repeat="cost in building.costToBuild"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></div>\n        </div></script></div>');
}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/breeder.html",'<div class="bloqhead-component"><h5>{{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-container="body" data-toggle="tooltip" rel="tooltip" data-placement="top" title="{{trait.name}}"></i></h5><table class="genomeEditor"><thead><tr><th colspan="5"><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}"></th></tr><tr><th style="width: 20%">STR</th><th style="width: 20%">INT</th><th style="width: 20%">END</th><th style="width: 20%">CHR</th><th style="width: 20%">LCK</th></tr></thead><tbody><tr><td><span ng-bind="$ctrl.unit.attributes.STR"></span></td><td><span ng-bind="$ctrl.unit.attributes.INT"></span></td><td><span ng-bind="$ctrl.unit.attributes.END"></span></td><td><span ng-bind="$ctrl.unit.attributes.CHR"></span></td><td><span ng-bind="$ctrl.unit.attributes.LCK"></span></td></tr></tbody></table><div ng-show="$ctrl.allowAssign"><button ng-disabled="!$ctrl.canBreed" class="btn btn-sm btn-primary" ng-click="$ctrl.assignMe() ">Breed Me</button><div class="btn-group" role="menu" data-container="body"><button class="btn btn-sm btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Work <span class="caret"></span></button><ul class="dropdown-menu"><li ng-repeat="job in [\'Dig\', \'Farm\', \'Chop\', \'Build\']"><a ng-bind="job"></a></li></ul></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Population [{{$ctrl.population.length}} / {{$ctrl.maxPopulation}}] ---FILTERS HERE???----"><div class="row breeder-container"><div ng-repeat="child in $ctrl.population" class="col-xs-12 col-sm-8 col-md-6 col-lg-4"><bloqhead-breeder can-breed="$ctrl.breeders.length < $ctrl.breederLimit" unit="child" assign="$ctrl.addBreeder($id)"></bloqhead-breeder></div></div></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12 col-sm-10 col-md-6 col-lg-4"><bloqhead-player-box title="Buildings"><bloqhead-building-list></bloqhead-building-list></bloqhead-player-box></div><div class="col-xs-12 col-sm-10 col-md-6 col-lg-4"><bloqhead-player-box title="Breeders [{{$ctrl.breeders.length}} / {{$ctrl.breederLimit}}]"><div class="row"><div class="col-xs-12 col-lg-12"><div class="progress"><div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.stepsSinceBreed}}" aria-valuemin="0" aria-valuemax="{{$ctrl.breedSteps}}}" ng-style="{width: (100*($ctrl.stepsSinceBreed/$ctrl.breedSteps)) + \'%\'}"><span ng-bind="$ctrl.stepsSinceBreed + \' / \' + $ctrl.breedSteps"></span><i class="fa fa-cog" ng-class="$ctrl.isBreeding == true ? \'fa-spin\' : \'\'"></i></div></div></div></div><div class="row breeder-container"><div ng-repeat="breederid in $ctrl.breeders" class="col-xs-12 col-lg-12"><button type="button" class="close" ng-click="$ctrl.removeBreeder(breederid)"><span>&times;</span></button><bloqhead-breeder unit="$ctrl.population[breederid]" allow-assign="false"></bloqhead-breeder></div></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" ng-bind="$ctrl.title"></h3></div><div class="panel-body"><ng-transclude></ng-transclude></div><div ng-if="angular.isDefined($ctrl.footer)" class="panel-footer"><span ng-bind="$ctrl.footer"></span></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/resourceList/resourceList.html",'<div class="resource-list col-xs-12"><div class="row" ng-repeat="(key, value) in $ctrl.resources" ng-if="value[2] === true" data-attr="{{$ctrl.resourceTypes[key].attr}}"><div class="col-xs-12 col-sm-2"><h5 uib-tooltip="{{$ctrl.resourceTypes[key].desc}}">{{$ctrl.resourceTypes[key].name}}</h5></div><div class="col-xs-12 col-sm-10"><div class="progress"><div class="progress-bar" role="progressbar" aria-valuenow="{{value[0]}}" aria-valuemin="0" aria-valuemax="{{value[1]}}" ng-style="{width: (100*(value[0]/value[1])) + \'%\'}"><span ng-bind="value[0] + \' / \' + value[1]"></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor unit="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div class="col-xs-12"><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div></div></div>')}])}(),angular.module("bloqhead.genetixApp").constant("geneDefinitions",[{dom:"Broad Shoulders",rec:"Slender Shoulders",attr:["STR"]},{dom:"Thick Skull",rec:"Soft Skull",attr:["STR"]},{dom:"Large Arms",rec:"Small Arms",attr:["STR"]},{dom:"Large Legs",rec:"Small Legs",attr:["STR"]},{dom:"Big Chest",rec:"Weak Chest",attr:["STR"]},{dom:"Tough Jaw",rec:"Weak Jaw",attr:["STR"]},{dom:"Oafish",rec:"Mousey",attr:["STR"]},{dom:"",rec:"",attr:["STR"]},{dom:"",rec:"",attr:["STR"]},{dom:"",rec:"",attr:["STR"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"Calculated Decisions",rec:"Reckless",attr:["INT"]},{dom:"Lateral Thinker",rec:"Single Minded",attr:["INT"]},{dom:"Quick Learner",rec:"Forgetful",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["INT"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"",rec:"",attr:["END"]},{dom:"Eloquent",rec:"Catatonic",attr:["CHR"]},{dom:"Powerful Voice",rec:"Quiet Voice",attr:["CHR"]},{dom:"Full Lips",rec:"Thin Lips",attr:["CHR"]},{dom:"Dark Skin",rec:"Fair Skin",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["CHR"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"Female",rec:"Male",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]},{dom:"",rec:"",attr:["LCK"]}]).constant("traitDefinitions",[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Female",genes:[[42,0,255]]},{name:"Male",genes:[[42,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}]),angular.module("bloqhead.genetixApp").constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3}),angular.module("bloqhead.genetixApp").constant("achievementSetup",{achievementGroups:[{name:"Population",aids:["A_BIRTHS"]},{name:"Resources",aids:["A_DIRT_E","A_DIRT_C","A_DIRT_S","A_BRICKS_E","A_BRICKS_C","A_BRICKS_S","A_STEEL_E","A_STEEL_C","A_STEEL_S","A_WATER_E","A_WATER_C","A_WATER_S","A_WOOD_E","A_WOOD_C","A_WOOD_S","A_GOLD_E","A_GOLD_C","A_GOLD_S","A_SCIENCE_E","A_SCIENCE_C","A_SCIENCE_S","A_EVOCOIN_E","A_EVOCOIN_C","A_EVOCOIN_S"]}],achievements:{A_BIRTHS:{aid:"A_BIRTHS",name:"The Chosen One",desc:"Create a new unit",ranks:[[1,[["P_R_BONUS","WOOD",5],["P_R_BONUS","DIRT",20]]],[3,[["P_R_BONUS","GOLD",1],["P_M_HAPPINESS"],["P_G_ENHANCED",14,10]]]]},A_DIRT_E:{aid:"A_DIRT_E",name:"Its Dirt....",desc:"Earn dirt.",ranks:[[5,[["P_R_MULTIPLIER","HAPPINESS",.1]]],[25,[["P_R_MULTIPLIER","DIRT",.2]]]]},A_DIRT_C:{aid:"A_DIRT_C",name:"Dirt Hoarder",desc:"Aquire dirt... lots and lots of dirt!",ranks:[[10,[["P_R_MULTIPLIER","HAPPINESS",.2]]]],cumulative:!0},A_DIRT_S:{aid:"A_DIRT_S",name:"Dirt Eater",desc:"Spend dirt to do stuff",ranks:[[20,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_BRICKS_E:{aid:"A_BRICKS_E",name:"bricks",desc:"Earn bricks.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_BRICKS_C:{aid:"A_BRICKS_C",name:"Brick Hoarder",desc:"Aquire bricks... lots and lots of bricks!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_WATER_E:{aid:"A_WATER_E",name:"omnomnom",desc:"Earn water.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_WATER_C:{aid:"A_WATER_C",name:"Water Hoarder",desc:"Aquire water... lots and lots of water!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_WOOD_E:{aid:"A_WOOD_E",name:"tree guts",desc:"Earn wood.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_WOOD_C:{aid:"A_WOOD_C",name:"Wood Hoarder",desc:"Aquire wood... lots and lots of wood!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_GOLD_E:{aid:"A_GOLD_E",name:"Oooohhh Shiiiiiny",desc:"Earn gold.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_GOLD_C:{aid:"A_GOLD_C",name:"Gold Hoarder",desc:"Aquire gold... lots and lots of gold!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_HAPPINESS_E:{aid:"A_HAPPINESS_E",name:"be happy mon",desc:"Earn happiness.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_HAPPINESS_C:{aid:"A_HAPPINESS_C",name:"Happyness",desc:"Aquire happiness... lots and lots of happiness!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]}},perks:{P_M_HAPPINESS:{pid:"P_M_HAPPINESS",name:"New Mechanic: Happiness",desc:"Happiness is a representation of how content your population is.",once:!0},P_R_MULTIPLIER:{pid:"P_R_MULTIPLIER",name:"Resource Muliplier",desc:"The rate that you aquire [%1] has been increased by [%2]x."},P_R_BONUS:{pid:"P_R_BONUS",name:"Bonus Resources",desc:"[%2] [%1] has been added to your coffers."},P_G_ENHANCED:{pid:"P_G_ENHANCED",name:"Gene Enhancement",desc:"The boundary has been increased by [%amt] for one of your [%attr] genes. ([%dom]/[%rec])"}}}),angular.module("bloqhead.genetixApp").constant("defaultBuildings",{BUNGALOW:{name:"Breeding Bungalow",description:"A private bungalow where the magic happens. Due to the magic nature of this building, it cannot be built directly.",use:"breeding",size:2,baseCost:[],purchased:0,gifted:1,unlocked:1},DIRTPILE:{name:"Dirt pile",description:"Where else would you store dirt?",use:"storage",stores:"DIRT",size:25,baseCost:[{resource:"DIRT",amount:10,costMultiplier:1.25}],purchased:0,gifted:1,unlocked:1},SODHOUSE:{name:"Sod house",description:"Provides minimal shelter for {size} things.",use:"housing",size:5,baseCost:[{resource:"DIRT",amount:5,costMultiplier:1.05},{resource:"WATER",amount:5,costMultiplier:1.05}],purchased:0,gifted:1,unlocked:1},WELL:{name:"Well",description:"Used for water production.",use:"production",produces:"WATER",size:5,baseCost:[{resource:"BRICKS",amount:100,costMultiplier:1.05}],purchased:0,gifted:0,unlocked:0}}),angular.module("bloqhead.genetixApp").constant("defaultState",{clearLog:!0,autoSaveSteps:30,gameLoopServiceState:{stepTimeMs:1e3},populationServiceState:{breedSteps:6,populationState:{initialSize:2,maxSize:5,breederGeneCap:100,breederGenesUnlocked:[0,42],breederMutationChance:10}},achievementServiceState:null,resourceServiceState:{resources:{}},buildingServiceState:{buildings:{}}}).constant("gameSaveKey","GENETIX_SAVE").constant("gameStates",{PAUSED:0,RUNNING:1}),angular.module("bloqhead.genetixApp").constant("resourceTypes",{DIRT:{name:"Dirt",desc:"Used in construction and mining.",attr:"STR"},BRICKS:{name:"Bricks",desc:"Used in construction and smelting.",attr:"STR"},STEEL:{name:"Steel",desc:"Used in advanced construction.",attr:"STR"},WATER:{name:"Water",desc:"Used in construction, mining and population expansion.",attr:"END"},WOOD:{name:"Wood",desc:"Used in construction and mining.",attr:"END"},GOLD:{name:"Gold",desc:"Used for purchasing gene research technologies.",attr:"INT"},SCIENCE:{name:"Science",desc:"Used in genetic modification and advanced construction.",attr:"INT"},HAPPINESS:{name:"Happiness",desc:"Good things happen to those that are happy...",attr:"CHR"},EVOCOIN:{name:"Evo-Coins",desc:"A rare commodity indeed. Used to discover traits.",attr:"LCK"}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
