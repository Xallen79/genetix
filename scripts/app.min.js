function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,r,a,i=e.length,o=i?e[0].length:0,s="",l=[];t>0;t--)s+="\0";for(n=0;n<i;n++){for(r=0;r<o;r++)a=e[n][r],l.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));l.push(s)}return l.join("")}function n(e,t){var n,r,a,i=e.length,o=parseInt(i*t),s=i?e[0].length:0,l=parseInt(s*t),d=[];for(a=0;a<o;a++)for(d.push(n=[]),r=0;r<l;r++)n.push(e[parseInt(a/t)][parseInt(r/t)]);return d}window.generateBitmapDataURL=function(r,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(r=n(r,a));var i,o=r.length,s=o?r[0].length:0,l=(4-3*s%4)%4,d=(3*s+l)*o,c=54+d;return o=e(o,4),s=e(s,4),d=e(d,4),c=e(c,4),i="BM"+c+"\0\0\0\x006\0\0\0(\0\0\0"+s+o+"\0\0\0\0\0\0"+d+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(r,l),"data:image/bmp;base64,"+btoa(i)}}(),function(e,t,n){function r(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?i=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?i=function(e){e=e.substring(1);var t=0,n=e.length,r=[];if(3==n)for(;t<n;t++)r.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)r.push(parseInt("0x"+e.substring(t,t+2)));return r}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(i===n&&r(a),i(a))}var i;e.generateLowResBitmap=function(n){n=n||10;for(var r,i,o,s,l,d=50,c=49,u=[];c>=0;c--)for(u.push(i=[]),r=0;r<d;r++)i.push(a(r+"_"+c));return s=t.createElement("img"),l=e.generateBitmapDataURL(u,n),s.src=l,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",o=t.getElementById("img"),null===o&&(o=t.createElement("div"),o.id="img",t.getElementById("wrap").appendChild(o)),o.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',o.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},o.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),angular.module("bloqhead.genetixApp",["ui.router","lz-string","ui.bootstrap"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$uibTooltipProvider",function(e,t,n,r){t.otherwise("/main");var a=[];a.push({name:"home",url:"/",component:"bloqhead.components.home"}),a.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),a.push({name:"home.achievements",url:"achievements",component:"bloqhead.components.achievementsUI"}),a.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),a.forEach(function(t){e.state(t)}),r.options({appendToBody:!0,placement:"top-left",popupCloseDelay:250,popupDelay:250})}]).run(["gameService",function(e){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.achievementsUI",{templateUrl:"components/achievements/achievements.html",controller:"bloqhead.controllers.achievementsUI",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.achievementsUI",function(){var e=this;e.$onInit=function(){}});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBuildingList",{templateUrl:"components/buildingList/buildingList.html",controller:"bloqhead.controllers.buildingList"}),game.controller("bloqhead.controllers.buildingList",["$scope","buildingService","$sce",function(e,t,n){var r=this;r.$onInit=function(){r.buildings=[],t.SubscribeBuildingsChangedEvent(e,r.updateBuildings)},r.updateBuildings=function(e,t){r.buildings=t;for(var a=0;a<t.length;a++)t[a].tooltip=n.trustAsHtml(r.getCostTooltip(t[a].costToBuild));console.log(t)},r.getCostTooltip=function(e){for(var t='\'<ul class="list-group">',n=0;n<e.length;n++)t+='<li class="list-group-item"><span>'+e[n].amount+"</span> <span>"+e[n].resource+"</span></li>";return t+="</ul>'"}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div><button title="Hard Reset" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.resetSave();"><i class="fa fa-recycle"></i></button><button title="Play/Pause" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["$scope","gameService","gameLoopService","gameStates",function(e,t,n,r){var a=this;a.$onInit=function(){a.currentState=n.getState().currentState},a.toggleState=function(){a.currentState=a.currentState===r.RUNNING?r.PAUSED:r.RUNNING,n.setState(a.currentState)},a.getIcon=function(){return a.currentState===r.RUNNING?"fa-pause":"fa-play"},a.resetSave=function(){t.hardReset()}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log"}),game.constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3}),game.controller("bloqhead.controllers.log",["$scope","logService","logTypes",function(e,t,n){var r=this;r.$onInit=function(){r.messages=[],t.SubscribeNewMessageEvent(e,r.receiveMessages)},r.getLogClass=function(e){var t="list-group-item-",r="";switch(e){case n.GENERAL:r="color-general";break;case n.ACHIEVEMENT:r="color-achievement";break;case n.BREED:r="color-breed";break;default:r=t+"none"}return r},r.receiveMessages=function(e,t){r.messages=t,$(".log-component")[0].scrollTop=$(".log-component")[0].scrollHeight}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this;n.init=function(e){e&&(n.messages=[],n.logGeneralMessage("Welcome to Genetix!"))},n.logGeneralMessage=function(r){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(r){n.messages.push({type:t.BREED,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(r){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:r}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,r){var a=e.$on("newMessageEvent",r.bind(this));t.$on("$destroy",a),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:!0,require:{mainCtrl:"^bloqhead.components.home"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit}});var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],r=0;r<e.length;r++)e[r].hasTrait(t)&&n.push(e[r]);return n}}),game.factory("Breeder",["$filter","TraitInspector",function(e,t){function n(e,t,n){var r=Math.random(),a=n/255,i=angular.copy(r<=s.crossoverrate?e:t);i[0]/=a,i[1]/=a;for(var o=i[2]/255,l="",d="",c=0;c<8;c++)l+=Math.random()<o?"1":"0",d+=Math.random()<o?"1":"0";i[0],i[1];return i[0]^=parseInt(l,2),i[1]^=parseInt(d,2),i[0]*=a,i[1]*=a,i}function r(e,t){return generateBitmapDataURL(i(a(e,t),e.length),20)}function a(e,t){for(var n=[],r=1+t/50,a=205/t,i=0;i<e.length;i++){var o=e[i][0],s=e[i][1],l=Math.abs(o-s)*a;o>s?(o=l,o*=r,s=0):(o=0,s=l,s*=r),o>255&&(o=255),s>255&&(s=255),n.push([o,s,0])}return n}function i(e,t){for(var n=[],r=0;r<e.length/t;r++){for(var a=[],i=0;i<t;i++)a.push(e[i+r*t]);n.push(a)}return n}var o=function(e){this.traitInspector=new t,this.update(e)};o.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.mother=e.mother||this.mother||null,this.father=e.father||this.father||null,this.generation=e.generation||this.generation||0,this.genes=e.genes||this.genes||[],this.breederGeneCap=e.breederGeneCap||this.breederGeneCap||25,this.redGreenImage=r(this.genes,this.breederGeneCap),this.traits=this.traitInspector.getTraits(this.genes),this.attributes=this.traitInspector.getAttributes(this.genes),this.name=this.name&&"Unknown Gender"!==this.name?this.name:e.name||this.getRandomName()},o.prototype.breed=function(e,t){for(var r=this,a=e,i=this.hasTrait("Male")?"Male":"Female",s=new o({id:t,generation:r.generation+1,genes:[],mother:"Female"==i?r:a,father:"Male"==i?r:a}),l=0;l<r.genes.length;l++){var d=r.genes[l],c=a.genes[l];s.genes.push(n(d,c,this.breederGeneCap))}return s.update(),s},o.prototype.getTraits=function(){return this.traits},o.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},o.prototype.getRandomName=function(){if(!this.genes||0===this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?l[randomIntFromInterval(0,l.length-1)]:d[randomIntFromInterval(0,d.length-1)],t=c[randomIntFromInterval(0,c.length-1)]+u[randomIntFromInterval(0,u.length-1)]+p[randomIntFromInterval(0,p.length-1)];return e+t};var s={crossoverrate:.5},l=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],d=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],c=["","","","","","Van ","Von ","O'","Mc","Mc"],u=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],p=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return o}]);var game=angular.module("bloqhead.genetixApp");game.factory("Population",["$filter","Breeder","geneDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){if(e=e||{},this.geneDefinitions=n,this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.breeders=e.breeders||this.breeders||[],this.breederLimit=e.breederLimit||this.breederLimit||0,this.maxSize=e.maxSize||this.maxSize||10,this.breederMutationBits=e.breederMutationBits||this.breederMutationBits||4,this.breederMutationChance=e.breederMutationChance||this.breederMutationChance||5,this.breederGenesUnlocked=e.breederGenesUnlocked||this.breederGenesUnlocked||[42],this.initialSize=e.initialSize||this.initialSize||2,e.members){this.members=[];for(var r=0;r<e.members.length;r++){var a=e.members[r],i=new t({id:a.id,mother:a.mother||null,father:a.father||null,generation:a.generation,genes:a.genes,mutationBits:a.mutationBits,name:a.name});i.update(),this.members.push(i)}}else this.members=this.members||this.createInitialPopulation(this.initialSize)},r.prototype.getState=function(){for(var e={currentGeneration:this.currentGeneration,breeders:this.breeders,breederLimit:this.breederLimit,maxSize:this.maxSize,breederMutationBits:this.breederMutationBits,breederMutationChance:this.breederMutationChance,breederGenesUnlocked:this.breederGenesUnlocked,initialSize:this.initialSize,members:[]},t=0;t<this.members.length;t++){var n=this.members[t];e.members.push({id:n.id,generation:n.generation,genes:n.genes,mutationBits:n.mutationBits,name:n.name})}return e},r.prototype.createInitialPopulation=function(e){for(var n=this,r=[],a=0;a<e;a++){for(var i=[],o=0;o<n.geneDefinitions.length;o++)i.push([0,0,0]),n.breederGenesUnlocked.indexOf(o)!==-1&&(i[o][2]=n.breederMutationChance);var s=a%2===0?255:0,l=a%2===0?0:255;i[42][0]=s,i[42][1]=l,i[42][2]=0;var d=new t({id:a,generation:0,genes:angular.copy(i),mutationBits:n.breederMutationBits});d.update(),r.push(d)}return r},r.prototype.isBreeding=function(){if(this.members.length>=this.maxSize)return!1;for(var e=!1,t=!1,n=0;n<this.breeders.length;n++){var r=this.getById(this.breeders[n]);if(r.hasTrait("Male")?e=!0:t=!0,e&&t)break}return e&&t},r.prototype.getById=function(e){return this.members.filter(function(t){return t.id===e})[0]},r.prototype.getByGeneration=function(e){return this.members.filter(function(t){return t.generation===e})},r.prototype.breed=function(){var e=this;if(!e.isBreeding())return null;var t=e.getById(e.breeders[0]),n=e.getById(e.breeders[1]),r=t.breed(n,e.members.length);return e.members.push(r),r},r}]);var game=angular.module("bloqhead.genetixApp");game.constant("geneDefinitions",function(){var e=[];return e[0]={dom:"Broad Shoulders",rec:"Slender Shoulders",attr:["STR"]},e[1]={dom:"Thick Skull",rec:"Soft Skull",attr:["STR"]},e[2]={dom:"Large Arms",rec:"Small Arms",attr:["STR"]},e[3]={dom:"Large Legs",rec:"Small Legs",attr:["STR"]},e[4]={dom:"Big Chest",rec:"Weak Chest",attr:["STR"]},e[5]={dom:"Tough Jaw",rec:"Weak Jaw",attr:["STR"]},e[6]={dom:"Oafish",rec:"Mousey",attr:["STR"]},e[7]={dom:"",rec:"",attr:["STR"]},e[8]={dom:"",rec:"",attr:["STR"]},e[9]={dom:"",rec:"",attr:["STR"]},e[10]={dom:"",rec:"",attr:["INT"]},e[11]={dom:"",rec:"",attr:["INT"]},e[12]={dom:"",rec:"",attr:["INT"]},e[13]={dom:"",rec:"",attr:["INT"]},e[14]={dom:"Calculated Decisions",rec:"Reckless",attr:["INT"]},e[15]={dom:"Lateral Thinker",rec:"Single Minded",attr:["INT"]},e[16]={dom:"Quick Learner",rec:"Forgetful",attr:["INT"]},e[17]={dom:"",rec:"",attr:["INT"]},e[18]={dom:"",rec:"",attr:["INT"]},e[19]={dom:"",rec:"",attr:["INT"]},e[20]={dom:"",rec:"",attr:["END"]},e[21]={dom:"",rec:"",attr:["END"]},e[22]={dom:"",rec:"",attr:["END"]},e[23]={dom:"",rec:"",attr:["END"]},e[24]={dom:"",rec:"",attr:["END"]},e[25]={dom:"",rec:"",attr:["END"]},e[26]={dom:"",rec:"",attr:["END"]},e[27]={dom:"",rec:"",attr:["END"]},e[28]={dom:"",rec:"",attr:["END"]},e[29]={dom:"",rec:"",attr:["END"]},e[30]={dom:"Eloquent",rec:"Catatonic",attr:["CHR"]},e[31]={dom:"Powerful Voice",rec:"Quiet Voice",attr:["CHR"]},e[32]={dom:"Full Lips",rec:"Thin Lips",attr:["CHR"]},e[33]={dom:"Dark Skin",rec:"Fair Skin",attr:["CHR"]},e[34]={dom:"",rec:"",attr:["CHR"]},e[35]={dom:"",rec:"",attr:["CHR"]},e[36]={dom:"",rec:"",attr:["CHR"]},e[37]={dom:"",rec:"",attr:["CHR"]},e[38]={dom:"",rec:"",attr:["CHR"]},e[39]={dom:"",rec:"",attr:["CHR"]},e[40]={dom:"",rec:"",attr:["LCK"]},e[41]={dom:"",rec:"",attr:["LCK"]},e[42]={dom:"Female",rec:"Male",attr:["LCK"]},e[43]={dom:"",rec:"",attr:["LCK"]},e[44]={dom:"",rec:"",attr:["LCK"]},e[45]={dom:"",rec:"",attr:["LCK"]},e[46]={dom:"",rec:"",attr:["LCK"]},e[47]={dom:"",rec:"",attr:["LCK"]},e[48]={dom:"",rec:"",attr:["LCK"]},e[49]={dom:"",rec:"",attr:["LCK"]},e}()),game.constant("traitDefinitions",function(){var e=[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Female",genes:[[42,0,255]]},{name:"Male",genes:[[42,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}],t=[],n=function(t){return e.filter(function(e){return t===e.name})[0]},r=function(e){if(angular.isDefined(e.requiredTraits))for(var a=0;a<e.requiredTraits.length;a++){var i=e.requiredTraits[a],o=n(i);t.indexOf(o.name)===-1&&r(o);for(var s=0;s<o.genes.length;s++)e.genes.push(o.genes[s])}t.push(e.name)},a=function(){for(var t=0;t<e.length;t++){var n=e[t];r(n)}return e};return a()}()),game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var r=function(e){this.update(e)};return r.prototype.update=function(e){"undefined"==typeof e&&(e={})},r.prototype.getTraits=function(e){var t=[];if(e.length)for(var r=0;r<n.length;r++){for(var a=n[r],i=!0,o=0;o<a.genes.length&&i===!0;o++){var s=a.genes[o],l=e[s[0]][1]-e[s[0]][0];(l<s[1]||l>s[2])&&(i=!1)}i&&t.push(a)}return t},r.prototype.getAttributes=function(e){var t={STR:0,INT:0,END:0,CHR:0,LCK:0};if(e.length){for(var n=0,r=0,a=0,i=0,o=0,s=0;s<e.length;s++)s<10?n+=e[s][1]-e[s][0]:s<20?r+=e[s][1]-e[s][0]:s<30?a+=e[s][1]-e[s][0]:s<40?i+=e[s][1]-e[s][0]:o+=e[s][1]-e[s][0];t.STR=Math.floor(Math.sqrt((Math.abs(n)+20)/25))*(n<0?-1:1),t.INT=Math.floor(Math.sqrt((Math.abs(r)+20)/25))*(r<0?-1:1),t.END=Math.floor(Math.sqrt((Math.abs(a)+20)/25))*(a<0?-1:1),t.CHR=Math.floor(Math.sqrt((Math.abs(i)+20)/25))*(i<0?-1:1),t.LCK=Math.floor(Math.sqrt((Math.abs(o)+20)/25))*(o<0?-1:1)}return t},r}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.home",{templateUrl:"components/home.html",controller:"bloqhead.controllers.home"}),game.controller("bloqhead.controllers.home",function(){this.$onInit=function(){}}),game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","populationService","achievementService","resourceService",function(e,t,n,r){var a=this;a.$onInit=function(){a.breeders=[],a.population=[],a.maxPopulation=0,a.maxBreeders=0,t.SubscribePopulationUpdateEvent(e,a.updatePopulation),t.SubscribeBreederUpdateEvent(e,a.updateBreeders),n.SubscribeNewRewardEvent(e,a.rewardEarned)},a.rewardEarned=function(e,t){console.log(t)},a.updateGene=function(e,n,r){t.updateMember(e,n,r)},a.addBreeder=function(e){t.addBreeder(e)},a.removeBreeder=function(e){t.removeBreeder(e)},a.updateBreeders=function(e,t){a.breeders=t.breeders,a.isBreeding=t.isBreeding,a.stepsSinceBreed=t.stepsSinceBreed,a.breedSteps=t.breedSteps},a.updatePopulation=function(e,t){a.population=t.population,a.maxPopulation=t.maxSize,a.breederLimit=t.breederLimit}}]),game.component("bloqheadBreeder",{templateUrl:"components/mainGame/breeder.html",controller:"bloqheader.controllers.breeder",bindings:{unit:"<",allowAssign:"<",assign:"&"}}),game.controller("bloqheader.controllers.breeder",function(){var e=this;e.$onInit=function(){e.allowAssign=!angular.isDefined(e.allowAssign)||e.allowAssign},e.assignMe=function(){e.assign({$id:e.unit.id})}});var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){var r=this;r.lastBreederID=0,r.newBreederGender="Male",r.killBreeder=function(e){r.units.splice(r.units.indexOf(e),1)},r.addNewBreeder=function(){for(var n=[],a=0;a<t.length;a++)n.push([0,0,0]);var i="Male"==r.newBreederGender?255:0;n[42]=[i,255-i,0];var o=new e({id:r.lastBreederID++,generation:0,scale:6,genes:n});o.update(),r.units.unshift(o)}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("genomeEditor",{bindings:{unit:"="},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e,t.expando=!1},t.randomizeName=function(){t.unit.name=t.unit.getRandomName()},t.randomize=function(e){t.unit.genes[e]=[randomIntFromInterval(0,255),randomIntFromInterval(0,255),randomIntFromInterval(0,255)]},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0===randomIntFromInterval(0,1)?255:0;t.unit.genes[42]=[n,255-n,0],t.unit.update()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,r,a,i){var o=this;o.$onInit=function(){o.geneDefinitions=a,o.traitDefinitions=i,o.units=[]}}]);var game=angular.module("bloqhead.genetixApp");game.constant("achievementSetup",{achievements:{A_BIRTHS:{aid:"A_BIRTHS",name:"The Chosen One",desc:"Create a new unit",ranks:[[1,[["P_R_BONUS","GOLD",5],["P_R_BONUS","WOOD",100],["P_R_BONUS","DIRT",5e3]]],[20,[["P_R_BONUS","GOLD",50],["P_M_HAPPINESS"],["P_G_ENHANCED",14,10]]]]},A_DIRT:{aid:"A_DIRT",name:"Its Dirt....",desc:"Earn dirt.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_DIRT_C:{aid:"A_DIRT_C",name:"Dirt Hoarder",desc:"Aquire dirt... lots and lots of dirt!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_BRICKS:{aid:"A_BRICKS",name:"bricks",desc:"Earn bricks.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_BRICKS_C:{aid:"A_BRICKS_C",name:"Brick Hoarder",desc:"Aquire bricks... lots and lots of bricks!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_WATER:{aid:"A_WATER",name:"omnomnom",desc:"Earn water.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_WATER_C:{aid:"A_WATER_C",name:"Water Hoarder",desc:"Aquire water... lots and lots of water!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_WOOD:{aid:"A_WOOD",name:"tree guts",desc:"Earn wood.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_WOOD_C:{aid:"A_WOOD_C",name:"Wood Hoarder",desc:"Aquire wood... lots and lots of wood!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_GOLD:{aid:"A_GOLD",name:"Oooohhh Shiiiiiny",desc:"Earn gold.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_GOLD_C:{aid:"A_GOLD_C",name:"Gold Hoarder",desc:"Aquire gold... lots and lots of gold!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]},A_HAPPINESS:{aid:"A_HAPPINESS",name:"be happy mon",desc:"Earn happiness.",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",.1]]]]},A_HAPPINESS_C:{aid:"A_HAPPINESS_C",name:"Happyness",desc:"Aquire happiness... lots and lots of happiness!",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",.2]]]]}},perks:{P_M_HAPPINESS:{pid:"P_M_HAPPINESS",name:"New Mechanic: Happiness",desc:"Happiness is a representation of how content your population is.",once:!0},P_R_MULTIPLIER:{pid:"P_R_MULTIPLIER",name:"Resource Muliplier",desc:"The rate that you aquire [%1] has been increased by [%2]x."},P_R_BONUS:{pid:"P_R_BONUS",name:"Bonus Resources",desc:"[%2] [%1] has been added to your coffers."},P_G_ENHANCED:{pid:"P_G_ENHANCED",name:"Gene Enhancement",desc:"The boundary has been increased by [%amt] for one of your [%attr] genes. ([%dom]/[%rec])"}}}),game.service("achievementService",["$rootScope","$filter","logService","achievementSetup","geneDefinitions","resourceTypes",function(e,t,n,r,a,i){var o=this;o.init=function(e){e?o.progress={achievements:e.achievements,perks:e.perks}:o.progress={achievements:[],perks:[]}},o.getState=function(){return{achievements:o.progress.achievements,perks:o.progress.perks}},o.updateProgress=function(t,a){var i=o.progress.achievements[t];i||(i={aid:t,amount:0},o.progress.achievements[t]=i);var s=i.amount,l=i.amount+a;i.amount=l;for(var d=r.achievements[t],c=0;c<d.ranks.length;c++){var u=d.ranks[c][0];if(u>s&&u<=l){var p={achievement:d,amountRequired:u,perks:[]};n.logAchievementMessage("Achievement Earned - "+d.name+" ("+u+")");for(var m=0;m<d.ranks[c][1].length;m++){var g=o.applyPerk(d.ranks[c][1][m]);null!==g&&p.perks.push(g)}e.$emit("newRewardEvent",p)}}},o.applyPerk=function(e){var s=e[0],l=r.perks[s];if(l.once){var d=t("filter")(o.progress.perks,{pid:s});if(0!==d.length)return null}var c=l.name+" - "+l.desc;switch(l.pid){case"P_G_ENHANCED":var u=a[e[1]];c=c.replace("[%dom]",u.dom),c=c.replace("[%rec]",u.rec),c=c.replace("[%attr]",u.attr[0]),c=c.replace("[%amt]",e[2]);break;case"P_R_BONUS":case"P_R_MULTIPLIER":c=c.replace("[%1]",i[e[1]].name),c=c.replace("[%2]",e[2]);break;default:for(var p=1;p<e.length;p++)c=c.replace("[%"+p+"]",e[p])}n.logAchievementMessage(c);var m={pid:s,msg:c,arr:e,dt:(new Date).toUTCString()};return o.progress.perks.push(m),m},o.SubscribeNewRewardEvent=function(t,n){var r=e.$on("newRewardEvent",n.bind(this));t.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.constant("defaultBuildings",{BUNGALOW:{name:"Breeding Bungalow",description:"A private bungalow where the magic happens.",use:"breeding",size:2,baseCost:[{resource:"DIRT",amount:25,costMultiplier:1.05}],purchased:0,gifted:1,unlocked:1},DIRTPILE:{name:"Dirt pile",description:"Where else would you store dirt?",use:"storage",stores:"DIRT",size:25,baseCost:[{resource:"DIRT",amount:10,costMultiplier:1.25}],purchased:0,gifted:1,unlocked:1},SODHOUSE:{name:"Sod house",description:"Provides minimal shelter for {size} things.",use:"housing",size:5,baseCost:[{resource:"DIRT",amount:5,costMultiplier:1.05},{resource:"WATER",amount:5,costMultiplier:1.05}],purchased:0,gifted:1,unlocked:1},WELL:{name:"Well",description:"Used for water production.",use:"production",produces:"WATER",size:5,baseCost:[{resource:"BRICKS",amount:100,costMultiplier:1.05}],purchased:0,gifted:0,unlocked:0}}),game.service("buildingService",["$rootScope","defaultBuildings","resourceTypes","resourceService","populationService",function(e,t,n,r,a){var i=this;i.init=function(e){i.state=e||{},i.state.buildings=angular.merge({},t,e.buildings),i.updateStorage(),i.updateBreeders(),i.updateHousing()},i.getState=function(){return i.state},i.getBuildingSnapshot=function(){var e=[];for(var t in i.state.buildings)if(i.state.buildings.hasOwnProperty(t)){var n=i.state.buildings[t];n.unlocked&&e.push({name:n.name,description:i.formatDescription(n),size:i.getSize(n),owned:n.purchased+n.gifted,costToBuild:i.calculateNextCost(n)})}return e},i.formatDescription=function(e){var t=e.description;if(t.indexOf("{size}")!==-1){var n=i.getSize(e);t=t.replace(/{size}/g,n)}return t},i.getSize=function(e){var t=e.size*(e.multiplier||1);return"breeding"===e.use&&(t*=i.state.breedingSizeMultiplier||1),"storage"===e.use&&(t*=i.state.storageSizeMultiplier||1),"housing"===e.use&&(t*=i.state.housingSizeMultiplier||1),t},i.calculateNextCost=function(e){for(var t=[],r=0;r<e.baseCost.length;r++){var a=e.baseCost[r],i=a.amount*Math.pow(a.costMultiplier,e.purchased);t.push({resource:n[a.resource].name,amount:i})}return t},i.updateBreeders=function(){var e=0,t=i.state.breedingSizeMultiplier||1;for(var n in i.state.buildings)if(i.state.buildings.hasOwnProperty(n)){var r=i.state.buildings[n];if("breeding"===r.use){var o=r.sizeMultiplier||1;e+=Math.floor(r.size*o)}}e*=t,a.setBreederLimit(Math.floor(e))},i.updateStorage=function(){var e=i.state.storageSizeMultiplier||1,t=r.getResourcesSnapshot(),n=[];for(var a in i.state.buildings)if(i.state.buildings.hasOwnProperty(a)){var o=i.state.buildings[a];if("storage"===o.use){n.push(o.stores);var s=o.multiplier||1;t[o.stores].newAmount=t[o.stores].newAmount||0,t[o.stores].newAmount+=Math.floor(o.size*s)}}n.filter(function(n){t[n].newAmount=Math.floor(t[n].newAmount*e),t[n][1]!=t[n].newAmount&&r.setResourceLimit(n,t[n].newAmount)})},i.updateHousing=function(){var e=i.state.housingSizeMultiplier||1,t=0;for(var n in i.state.buildings)if(i.state.buildings.hasOwnProperty(n)){var r=i.state.buildings[n];if("housing"===r.use){var o=r.multiplier||1;t+=Math.floor(r.size*o)}}a.setPopulationLimit(Math.floor(t*e))},i.SubscribeBuildingsChangedEvent=function(t,n){var r=e.$on("buildingsChangedEvent",n.bind(this));t&&t.$on("$destroy",r),e.$emit("buildingsChangedEvent",i.getBuildingSnapshot())}}]);var game=angular.module("bloqhead.genetixApp");game.constant("gameSaveKey","GENETIX_SAVE"),game.constant("gameStates",{PAUSED:0,RUNNING:1}),game.constant("defaultState",{clearLog:!0,autoSaveSteps:30,gameLoopServiceState:{stepTimeMs:1e3},populationServiceState:{breedSteps:6,populationState:{initialSize:2,maxSize:5,breederGeneCap:100,breederGenesUnlocked:[0,42],breederMutationChance:10}},achievementServiceState:{achievements:[],perks:[]},resourceServiceState:{resources:{}},buildingServiceState:{buildings:{}}}),game.service("gameLoopService",["$window","$rootScope","gameStates","logService",function(e,t,n,r){var a=this;a.initialized=!1,a.init=function(e){e=e||{},a.stepTimeMs=e.stepTimeMs||a.stepTimeMs||1e3,a.lastTime=0,a.currentState=n.PAUSED,a.initialized||(a.initialized=!0,a.gameLoop(0)),a.currentState=e.currentState||a.currentState||n.RUNNING},a.getState=function(){return{stepTimeMs:a.stepTimeMs,currentState:a.currentState}},a.setState=function(e){a.currentState=e,e===n.PAUSED?r.logGeneralMessage("Game paused."):r.logGeneralMessage("Game resumed.")},a.gameLoop=function(r){for(var a=this,i=0;a.lastTime+r>a.stepTimeMs*(i+1);)i++;a.lastTime=a.lastTime-a.stepTimeMs*i,a.currentState==n.RUNNING&&i>0&&t.$apply(t.$emit("gameLoopEvent",i)),e.requestAnimationFrame(this.gameLoop.bind(this))},a.SubscribeGameLoopEvent=function(e,n){var r=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",r)}}]),game.service("gameService",["$rootScope","gameSaveKey","defaultState","logService","gameLoopService","populationService","achievementService","resourceService","buildingService","LZString",function(e,t,n,r,a,i,o,s,l,d){var c=this;c.init=function(e){var r=d.decompressFromBase64(localStorage.getItem(t)),a=r?angular.fromJson(r):void 0;c.gameState=e||a||n,c.autoSaveSteps=c.gameState.autoSaveSteps||c.autoSaveSteps||10,c.startGame(),c.stepsSinceSave=0},c.startGame=function(){r.init(c.gameState.clearLog),i.init(angular.merge({},n.populationServiceState,c.gameState.populationServiceState)),s.init(angular.merge({},n.resourceServiceState,c.gameState.resourceServiceState)),o.init(angular.merge({},n.achievementServiceState,c.gameState.achievementServiceState)),l.init(angular.merge({},n.buildingServiceState,c.gameState.buildingServiceState)),a.init(angular.merge({},n.gameLoopServiceState,c.gameState.gameLoopServiceState))},c.hardReset=function(){localStorage.removeItem(t),c.init()},a.SubscribeGameLoopEvent(e,function(e,n){if(c.stepsSinceSave+=n,c.stepsSinceSave>c.autoSaveSteps){var u=angular.copy(c.gameState);u.populationServiceState=angular.copy(i.getState()),u.resourceServiceState=angular.copy(s.getState()),u.achievementServiceState=angular.copy(o.getState()),u.buildingServiceState=angular.copy(l.getState()),u.gameLoopServiceState=angular.copy(a.getState());var p=d.compressToBase64(angular.toJson(angular.copy(u)));localStorage.setItem(t,p),r.logGeneralMessage("Game autosaved."),c.stepsSinceSave=0}})}]);var game=angular.module("bloqhead.genetixApp");game.service("populationService",["$rootScope","gameLoopService","Population","logService","achievementService",function(e,t,n,r,a){var i=this;i.init=function(e){e=e||{},i.breedSteps=e.breedSteps||e.breedSteps||6,i.stepsSinceBreed=e.stepsSinceBreed||i.stepsSinceBreed||0,i.populationState=e.populationState||i.populationState,i.population=i.populationState?new n(i.populationState):i.population||new n,i.logService=r,i.sendBreederUpdateEvent(),i.sendPopulationUpdateEvent()},i.getState=function(){var e={breedSteps:i.breedSteps,stepsSinceBreed:i.stepsSinceBreed};return e.populationState=i.population.getState(),e},i.handleGameLoop=function(e,t){var n=!1;if("gameLoopEvent"!==e.name)return void console.log("populateService.handleGameLoop - Invalid event: "+e);if(i.population.isBreeding()){for(i.stepsSinceBreed+=t;i.stepsSinceBreed>=i.breedSteps;){i.stepsSinceBreed-=i.breedSteps;var o=i.population.breed();if(null!==o){r.logBreedMessage("New offspring! "+o.name);for(var s=0,l=0,d=0,c=0,u=0,p=o.genes,m=0;m<p.length;m++)m<10?s+=p[m][1]-p[m][0]:m<20?l+=p[m][1]-p[m][0]:m<30?d+=p[m][1]-p[m][0]:m<40?c+=p[m][1]-p[m][0]:u+=p[m][1]-p[m][0];console.log(s),a.updateProgress("A_BIRTHS",1),n=!0}}i.sendBreederUpdateEvent(),n&&i.sendPopulationUpdateEvent()}},i.addBreeder=function(e){i.population.breeders.indexOf(e)===-1&&i.population.breeders.length<i.population.breederLimit&&(i.population.breeders.push(e),i.sendBreederUpdateEvent(),i.logService.logBreedMessage("Breeder added: "+i.population.getById(e).name))},i.removeBreeder=function(e){var t=i.population.breeders.indexOf(e);t!==-1&&(i.population.breeders.splice(t,1),i.population.isBreeding()||(i.stepsSinceBreed=0),i.sendBreederUpdateEvent(),i.logService.logBreedMessage("Breeder removed: "+i.population.getById(e).name))},i.updateMember=function(e,t,n){var r=i.population.getById(e);
r.genes[t]=n,r.update(),i.sendPopulationUpdateEvent()},i.setBreederLimit=function(e){i.population.breederLimit=e,i.sendPopulationUpdateEvent()},i.setPopulationLimit=function(e){i.population.maxSize=e,i.sendPopulationUpdateEvent()},i.sendBreederUpdateEvent=function(){e.$emit("breederUpdateEvent",{breeders:i.population.breeders,isBreeding:i.population.isBreeding(),stepsSinceBreed:i.stepsSinceBreed,breedSteps:i.breedSteps})},i.sendPopulationUpdateEvent=function(){e.$emit("populationUpdateEvent",{population:i.population.members,maxSize:i.population.maxSize,breederLimit:i.population.breederLimit})},i.SubscribeBreederUpdateEvent=function(t,n){var r=e.$on("breederUpdateEvent",n);t.$on("$destroy",r),i.sendBreederUpdateEvent()},i.SubscribePopulationUpdateEvent=function(t,n){var r=e.$on("populationUpdateEvent",n.bind(this));t.$on("$destroy",r),i.sendPopulationUpdateEvent()},t.SubscribeGameLoopEvent(e,i.handleGameLoop)}]);var game=angular.module("bloqhead.genetixApp");game.constant("resourceTypes",{DIRT:{name:"Dirt",desc:"Used in construction and mining.",attr:"STR"},BRICKS:{name:"Bricks",desc:"Used in construction and smelting.",attr:"STR"},STEEL:{name:"Steel",desc:"Used in advanced construction.",attr:"STR"},WATER:{name:"Water",desc:"Used in construction, mining and population expansion.",attr:"END"},WOOD:{name:"Wood",desc:"Used in construction and mining.",attr:"END"},GOLD:{name:"Gold",desc:"Used for purchasing gene research technologies.",attr:"INT"},SCIENCE:{name:"Science",desc:"Used in genetic modification and advanced construction.",attr:"INT"},HAPPINESS:{name:"Happiness",desc:"Good things happen to those that are happy...",attr:"CHR"},EVOCOIN:{name:"Evo-Coins",desc:"A rare commodity indeed. Used to discover traits.",attr:"LCK"}}),game.service("resourceService",["$rootScope","$filter","logService","geneDefinitions","resourceTypes","achievementService",function(e,t,n,r,a,i){var o=this,s=!1;o.init=function(t){null!==t&&(o.state=t),s||i.SubscribeNewRewardEvent(e,o.rewardEarned),s=!0;var n=!1,r={DIRT:[0,0,!0],BRICKS:[0,0,n],WATER:[0,0,n],WOOD:[0,0,n],GOLD:[0,0,n],HAPPINESS:[0,-1,n],SCIENCE:[0,-1,n],STEEL:[0,0,n],EVOCOIN:[0,-1,n]};for(var l in a)if(a.hasOwnProperty(l)){var d=o.state.resources[l];"undefined"==typeof d&&(d=r[l]||[0,911,!1],o.state.resources[l]=d),e.$emit("resourceChangedEvent",l,d[0]),e.$emit("resourceLimitChangedEvent",l,d[1]),e.$emit("resourceEnabledEvent",l,d[2])}},o.getState=function(){return o.state},o.rewardEarned=function(t,n){for(var r=0;r<n.perks.length;r++){var a=n.perks[r];"P_R_BONUS"===a.pid&&o.addResource(a.arr[1],a.arr[2]),"P_M_HAPPINESS"===a.pid&&(o.state.resources.HAPPINESS[2]=!0,e.$emit("resourceEnabledEvent","HAPPINESS",!0))}},o.getResourcesSnapshot=function(){return angular.copy(o.state.resources)},o.addResource=function(t,n){var r=o.state.resources[t];return r[2]===!1&&r[1]!==-1?void console.error(t+" is not enabled, cannot increase amount."):(r[0]+=n,r[1]!=-1&&r[0]>r[1]&&(r[0]=r[1]),r[0]<0&&(r[0]=0),i.updateProgress("A_"+t,n),i.updateProgress("A_"+t+"_C",r[0]),r[2]===!1&&(e.$emit("resourceEnabledEvent",t,!0),r[2]=!0),void e.$emit("resourceChangedEvent",t,r[0]))},o.setResourceLimit=function(t,n){var r=o.state.resources[t];return r[1]===-1?void console.error("Cannot set resource limit on: "+t):(r[1]=n,r[2]===!1&&n>0&&(r[2]=!0,e.$emit("resourceEnabledEvent",t,!0)),void e.$emit("resourceLimitChangedEvent",t,r[1]))},o.SubscribeResourceChangedEvent=function(t,n){var r=e.$on("resourceChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceLimitChangedEvent=function(t,n){var r=e.$on("resourceLimitChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceEnabledEvent=function(t,n){var r=e.$on("resourceEnabledEvent",n.bind(this));t&&t.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadResourceList",{templateUrl:"components/resourceList/resourceList.html",controller:"bloqhead.controllers.resourceList"}),game.controller("bloqhead.controllers.resourceList",["$scope","resourceService","resourceTypes",function(e,t,n){var r=this;r.resourceTypes=n,r.resources={},r.$onInit=function(){t.SubscribeResourceChangedEvent(e,r.resourceChanged),t.SubscribeResourceLimitChangedEvent(e,r.resourceLimitChanged),t.SubscribeResourceEnabledEvent(e,r.resourceEnabled),r.resources=t.getResourcesSnapshot()},r.getUnlockedResources=function(){var e={};for(var t in r.resources)r.resources.hasOwnProperty(t)&&r.resources[t][2]===!0&&(e[t]=r.resources[t]);return e},r.resourceChanged=function(e,t,n){r.resources[t]||(r.resources[t]=[]),r.resources[t][0]=n},r.resourceLimitChanged=function(e,t,n){r.resources[t]||(r.resources[t]=[]),r.resources[t][1]=n},r.resourceEnabled=function(e,t,n){r.resources[t][2]=n}}]),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<div class="row"><div class="col-xs-12 col-md-6 col-lg-4"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Log"><bloqhead-log></bloqhead-log></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Resources"><bloqhead-resource-list></bloqhead-resource-list></bloqhead-player-box></div></div></div><div class="col-xs-12 col-md-6 col-lg-8"><div ui-view=""></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/achievements/achievements.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Achievements"><div class="row breeder-container"><div ng-repeat="child in $ctrl.population" class="col-xs-12 col-sm-8 col-md-6 col-lg-4"><bloqhead-breeder unit="child" assign="$ctrl.addBreeder($id)"></bloqhead-breeder></div></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/buildingList/buildingList.html",'<div class="col-xs-12" title=""><div class="row"><div class="col-xs-5">Building</div><div class="col-xs-2">Owned</div></div><div class="row" ng-repeat="building in $ctrl.buildings" style="padding-bottom: 5px"><div class="col-xs-5"><h5 uib-tooltip="{{building.description}}">{{building.name}}</h5></div><div class="col-xs-2"><h5 ng-bind="building.owned"></h5></div><div class="col-xs-4"><button class="btn btn-sm btn-primary" tooltip-placement="top" uib-tooltip-template="\'resourceTooltip.html\'">Build</button></div></div><script type="text/ng-template" id="resourceTooltip.html"><div>\n            <h5>Requires</h5>\n            <div ng-repeat="cost in building.costToBuild"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></div>\n        </div></script></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" ng-bind="$ctrl.title"></h3></div><div class="panel-body"><ng-transclude></ng-transclude></div><div ng-if="angular.isDefined($ctrl.footer)" class="panel-footer"><span ng-bind="$ctrl.footer"></span></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/breeder.html",'<div class="bloqhead-component"><h5>{{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-container="body" data-toggle="tooltip" rel="tooltip" data-placement="top" title="{{trait.name}}"></i></h5><table class="genomeEditor"><thead><tr><th colspan="5"><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}"></th></tr><tr><th style="width: 20%">STR</th><th style="width: 20%">INT</th><th style="width: 20%">END</th><th style="width: 20%">CHR</th><th style="width: 20%">LCK</th></tr></thead><tbody><tr><td><span ng-bind="$ctrl.unit.attributes.STR"></span></td><td><span ng-bind="$ctrl.unit.attributes.INT"></span></td><td><span ng-bind="$ctrl.unit.attributes.END"></span></td><td><span ng-bind="$ctrl.unit.attributes.CHR"></span></td><td><span ng-bind="$ctrl.unit.attributes.LCK"></span></td></tr></tbody></table><div ng-show="$ctrl.allowAssign"><button class="btn btn-sm btn-primary" ng-click="$ctrl.assignMe() ">Breed Me</button><div class="btn-group" role="menu" data-container="body"><button class="btn btn-sm btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Work <span class="caret"></span></button><ul class="dropdown-menu"><li ng-repeat="job in [\'Dig\', \'Farm\', \'Chop\', \'Build\']"><a ng-bind="job"></a></li></ul></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Population [{{$ctrl.population.length}} / {{$ctrl.maxPopulation}}] ---FILTERS HERE???----"><div class="row breeder-container"><div ng-repeat="child in $ctrl.population" class="col-xs-12 col-sm-8 col-md-6 col-lg-4"><bloqhead-breeder unit="child" assign="$ctrl.addBreeder($id)"></bloqhead-breeder></div></div></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12 col-sm-10 col-md-6 col-lg-4"><bloqhead-player-box title="Buildings"><bloqhead-building-list></bloqhead-building-list></bloqhead-player-box></div><div class="col-xs-12 col-sm-10 col-md-6 col-lg-4"><bloqhead-player-box title="Breeders [{{$ctrl.breeders.length}} / {{$ctrl.breederLimit}}]"><div class="row"><div class="col-xs-12 col-lg-12"><div class="progress"><div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.stepsSinceBreed}}" aria-valuemin="0" aria-valuemax="{{$ctrl.breedSteps}}}" ng-style="{width: (100*($ctrl.stepsSinceBreed/$ctrl.breedSteps)) + \'%\'}"><span ng-bind="$ctrl.stepsSinceBreed + \' / \' + $ctrl.breedSteps"></span><i class="fa fa-cog" ng-class="$ctrl.isBreeding == true ? \'fa-spin\' : \'\'"></i></div></div></div></div><div class="row breeder-container"><div ng-repeat="breederid in $ctrl.breeders" class="col-xs-12 col-lg-12"><button type="button" class="close" ng-click="$ctrl.removeBreeder(breederid)"><span>&times;</span></button><bloqhead-breeder unit="$ctrl.population[breederid]" allow-assign="false"></bloqhead-breeder></div></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor unit="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div class="col-xs-12"><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/resourceList/resourceList.html",'<div class="resource-list col-xs-12"><div class="row" ng-repeat="(key, value) in $ctrl.resources" ng-if="value[2] === true" data-attr="{{$ctrl.resourceTypes[key].attr}}"><div class="col-xs-12 col-sm-2"><h5 uib-tooltip="{{$ctrl.resourceTypes[key].desc}}">{{$ctrl.resourceTypes[key].name}}</h5></div><div class="col-xs-12 col-sm-10"><div class="progress"><div class="progress-bar" role="progressbar" aria-valuenow="{{value[0]}}" aria-valuemin="0" aria-valuemax="{{value[1]}}" ng-style="{width: (100*(value[0]/value[1])) + \'%\'}"><span ng-bind="value[0] + \' / \' + value[1]"></span></div></div></div></div></div>')}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2VydmljZXMvZ2FtZVNlcnZpY2UuanMiLCJjb21wb25lbnRzL2JpdG1hcC5qcyIsImNvbXBvbmVudHMvZ2VuZXRpeEFwcC5qcyIsImNvbXBvbmVudHMvYWNoaWV2ZW1lbnRzL2FjaGlldmVtZW50cy5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL2J1aWxkaW5nTGlzdC9idWlsZGluZ0xpc3QuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9nYW1lQ29udHJvbC9nYW1lQ29udHJvbC5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL2xvZy9sb2cuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9wbGF5ZXJCb3gvcGxheWVyQm94LmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvY2xhc3Nlcy9icmVlZGVyLmpzIiwiY29tcG9uZW50cy9jbGFzc2VzL3BvcHVsYXRpb24uanMiLCJjb21wb25lbnRzL2NsYXNzZXMvdHJhaXQuanMiLCJjb21wb25lbnRzL21haW5HYW1lL21haW5HYW1lLmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvdGVzdEludGVyZmFjZS90ZXN0SW50ZXJmYWNlLmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvYWNoaWV2ZW1lbnRTZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9idWlsZGluZ1NlcnZpY2UuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL3BvcHVsYXRpb25TZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9yZXNvdXJjZVNlcnZpY2UuanMiLCJjb21wb25lbnRzL3Jlc291cmNlTGlzdC9yZXNvdXJjZUxpc3QuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9ob21lLmpzIiwiY29tcG9uZW50cy9hY2hpZXZlbWVudHMvYWNoaWV2ZW1lbnRzLmpzIiwiY29tcG9uZW50cy9idWlsZGluZ0xpc3QvYnVpbGRpbmdMaXN0LmpzIiwiY29tcG9uZW50cy9sb2cvbG9nLmpzIiwiY29tcG9uZW50cy9wbGF5ZXJCb3gvcGxheWVyQm94LmpzIiwiY29tcG9uZW50cy9tYWluR2FtZS9icmVlZGVyLmpzIiwiY29tcG9uZW50cy9tYWluR2FtZS9tYWluR2FtZS5qcyIsImNvbXBvbmVudHMvdGVzdEludGVyZmFjZS9icmVlZGVyVGFiLmpzIiwiY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL2dlbm9tZUVkaXRvci5qcyIsImNvbXBvbmVudHMvdGVzdEludGVyZmFjZS9tYXRpbmdUYWIuanMiLCJjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvdGVzdEludGVyZmFjZS5qcyIsImNvbXBvbmVudHMvcmVzb3VyY2VMaXN0L3Jlc291cmNlTGlzdC5qcyJdLCJuYW1lcyI6WyJyYW5kb21JbnRGcm9tSW50ZXJ2YWwiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJfYXNMaXR0bGVFbmRpYW5IZXgiLCJ2YWx1ZSIsImJ5dGVzIiwicmVzdWx0IiwicHVzaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJfY29sbGFwc2VEYXRhIiwicm93cyIsInJvd19wYWRkaW5nIiwiaSIsImoiLCJwaXhlbCIsInJvd3NfbGVuIiwibGVuZ3RoIiwicGl4ZWxzX2xlbiIsInBhZGRpbmciLCJfc2NhbGVSb3dzIiwic2NhbGUiLCJuZXdfcm93IiwieCIsInkiLCJyZWFsX2giLCJzY2FsZWRfaCIsInBhcnNlSW50IiwicmVhbF93Iiwic2NhbGVkX3ciLCJuZXdfcm93cyIsIndpbmRvdyIsImdlbmVyYXRlQml0bWFwRGF0YVVSTCIsImJ0b2EiLCJhbGVydCIsImZpbGUiLCJoZWlnaHQiLCJ3aWR0aCIsIm51bV9kYXRhX2J5dGVzIiwibnVtX2ZpbGVfYnl0ZXMiLCJkb2N1bWVudCIsInVuZGVmaW5lZCIsIl9hc3NpZ25fYmdfdHJhbnNmb3JtIiwiYmciLCJ0ZXN0IiwiJGJnX3RyYW5zZm9ybSIsInNwbGl0Iiwic3Vic3RyIiwic3Vic3RyaW5nIiwibGVuIiwiJGJnQXNSR0IiLCJpZCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZW5lcmF0ZUxvd1Jlc0JpdG1hcCIsInJvdyIsImltZ19wYXJlbnQiLCJpbWciLCJzcmMiLCJ4X2xlbiIsImNyZWF0ZUVsZW1lbnQiLCJhbHQiLCJ0aXRsZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJvbmNsaWNrIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYXNrVG9TY2FsZSIsInByb21wdCIsInBhcnNlRmxvYXQiLCJOYU4iLCJpc05hTiIsInRoaXMiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIiR1aWJUb29sdGlwUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZXMiLCJuYW1lIiwidXJsIiwiY29tcG9uZW50IiwiZm9yRWFjaCIsInN0YXRlIiwib3B0aW9ucyIsImFwcGVuZFRvQm9keSIsInBsYWNlbWVudCIsInBvcHVwQ2xvc2VEZWxheSIsInBvcHVwRGVsYXkiLCJydW4iLCJnYW1lU2VydmljZSIsImluaXQiLCJnYW1lIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiYmluZGluZ3MiLCJmb290ZXIiLCJzZWxmIiwiJG9uSW5pdCIsIiRzY29wZSIsImJ1aWxkaW5nU2VydmljZSIsIiRzY2UiLCJidWlsZGluZ3MiLCJTdWJzY3JpYmVCdWlsZGluZ3NDaGFuZ2VkRXZlbnQiLCJ1cGRhdGVCdWlsZGluZ3MiLCJldmVudCIsInRvb2x0aXAiLCJ0cnVzdEFzSHRtbCIsImdldENvc3RUb29sdGlwIiwiY29zdFRvQnVpbGQiLCJjb25zb2xlIiwibG9nIiwiYW1vdW50IiwicmVzb3VyY2UiLCJhcHAiLCJ0ZW1wbGF0ZSIsImdhbWVMb29wU2VydmljZSIsImdhbWVTdGF0ZXMiLCJjdXJyZW50U3RhdGUiLCJnZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiUlVOTklORyIsIlBBVVNFRCIsInNldFN0YXRlIiwiZ2V0SWNvbiIsInJlc2V0U2F2ZSIsImhhcmRSZXNldCIsImNvbnN0YW50IiwiR0VORVJBTCIsIkJSRUVEIiwiQUNISUVWRU1FTlQiLCJsb2dTZXJ2aWNlIiwibG9nVHlwZXMiLCJtZXNzYWdlcyIsIlN1YnNjcmliZU5ld01lc3NhZ2VFdmVudCIsInJlY2VpdmVNZXNzYWdlcyIsImdldExvZ0NsYXNzIiwidHlwZSIsInByZWZpeCIsImEiLCIkIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0Iiwic2VydmljZSIsIiRyb290U2NvcGUiLCJjbGVhckxvZyIsImxvZ0dlbmVyYWxNZXNzYWdlIiwibWVzc2FnZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzcGxpY2UiLCIkZW1pdCIsImxvZ0JyZWVkTWVzc2FnZSIsImxvZ0FjaGlldmVtZW50TWVzc2FnZSIsInNjb3BlIiwiY2FsbGJhY2siLCJoYW5kbGVyIiwiJG9uIiwiYmluZCIsInRyYW5zY2x1ZGUiLCJyZXF1aXJlIiwibWFpbkN0cmwiLCJ1bml0IiwiZmlsdGVyIiwidW5pdHMiLCJ0cmFpdE5hbWUiLCJyZXQiLCJoYXNUcmFpdCIsImZhY3RvcnkiLCIkZmlsdGVyIiwiVHJhaXRJbnNwZWN0b3IiLCJjcm9zc292ZXIiLCJnMSIsImcyIiwiZ2VuZUNhcCIsImdlbmVSYXRpbyIsImciLCJjb3B5IiwiZ2VuZXRpY09wdGlvbnMiLCJjcm9zc292ZXJyYXRlIiwibXV0YXRpb25SYXRlIiwiYml0U3RyaW5nUiIsImJpdFN0cmluZ0ciLCJnZXRSZWRHcmVlbkltYWdlIiwiZ2VuZXMiLCJicmVlZGVyR2VuZUNhcCIsImFkZFJvd3MiLCJjb252ZXJ0UmVkR3JlZW5NYXAiLCJtaW5Db2xvclJhdGlvIiwiY29sb3JSYXRpbyIsInIiLCJicmlnaHQiLCJhYnMiLCJjb2xzIiwiQnJlZWRlciIsInRyYWl0SW5zcGVjdG9yIiwidXBkYXRlIiwicHJvdG90eXBlIiwibW90aGVyIiwiZmF0aGVyIiwiZ2VuZXJhdGlvbiIsInJlZEdyZWVuSW1hZ2UiLCJ0cmFpdHMiLCJnZXRUcmFpdHMiLCJhdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsImdldFJhbmRvbU5hbWUiLCJicmVlZCIsInBhcnRuZXIiLCJuZXdJZCIsInAxIiwicDIiLCJteUdlbmRlciIsImNoaWxkIiwicDFnIiwicDJnIiwidHJhaXQiLCJteVRyYWl0IiwiZmlyc3ROYW1lIiwibmFtZUxpc3QxIiwibmFtZUxpc3QyIiwibGFzdE5hbWUiLCJuYW1lTGlzdDMiLCJuYW1lTGlzdDQiLCJuYW1lTGlzdDUiLCJnZW5lRGVmaW5pdGlvbnMiLCJQb3B1bGF0aW9uIiwiY3VycmVudEdlbmVyYXRpb24iLCJicmVlZGVycyIsImJyZWVkZXJMaW1pdCIsIm1heFNpemUiLCJicmVlZGVyTXV0YXRpb25CaXRzIiwiYnJlZWRlck11dGF0aW9uQ2hhbmNlIiwiYnJlZWRlckdlbmVzVW5sb2NrZWQiLCJpbml0aWFsU2l6ZSIsIm1lbWJlcnMiLCJtIiwibWVtYmVyIiwibXV0YXRpb25CaXRzIiwiY3JlYXRlSW5pdGlhbFBvcHVsYXRpb24iLCJjb3VudCIsInBvcHVsYXRpb24iLCJnbiIsImluZGV4T2YiLCJpc0JyZWVkaW5nIiwiaGFzTWFsZSIsImhhc0ZlbWFsZSIsImdldEJ5SWQiLCJnZXRCeUdlbmVyYXRpb24iLCJkb20iLCJyZWMiLCJhdHRyIiwicmVxdWlyZWRUcmFpdHMiLCJjaGVja2VkIiwiZ2V0VHJhaXRCeU5hbWUiLCJ0IiwiZ2V0UmVxdWlyZWRHZW5lc1JlY3Vyc2l2ZSIsImlzRGVmaW5lZCIsInJlcXVpcmVkVHJhaXQiLCJyZXEiLCJidWlsZFRyYWl0cyIsInRyYWl0RGVmaW5pdGlvbnMiLCJ0ZCIsIm1ldCIsImgiLCJ0ZGciLCJ2IiwiU1RSIiwiSU5UIiwiRU5EIiwiQ0hSIiwiTENLIiwic3RyQmFzZSIsImludEJhc2UiLCJlbmRCYXNlIiwiY2hyQmFzZSIsImxja0Jhc2UiLCJzcXJ0IiwicG9wdWxhdGlvblNlcnZpY2UiLCJhY2hpZXZlbWVudFNlcnZpY2UiLCJyZXNvdXJjZVNlcnZpY2UiLCJtYXhQb3B1bGF0aW9uIiwibWF4QnJlZWRlcnMiLCJTdWJzY3JpYmVQb3B1bGF0aW9uVXBkYXRlRXZlbnQiLCJ1cGRhdGVQb3B1bGF0aW9uIiwiU3Vic2NyaWJlQnJlZWRlclVwZGF0ZUV2ZW50IiwidXBkYXRlQnJlZWRlcnMiLCJTdWJzY3JpYmVOZXdSZXdhcmRFdmVudCIsInJld2FyZEVhcm5lZCIsInJld2FyZCIsInVwZGF0ZUdlbmUiLCJnZW5lSW5kZXgiLCJnZW5lVmFsdWVzIiwidXBkYXRlTWVtYmVyIiwiYWRkQnJlZWRlciIsInVuaXRpZCIsInJlbW92ZUJyZWVkZXIiLCJkYXRhIiwic3RlcHNTaW5jZUJyZWVkIiwiYnJlZWRTdGVwcyIsImFsbG93QXNzaWduIiwiYXNzaWduIiwiYXNzaWduTWUiLCIkaWQiLCJsYXN0QnJlZWRlcklEIiwibmV3QnJlZWRlckdlbmRlciIsImtpbGxCcmVlZGVyIiwiYWRkTmV3QnJlZWRlciIsImdlbmRlciIsInVuc2hpZnQiLCJleHBhbmRvIiwicmFuZG9taXplTmFtZSIsInJhbmRvbWl6ZSIsImluZGV4IiwicmFuZG9taXplQWxsIiwiJHRpbWVvdXQiLCJhY2hpZXZlbWVudHMiLCJBX0JJUlRIUyIsImFpZCIsImRlc2MiLCJyYW5rcyIsIkFfRElSVCIsIkFfRElSVF9DIiwiQV9CUklDS1MiLCJBX0JSSUNLU19DIiwiQV9XQVRFUiIsIkFfV0FURVJfQyIsIkFfV09PRCIsIkFfV09PRF9DIiwiQV9HT0xEIiwiQV9HT0xEX0MiLCJBX0hBUFBJTkVTUyIsIkFfSEFQUElORVNTX0MiLCJwZXJrcyIsIlBfTV9IQVBQSU5FU1MiLCJwaWQiLCJvbmNlIiwiUF9SX01VTFRJUExJRVIiLCJQX1JfQk9OVVMiLCJQX0dfRU5IQU5DRUQiLCJhY2hpZXZlbWVudFNldHVwIiwicmVzb3VyY2VUeXBlcyIsInByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJhY2hQcm9ncmVzcyIsIm9sZHZhbCIsIm5ld3ZhbCIsImFjaFNldHVwIiwicmMiLCJhbW91bnRSZXF1aXJlZCIsImFjaGlldmVtZW50IiwicGMiLCJwIiwiYXBwbHlQZXJrIiwiYXJyIiwicGVya1NldHVwIiwicGVya1NlYXJjaCIsIm1zZyIsImdlbmUiLCJyZXBsYWNlIiwiZHQiLCJ0b1VUQ1N0cmluZyIsIkJVTkdBTE9XIiwiZGVzY3JpcHRpb24iLCJ1c2UiLCJzaXplIiwiYmFzZUNvc3QiLCJjb3N0TXVsdGlwbGllciIsInB1cmNoYXNlZCIsImdpZnRlZCIsInVubG9ja2VkIiwiRElSVFBJTEUiLCJzdG9yZXMiLCJTT0RIT1VTRSIsIldFTEwiLCJwcm9kdWNlcyIsImRlZmF1bHRCdWlsZGluZ3MiLCJtZXJnZSIsInVwZGF0ZVN0b3JhZ2UiLCJ1cGRhdGVIb3VzaW5nIiwiZ2V0QnVpbGRpbmdTbmFwc2hvdCIsInNuYXBzaG90Iiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJidWlsZGluZyIsImZvcm1hdERlc2NyaXB0aW9uIiwiZ2V0U2l6ZSIsIm93bmVkIiwiY2FsY3VsYXRlTmV4dENvc3QiLCJtdWx0aXBsaWVyIiwiYnJlZWRpbmdTaXplTXVsdGlwbGllciIsInN0b3JhZ2VTaXplTXVsdGlwbGllciIsImhvdXNpbmdTaXplTXVsdGlwbGllciIsImNvc3RzIiwiY29zdCIsIm5leHRBbW91bnQiLCJwb3ciLCJ0eXBlTXVsdCIsInNpemVNdWx0aXBsaWVyIiwic2V0QnJlZWRlckxpbWl0IiwicmVzb3VyY2VzIiwiZ2V0UmVzb3VyY2VzU25hcHNob3QiLCJydCIsIm5ld0Ftb3VudCIsInNldFJlc291cmNlTGltaXQiLCJzZXRQb3B1bGF0aW9uTGltaXQiLCJhdXRvU2F2ZVN0ZXBzIiwiZ2FtZUxvb3BTZXJ2aWNlU3RhdGUiLCJzdGVwVGltZU1zIiwicG9wdWxhdGlvblNlcnZpY2VTdGF0ZSIsInBvcHVsYXRpb25TdGF0ZSIsImFjaGlldmVtZW50U2VydmljZVN0YXRlIiwicmVzb3VyY2VTZXJ2aWNlU3RhdGUiLCJidWlsZGluZ1NlcnZpY2VTdGF0ZSIsIiR3aW5kb3ciLCJpbml0aWFsaXplZCIsImxhc3RUaW1lIiwiZ2FtZUxvb3AiLCJuZXdTdGF0ZSIsInN0ZXAiLCJzdGVwcyIsIiRhcHBseSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlN1YnNjcmliZUdhbWVMb29wRXZlbnQiLCJnYW1lU2F2ZUtleSIsImRlZmF1bHRTdGF0ZSIsIkxaU3RyaW5nIiwianNvbiIsImRlY29tcHJlc3NGcm9tQmFzZTY0IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNhdmVkU3RhdGUiLCJmcm9tSnNvbiIsImdhbWVTdGF0ZSIsInN0YXJ0R2FtZSIsInN0ZXBzU2luY2VTYXZlIiwicmVtb3ZlSXRlbSIsInNhdmVTdGF0ZSIsInNhdmUiLCJjb21wcmVzc1RvQmFzZTY0IiwidG9Kc29uIiwic2V0SXRlbSIsInNlbmRCcmVlZGVyVXBkYXRlRXZlbnQiLCJzZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50IiwiaGFuZGxlR2FtZUxvb3AiLCJwb3BVcGRhdGVkIiwib2Zmc3ByaW5nIiwibmV3TGltaXQiLCJESVJUIiwiQlJJQ0tTIiwiU1RFRUwiLCJXQVRFUiIsIldPT0QiLCJHT0xEIiwiU0NJRU5DRSIsIkhBUFBJTkVTUyIsIkVWT0NPSU4iLCJvdmVycmlkZUFsbE9uIiwiZGVmYXVsdExpbWl0cyIsInJlc291cmNlVHlwZSIsInBlcmsiLCJhZGRSZXNvdXJjZSIsImVycm9yIiwiU3Vic2NyaWJlUmVzb3VyY2VDaGFuZ2VkRXZlbnQiLCJTdWJzY3JpYmVSZXNvdXJjZUxpbWl0Q2hhbmdlZEV2ZW50IiwiU3Vic2NyaWJlUmVzb3VyY2VFbmFibGVkRXZlbnQiLCJyZXNvdXJjZUNoYW5nZWQiLCJyZXNvdXJjZUxpbWl0Q2hhbmdlZCIsInJlc291cmNlRW5hYmxlZCIsImdldFVubG9ja2VkUmVzb3VyY2VzIiwicmVzIiwiYml0IiwiZSIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0Il0sIm1hcHBpbmdzIjoiQUFFQSxRQUFBQSx1QkFBQUMsRUFBQUMsR0FDQSxNQUFBQyxNQUFBQyxNQUFBRCxLQUFBRSxVQUFBSCxFQUFBRCxFQUFBLEdBQUFBLElDNEJB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TUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxrQkFBQUMsSUFBQSxnQkFBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxnQkFBQUMsSUFBQSxZQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBRUExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUVBMUIsRUFBQSxLQUFBd0IsSUFBQSxXQUFBQyxJQUFBLFlBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsaUJBQUFDLElBQUEsY0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxZQUFBQyxJQUFBLFlBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsWUFBQUMsSUFBQSxZQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBRUExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsU0FBQUMsSUFBQSxPQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUNBMUIsRUFBQSxLQUFBd0IsSUFBQSxHQUFBQyxJQUFBLEdBQUFDLE1BQUEsUUFDQTFCLEVBQUEsS0FBQXdCLElBQUEsR0FBQUMsSUFBQSxHQUFBQyxNQUFBLFFBQ0ExQixFQUFBLEtBQUF3QixJQUFBLEdBQUFDLElBQUEsR0FBQUMsTUFBQSxRQUVBMUIsTUFHQXRJLEtBQUFtQyxTQUFBLG1CQUFBLFdBQ0EsR0FBQTRFLEtBQ0E1SCxLQUFBLFdBQ0EwRyxRQUNBLEdBQUEsSUFBQSxNQUNBLEVBQUEsR0FBQSxNQUVBb0UsZ0JBQUEsVUFHQTlLLEtBQUEsU0FDQTBHLFFBQ0EsR0FBQSxLQUFBLE1BQ0EsRUFBQSxHQUFBLE1BRUFvRSxnQkFBQSxZQUdBOUssS0FBQSxh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QUFrQixLQUFBLGlCQUFBLFNBQUFpWSxHQUNBQSxFQUFBQyxJQUFBLDJDQUNBLHMwQkNSQSxTQUFBcFosR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHVCQUNBLE1BQUFrWixHQUNBbFosRUFBQUQsUUFBQUMsT0FBQSwwQkFFQUEsRUFBQWtCLEtBQUEsaUJBQUEsU0FBQWlZLEdBQ0FBLEVBQUFDLElBQUEsNkNBQ0EseStDQ1JBLFNBQUFwWixHQUNBLElBQ0FBLEVBQUFELFFBQUFDLE9BQUEsdUJBQ0EsTUFBQWtaLEdBQ0FsWixFQUFBRCxRQUFBQyxPQUFBLDBCQUVBQSxFQUFBa0IsS0FBQSxpQkFBQSxTQUFBaVksR0FDQUEsRUFBQUMsSUFBQSwwQ0FDQSxtNkJDUkEsU0FBQXBaLEdBQ0EsSUFDQUEsRUFBQUQsUUFBQUMsT0FBQSx1QkFDQSxNQUFBa1osR0FDQWxaLEVBQUFELFFBQUFDLE9BQUEsMEJBRUFBLEVBQUFrQixLQUFBLGlCQUFBLFNBQUFpWSxHQUNBQSxFQUFBQyxJQUFBLDhDQUNBLHFoQkNSQSxTQUFBcFosR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHVCQUNBLE1BQUFrWixHQUNBbFosRUFBQUQsUUFBQUMsT0FBQSwwQkFFQUEsRUFBQWtCLEtBQUEsaUJBQUEsU0FBQWlZLEdBQ0FBLEVBQUFDLElBQUEsNENBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmZ1bmN0aW9uIHJhbmRvbUludEZyb21JbnRlcnZhbChtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbik7XHJcbn1cclxuZ2FtZS5jb25zdGFudCgnZ2FtZVNhdmVLZXknLCBcIkdFTkVUSVhfU0FWRVwiKTtcclxuZ2FtZS5jb25zdGFudCgnZ2FtZVN0YXRlcycsIHtcclxuICAgIFBBVVNFRDogMCxcclxuICAgIFJVTk5JTkc6IDFcclxufSk7XHJcblxyXG5nYW1lLmNvbnN0YW50KFwiZGVmYXVsdFN0YXRlXCIsIHtcclxuXHJcbiAgICBjbGVhckxvZzogdHJ1ZSxcclxuICAgIGF1dG9TYXZlU3RlcHM6IDMwLFxyXG4gICAgZ2FtZUxvb3BTZXJ2aWNlU3RhdGU6IHtcclxuICAgICAgICBzdGVwVGltZU1zOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgcG9wdWxhdGlvblNlcnZpY2VTdGF0ZToge1xyXG4gICAgICAgIGJyZWVkU3RlcHM6IDYsXHJcbiAgICAgICAgcG9wdWxhdGlvblN0YXRlOiB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTaXplOiAyLFxyXG4gICAgICAgICAgICBtYXhTaXplOiA1LFxyXG4gICAgICAgICAgICBicmVlZGVyR2VuZUNhcDogMTAwLFxyXG4gICAgICAgICAgICBicmVlZGVyR2VuZXNVbmxvY2tlZDogWzAsIDQyXSxcclxuICAgICAgICAgICAgYnJlZWRlck11dGF0aW9uQ2hhbmNlOiAxMFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBhY2hpZXZlbWVudFNlcnZpY2VTdGF0ZToge1xyXG4gICAgICAgIGFjaGlldmVtZW50czogW10sXHJcbiAgICAgICAgcGVya3M6IFtdXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VTZXJ2aWNlU3RhdGU6IHtcclxuICAgICAgICByZXNvdXJjZXM6IHt9XHJcbiAgICB9LFxyXG4gICAgYnVpbGRpbmdTZXJ2aWNlU3RhdGU6IHtcclxuICAgICAgICAvLyBzdG9yYWdlU2l6ZU11bHRpcGxpZXI6IDEuNSxcclxuICAgICAgICAvLyBicmVlZGluZ1NpemVNdWx0aXBsaWVyOiA1LFxyXG4gICAgICAgIC8vIGhvdXNpbmdTaXplTXVsdGlwbGllcjogMC41LFxyXG4gICAgICAgIGJ1aWxkaW5nczoge1xyXG4gICAgICAgICAgICAvLyBTT0RIT1VTRToge1xyXG4gICAgICAgICAgICAvLyAgICAgbXVsdGlwbGllcjogMlxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5nYW1lLnNlcnZpY2UoJ2dhbWVMb29wU2VydmljZScsIFsnJHdpbmRvdycsICckcm9vdFNjb3BlJywgJ2dhbWVTdGF0ZXMnLCAnbG9nU2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkd2luZG93LCAkcm9vdFNjb3BlLCBnYW1lU3RhdGVzLCBsb2dTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHt9O1xyXG4gICAgICAgICAgICBzZWxmLnN0ZXBUaW1lTXMgPSBzdGF0ZS5zdGVwVGltZU1zIHx8IHNlbGYuc3RlcFRpbWVNcyB8fCAxMDAwO1xyXG4gICAgICAgICAgICBzZWxmLmxhc3RUaW1lID0gMDtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBnYW1lU3RhdGVzLlBBVVNFRDtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZ2FtZUxvb3AoMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gc3RhdGUuY3VycmVudFN0YXRlIHx8IHNlbGYuY3VycmVudFN0YXRlIHx8IGdhbWVTdGF0ZXMuUlVOTklORztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdGVwVGltZU1zOiBzZWxmLnN0ZXBUaW1lTXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGU6IHNlbGYuY3VycmVudFN0YXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNldFN0YXRlID0gZnVuY3Rpb24obmV3U3RhdGUpIHtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBuZXdTdGF0ZTtcclxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlID09PSBnYW1lU3RhdGVzLlBBVVNFRCkgbG9nU2VydmljZS5sb2dHZW5lcmFsTWVzc2FnZShcIkdhbWUgcGF1c2VkLlwiKTtcclxuICAgICAgICAgICAgZWxzZSBsb2dTZXJ2aWNlLmxvZ0dlbmVyYWxNZXNzYWdlKFwiR2FtZSByZXN1bWVkLlwiKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdhbWVMb29wID0gZnVuY3Rpb24oc3RlcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzdGVwcyA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChzZWxmLmxhc3RUaW1lICsgc3RlcCA+IChzZWxmLnN0ZXBUaW1lTXMgKiAoc3RlcHMgKyAxKSkpIHtcclxuICAgICAgICAgICAgICAgIHN0ZXBzKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5sYXN0VGltZSA9IChzZWxmLmxhc3RUaW1lIC0gKHNlbGYuc3RlcFRpbWVNcyAqIHN0ZXBzKSk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRTdGF0ZSA9PSBnYW1lU3RhdGVzLlJVTk5JTkcgJiYgc3RlcHMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgkcm9vdFNjb3BlLiRlbWl0KCdnYW1lTG9vcEV2ZW50Jywgc3RlcHMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmdhbWVMb29wLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuU3Vic2NyaWJlR2FtZUxvb3BFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdnYW1lTG9vcEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7XHJcblxyXG5nYW1lLnNlcnZpY2UoJ2dhbWVTZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnZ2FtZVNhdmVLZXknLCAnZGVmYXVsdFN0YXRlJywgJ2xvZ1NlcnZpY2UnLCAnZ2FtZUxvb3BTZXJ2aWNlJywgJ3BvcHVsYXRpb25TZXJ2aWNlJywgJ2FjaGlldmVtZW50U2VydmljZScsICdyZXNvdXJjZVNlcnZpY2UnLCAnYnVpbGRpbmdTZXJ2aWNlJywgJ0xaU3RyaW5nJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsIGdhbWVTYXZlS2V5LCBkZWZhdWx0U3RhdGUsIGxvZ1NlcnZpY2UsIGdhbWVMb29wU2VydmljZSwgcG9wdWxhdGlvblNlcnZpY2UsIGFjaGlldmVtZW50U2VydmljZSwgcmVzb3VyY2VTZXJ2aWNlLCBidWlsZGluZ1NlcnZpY2UsIExaU3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uID0gTFpTdHJpbmcuZGVjb21wcmVzc0Zyb21CYXNlNjQobG9jYWxTdG9yYWdlLmdldEl0ZW0oZ2FtZVNhdmVLZXkpKTtcclxuICAgICAgICAgICAgdmFyIHNhdmVkU3RhdGUgPSAoanNvbikgPyBhbmd1bGFyLmZyb21Kc29uKGpzb24pIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBzZWxmLmdhbWVTdGF0ZSA9IHN0YXRlIHx8IHNhdmVkU3RhdGUgfHwgZGVmYXVsdFN0YXRlO1xyXG4gICAgICAgICAgICBzZWxmLmF1dG9TYXZlU3RlcHMgPSBzZWxmLmdhbWVTdGF0ZS5hdXRvU2F2ZVN0ZXBzIHx8IHNlbGYuYXV0b1NhdmVTdGVwcyB8fCAxMDtcclxuICAgICAgICAgICAgc2VsZi5zdGFydEdhbWUoKTtcclxuICAgICAgICAgICAgc2VsZi5zdGVwc1NpbmNlU2F2ZSA9IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnN0YXJ0R2FtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsb2dTZXJ2aWNlLmluaXQoc2VsZi5nYW1lU3RhdGUuY2xlYXJMb2cpO1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUucG9wdWxhdGlvblNlcnZpY2VTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmdhbWVTdGF0ZS5wb3B1bGF0aW9uU2VydmljZVN0YXRlXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICByZXNvdXJjZVNlcnZpY2UuaW5pdChcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2Uoe30sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFN0YXRlLnJlc291cmNlU2VydmljZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2FtZVN0YXRlLnJlc291cmNlU2VydmljZVN0YXRlXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UuaW5pdChcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2Uoe30sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFN0YXRlLmFjaGlldmVtZW50U2VydmljZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2FtZVN0YXRlLmFjaGlldmVtZW50U2VydmljZVN0YXRlXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBidWlsZGluZ1NlcnZpY2UuaW5pdChcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2Uoe30sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFN0YXRlLmJ1aWxkaW5nU2VydmljZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2FtZVN0YXRlLmJ1aWxkaW5nU2VydmljZVN0YXRlKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgZ2FtZUxvb3BTZXJ2aWNlLmluaXQoXHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLm1lcmdlKHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTdGF0ZS5nYW1lTG9vcFNlcnZpY2VTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmdhbWVTdGF0ZS5nYW1lTG9vcFNlcnZpY2VTdGF0ZVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuaGFyZFJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGdhbWVTYXZlS2V5KTtcclxuICAgICAgICAgICAgc2VsZi5pbml0KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2FtZUxvb3BTZXJ2aWNlLlN1YnNjcmliZUdhbWVMb29wRXZlbnQoJHJvb3RTY29wZSwgZnVuY3Rpb24oZXZlbnQsIHN0ZXBzKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZVNhdmUgKz0gc3RlcHM7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnN0ZXBzU2luY2VTYXZlID4gc2VsZi5hdXRvU2F2ZVN0ZXBzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2F2ZVN0YXRlID0gYW5ndWxhci5jb3B5KHNlbGYuZ2FtZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZS5wb3B1bGF0aW9uU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KHBvcHVsYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgc2F2ZVN0YXRlLnJlc291cmNlU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KHJlc291cmNlU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgIHNhdmVTdGF0ZS5hY2hpZXZlbWVudFNlcnZpY2VTdGF0ZSA9IGFuZ3VsYXIuY29weShhY2hpZXZlbWVudFNlcnZpY2UuZ2V0U3RhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICBzYXZlU3RhdGUuYnVpbGRpbmdTZXJ2aWNlU3RhdGUgPSBhbmd1bGFyLmNvcHkoYnVpbGRpbmdTZXJ2aWNlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgc2F2ZVN0YXRlLmdhbWVMb29wU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KGdhbWVMb29wU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgIHZhciBzYXZlID0gTFpTdHJpbmcuY29tcHJlc3NUb0Jhc2U2NChhbmd1bGFyLnRvSnNvbihhbmd1bGFyLmNvcHkoc2F2ZVN0YXRlKSkpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZ2FtZVNhdmVLZXksIHNhdmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxvZ1NlcnZpY2UubG9nR2VuZXJhbE1lc3NhZ2UoJ0dhbWUgYXV0b3NhdmVkLicpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zdGVwc1NpbmNlU2F2ZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcbl0pOyIsIi8qIVxyXG4gKiBHZW5lcmF0ZSBCaXRtYXAgRGF0YSBVUkxcclxuICogaHR0cDovL21yY29sZXMuY29tL2xvdy1yZXMtcGFpbnQvXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDEwLCBQZXRlciBDb2xlc1xyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VzLlxyXG4gKiBodHRwOi8vbXJjb2xlcy5jb20vbWVkaWEvbWl0LWxpY2Vuc2UudHh0XHJcbiAqXHJcbiAqIERhdGU6IFR1ZSBPY3QgMjYgMDA6MDA6MDAgMjAxMCAtMDUwMFxyXG4gKi9cclxuXHJcbi8qXHJcbiAqIENvZGUgdG8gZ2VuZXJhdGUgQml0bWFwIGltYWdlcyAodXNpbmcgZGF0YSB1cmxzKSBmcm9tIHJvd3Mgb2YgUkdCIGFycmF5cy5cclxuICogU3BlY2lmaWNhbGx5IGZvciB1c2Ugd2l0aCBodHRwOi8vbXJjb2xlcy5jb20vbG93LXJlc3QtcGFpbnQvXHJcbiAqXHJcbiAqIFJlc2VhcmNoOlxyXG4gKlxyXG4gKiBSRkMgMjM5NyBkYXRhIFVSTFxyXG4gKiBodHRwOi8vd3d3LnhzNGFsbC5ubC9+d3JiL0FydGljbGVzL0FydGljbGVfSU1HX1JGQzIzOTdfUDFfMDEuaHRtXHJcbiAqXHJcbiAqIEJNUCBmaWxlIEZvcm1hdFxyXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JNUF9maWxlX2Zvcm1hdCNFeGFtcGxlX29mX2FfMi5DMy45NzJfUGl4ZWwuMkNfMjQtQml0X0JpdG1hcF8uMjhXaW5kb3dzX1YzX0RJQi4yOVxyXG4gKlxyXG4gKiBCTVAgTm90ZXNcclxuICpcclxuICogLSBJbnRlZ2VyIHZhbHVlcyBhcmUgbGl0dGxlLWVuZGlhbiwgaW5jbHVkaW5nIFJHQiBwaXhlbHMsIGUuZy4sICgyNTUsIDAsIDApIC0+IFxceDAwXFx4MDBcXHhGRlxyXG4gKiAtIEJpdG1hcCBkYXRhIHN0YXJ0cyBhdCBsb3dlciBsZWZ0IChhbmQgcmVhZHMgYWNyb3NzIHJvd3MpXHJcbiAqIC0gSW4gdGhlIEJNUCBkYXRhLCBwYWRkaW5nIGJ5dGVzIGFyZSBpbnNlcnRlZCBpbiBvcmRlciB0byBrZWVwIHRoZSBsaW5lcyBvZiBkYXRhIGluIG11bHRpcGxlcyBvZiBmb3VyLFxyXG4gKiAgIGUuZy4sIGEgMjQtYml0IGJpdG1hcCB3aXRoIHdpZHRoIDEgd291bGQgaGF2ZSAzIGJ5dGVzIG9mIGRhdGEgcGVyIHJvdyAoUiwgRywgQikgKyAxIGJ5dGUgb2YgcGFkZGluZ1xyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBfYXNMaXR0bGVFbmRpYW5IZXgodmFsdWUsIGJ5dGVzKSB7XHJcbiAgICAgICAgLy8gQ29udmVydCB2YWx1ZSBpbnRvIGxpdHRsZSBlbmRpYW4gaGV4IGJ5dGVzXHJcbiAgICAgICAgLy8gdmFsdWUgLSB0aGUgbnVtYmVyIGFzIGEgZGVjaW1hbCBpbnRlZ2VyIChyZXByZXNlbnRpbmcgYnl0ZXMpXHJcbiAgICAgICAgLy8gYnl0ZXMgLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhpcyB2YWx1ZSB0YWtlcyB1cCBpbiBhIHN0cmluZ1xyXG5cclxuICAgICAgICAvLyBFeGFtcGxlOlxyXG4gICAgICAgIC8vIF9hc0xpdHRsZUVuZGlhbkhleCgyODM1LCA0KVxyXG4gICAgICAgIC8vID4gJ1xceDEzXFx4MGJcXHgwMFxceDAwJ1xyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgIGZvciAoOyBieXRlcyA+IDA7IGJ5dGVzLS0pIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSAmIDI1NSkpO1xyXG4gICAgICAgICAgICB2YWx1ZSA+Pj0gODtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2NvbGxhcHNlRGF0YShyb3dzLCByb3dfcGFkZGluZykge1xyXG4gICAgICAgIC8vIENvbnZlcnQgcm93cyBvZiBSR0IgYXJyYXlzIGludG8gQk1QIGRhdGFcclxuICAgICAgICB2YXIgaSxcclxuICAgICAgICAgICAgcm93c19sZW4gPSByb3dzLmxlbmd0aCxcclxuICAgICAgICAgICAgaixcclxuICAgICAgICAgICAgcGl4ZWxzX2xlbiA9IHJvd3NfbGVuID8gcm93c1swXS5sZW5ndGggOiAwLFxyXG4gICAgICAgICAgICBwaXhlbCxcclxuICAgICAgICAgICAgcGFkZGluZyA9ICcnLFxyXG4gICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICg7IHJvd19wYWRkaW5nID4gMDsgcm93X3BhZGRpbmctLSkge1xyXG4gICAgICAgICAgICBwYWRkaW5nICs9ICdcXHgwMCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm93c19sZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcGl4ZWxzX2xlbjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBwaXhlbCA9IHJvd3NbaV1bal07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHBpeGVsWzJdKSArXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShwaXhlbFsxXSkgK1xyXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUocGl4ZWxbMF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQucHVzaChwYWRkaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3NjYWxlUm93cyhyb3dzLCBzY2FsZSkge1xyXG4gICAgICAgIC8vIFNpbXBsZXN0IHNjYWxpbmcgcG9zc2libGVcclxuICAgICAgICB2YXIgcmVhbF9oID0gcm93cy5sZW5ndGgsXHJcbiAgICAgICAgICAgIHNjYWxlZF9oID0gcGFyc2VJbnQocmVhbF9oICogc2NhbGUpLFxyXG4gICAgICAgICAgICByZWFsX3cgPSByZWFsX2ggPyByb3dzWzBdLmxlbmd0aCA6IDAsXHJcbiAgICAgICAgICAgIHNjYWxlZF93ID0gcGFyc2VJbnQocmVhbF93ICogc2NhbGUpLFxyXG4gICAgICAgICAgICBuZXdfcm93cyA9IFtdLFxyXG4gICAgICAgICAgICBuZXdfcm93LCB4LCB5O1xyXG5cclxuICAgICAgICBmb3IgKHkgPSAwOyB5IDwgc2NhbGVkX2g7IHkrKykge1xyXG4gICAgICAgICAgICBuZXdfcm93cy5wdXNoKG5ld19yb3cgPSBbXSk7XHJcbiAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCBzY2FsZWRfdzsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdfcm93LnB1c2gocm93c1twYXJzZUludCh5IC8gc2NhbGUpXVtwYXJzZUludCh4IC8gc2NhbGUpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld19yb3dzO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5nZW5lcmF0ZUJpdG1hcERhdGFVUkwgPSBmdW5jdGlvbihyb3dzLCBzY2FsZSkge1xyXG4gICAgICAgIC8vIEV4cGVjdHMgcm93cyBzdGFydGluZyBpbiBib3R0b20gbGVmdFxyXG4gICAgICAgIC8vIGZvcm1hdHRlZCBsaWtlIHRoaXM6IFtbWzI1NSwgMCwgMF0sIFsyNTUsIDI1NSwgMF0sIC4uLl0sIC4uLl1cclxuICAgICAgICAvLyB3aGljaCByZXByZXNlbnRzOiBbW3JlZCwgeWVsbG93LCAuLi5dLCAuLi5dXHJcblxyXG4gICAgICAgIGlmICghd2luZG93LmJ0b2EpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ09oIG5vLCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBiYXNlNjQgZW5jb2RpbmcgLSB3aW5kb3cuYnRvYSgpISEnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAxO1xyXG4gICAgICAgIGlmIChzY2FsZSAhPSAxKSB7XHJcbiAgICAgICAgICAgIHJvd3MgPSBfc2NhbGVSb3dzKHJvd3MsIHNjYWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBoZWlnaHQgPSByb3dzLmxlbmd0aCwgLy8gdGhlIG51bWJlciBvZiByb3dzXHJcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ID8gcm93c1swXS5sZW5ndGggOiAwLCAvLyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgcGVyIHJvd1xyXG4gICAgICAgICAgICByb3dfcGFkZGluZyA9ICg0IC0gKHdpZHRoICogMykgJSA0KSAlIDQsIC8vIHBhZCBlYWNoIHJvdyB0byBhIG11bHRpcGxlIG9mIDQgYnl0ZXNcclxuICAgICAgICAgICAgbnVtX2RhdGFfYnl0ZXMgPSAod2lkdGggKiAzICsgcm93X3BhZGRpbmcpICogaGVpZ2h0LCAvLyBzaXplIGluIGJ5dGVzIG9mIEJNUCBkYXRhXHJcbiAgICAgICAgICAgIG51bV9maWxlX2J5dGVzID0gNTQgKyBudW1fZGF0YV9ieXRlcywgLy8gZnVsbCBoZWFkZXIgc2l6ZSAob2Zmc2V0KSArIHNpemUgb2YgZGF0YVxyXG4gICAgICAgICAgICBmaWxlO1xyXG5cclxuICAgICAgICBoZWlnaHQgPSBfYXNMaXR0bGVFbmRpYW5IZXgoaGVpZ2h0LCA0KTtcclxuICAgICAgICB3aWR0aCA9IF9hc0xpdHRsZUVuZGlhbkhleCh3aWR0aCwgNCk7XHJcbiAgICAgICAgbnVtX2RhdGFfYnl0ZXMgPSBfYXNMaXR0bGVFbmRpYW5IZXgobnVtX2RhdGFfYnl0ZXMsIDQpO1xyXG4gICAgICAgIG51bV9maWxlX2J5dGVzID0gX2FzTGl0dGxlRW5kaWFuSGV4KG51bV9maWxlX2J5dGVzLCA0KTtcclxuXHJcbiAgICAgICAgLy8gdGhlc2UgYXJlIHRoZSBhY3R1YWwgYnl0ZXMgb2YgdGhlIGZpbGUuLi5cclxuXHJcbiAgICAgICAgZmlsZSA9ICgnQk0nICsgLy8gXCJNYWdpYyBOdW1iZXJcIlxyXG4gICAgICAgICAgICBudW1fZmlsZV9ieXRlcyArIC8vIHNpemUgb2YgdGhlIGZpbGUgKGJ5dGVzKSpcclxuICAgICAgICAgICAgJ1xceDAwXFx4MDAnICsgLy8gcmVzZXJ2ZWRcclxuICAgICAgICAgICAgJ1xceDAwXFx4MDAnICsgLy8gcmVzZXJ2ZWRcclxuICAgICAgICAgICAgJ1xceDM2XFx4MDBcXHgwMFxceDAwJyArIC8vIG9mZnNldCBvZiB3aGVyZSBCTVAgZGF0YSBsaXZlcyAoNTQgYnl0ZXMpXHJcbiAgICAgICAgICAgICdcXHgyOFxceDAwXFx4MDBcXHgwMCcgKyAvLyBudW1iZXIgb2YgcmVtYWluaW5nIGJ5dGVzIGluIGhlYWRlciBmcm9tIGhlcmUgKDQwIGJ5dGVzKVxyXG4gICAgICAgICAgICB3aWR0aCArIC8vIHRoZSB3aWR0aCBvZiB0aGUgYml0bWFwIGluIHBpeGVscypcclxuICAgICAgICAgICAgaGVpZ2h0ICsgLy8gdGhlIGhlaWdodCBvZiB0aGUgYml0bWFwIGluIHBpeGVscypcclxuICAgICAgICAgICAgJ1xceDAxXFx4MDAnICsgLy8gdGhlIG51bWJlciBvZiBjb2xvciBwbGFuZXMgKDEpXHJcbiAgICAgICAgICAgICdcXHgxOFxceDAwJyArIC8vIDI0IGJpdHMgLyBwaXhlbFxyXG4gICAgICAgICAgICAnXFx4MDBcXHgwMFxceDAwXFx4MDAnICsgLy8gTm8gY29tcHJlc3Npb24gKDApXHJcbiAgICAgICAgICAgIG51bV9kYXRhX2J5dGVzICsgLy8gc2l6ZSBvZiB0aGUgQk1QIGRhdGEgKGJ5dGVzKSpcclxuICAgICAgICAgICAgJ1xceDEzXFx4MEJcXHgwMFxceDAwJyArIC8vIDI4MzUgcGl4ZWxzL21ldGVyIC0gaG9yaXpvbnRhbCByZXNvbHV0aW9uXHJcbiAgICAgICAgICAgICdcXHgxM1xceDBCXFx4MDBcXHgwMCcgKyAvLyAyODM1IHBpeGVscy9tZXRlciAtIHRoZSB2ZXJ0aWNhbCByZXNvbHV0aW9uXHJcbiAgICAgICAgICAgICdcXHgwMFxceDAwXFx4MDBcXHgwMCcgKyAvLyBOdW1iZXIgb2YgY29sb3JzIGluIHRoZSBwYWxldHRlIChrZWVwIDAgZm9yIDI0LWJpdClcclxuICAgICAgICAgICAgJ1xceDAwXFx4MDBcXHgwMFxceDAwJyArIC8vIDAgaW1wb3J0YW50IGNvbG9ycyAobWVhbnMgYWxsIGNvbG9ycyBhcmUgaW1wb3J0YW50KVxyXG4gICAgICAgICAgICBfY29sbGFwc2VEYXRhKHJvd3MsIHJvd19wYWRkaW5nKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiAnZGF0YTppbWFnZS9ibXA7YmFzZTY0LCcgKyBidG9hKGZpbGUpO1xyXG4gICAgfTtcclxuXHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbi8vXHJcbi8vIENvZGUgc3BlY2lmaWMgdG8gbG93IHJlcyBwYWludFxyXG4vL1xyXG5cclxuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuICAgIHZhciAkYmdfdHJhbnNmb3JtO1xyXG5cclxuICAgIGZ1bmN0aW9uIF9hc3NpZ25fYmdfdHJhbnNmb3JtKGJnKSB7XHJcbiAgICAgICAgLy8gZGlmZmVyZW50IGJyb3dzZXJzIHJldHVybiB0aGUgY29sb3IgZGlmZmVyZW50bHlcclxuICAgICAgICAvLyBsZXQncyBzdXBwb3J0IFwicmdiKDEyMywgMCwgNSlcIiwgXCIjZmZmXCIsIGFuZCBcIiNmZjAwOTlcIlxyXG4gICAgICAgIGlmICgvXnJnYlxcKFxcZCssIFxcZCssIFxcZCtcXCkkLy50ZXN0KGJnKSkge1xyXG4gICAgICAgICAgICAkYmdfdHJhbnNmb3JtID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICAgICAgeCA9IHguc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgIHhbMF0gPSB4WzBdLnN1YnN0cig0KTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0OyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeFtpXSA9IHBhcnNlSW50KHhbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChiZy5zdWJzdHJpbmcoMCwgMSkgPT0gJyMnKSB7XHJcbiAgICAgICAgICAgICRiZ190cmFuc2Zvcm0gPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgICAgICB4ID0geC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuID0geC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KCcweCcgKyB4LnN1YnN0cmluZyhpLCBpICsgMSkgKyB4LnN1YnN0cmluZyhpLCBpICsgMSkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoJzB4JyArIHguc3Vic3RyaW5nKGksIGkgKyAyKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWxlcnQoJ1VucGFyc2VhYmxlIGNvbG9yOiAnICsgYmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiAkYmdBc1JHQihpZCkge1xyXG4gICAgICAgIHZhciBiZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgaWYgKGJnID09PSAnJykgcmV0dXJuIFsyNTUsIDI1NSwgMjU1XTtcclxuICAgICAgICBpZiAoJGJnX3RyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF9hc3NpZ25fYmdfdHJhbnNmb3JtKGJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICRiZ190cmFuc2Zvcm0oYmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5nZW5lcmF0ZUxvd1Jlc0JpdG1hcCA9IGZ1bmN0aW9uKHNjYWxlKSB7XHJcbiAgICAgICAgLy8gcGl4ZWxzIGFyZSB4X3kgc3RhcnRpbmcgaW4gdG9wIGxlZnQsIHdlIG5lZWQgdG8gaXRlcmF0ZSBmcm9tIGJvdHRvbSBsZWZ0XHJcbiAgICAgICAgLy8gZGltZW5zaW9ucyBhcmUgYSA1MHg1MCBzcXVhcmUgKDAsIDAsIDQ5LCA0OSlcclxuXHJcbiAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAxMDtcclxuXHJcbiAgICAgICAgdmFyIHgsXHJcbiAgICAgICAgICAgIHhfbGVuID0gNTAsXHJcbiAgICAgICAgICAgIHkgPSA0OSxcclxuICAgICAgICAgICAgcm93cyA9IFtdLFxyXG4gICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgIGltZ19wYXJlbnQsXHJcbiAgICAgICAgICAgIGltZyxcclxuICAgICAgICAgICAgc3JjO1xyXG5cclxuICAgICAgICBmb3IgKDsgeSA+PSAwOyB5LS0pIHtcclxuICAgICAgICAgICAgcm93cy5wdXNoKHJvdyA9IFtdKTtcclxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHhfbGVuOyB4KyspIHtcclxuICAgICAgICAgICAgICAgIHJvdy5wdXNoKCRiZ0FzUkdCKHggKyAnXycgKyB5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIHRlc3QgaW1hZ2UgKiAvXHJcbiAgICAgICAgcm93cyA9IFtcclxuICAgICAgICAgICAgW1syNTUsIDAsIDBdLCBbMjU1LCAyNTUsIDI1NV1dLFxyXG4gICAgICAgICAgICBbWzAsIDAsIDI1NV0sIFswLCAyNTUsMF1dXHJcbiAgICAgICAgXTtcclxuICAgICAgICAvKiAqL1xyXG5cclxuICAgICAgICBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBzcmMgPSB3aW5kb3cuZ2VuZXJhdGVCaXRtYXBEYXRhVVJMKHJvd3MsIHNjYWxlKTtcclxuICAgICAgICBpbWcuc3JjID0gc3JjO1xyXG4gICAgICAgIGltZy5hbHQgPSAnSWYgeW91IGNhbiByZWFkIHRoaXMsIHlvdXIgYnJvd3NlciBwcm9iYWJseSBkb2VzblxcJ3Qgc3VwcG9ydCB0aGUgZGF0YSBVUkwgc2NoZW1lIGZvcm1hdCEgT2ggbm8hJztcclxuICAgICAgICBpbWcudGl0bGUgPSAnWW91IGdlbmVyYXRlZCBhbiBpbWFnZSwgZ3JlYXQgam9iISBUbyBzYXZlIGl0LCBkcmFnIGl0IHRvIHlvdXIgRGVza3RvcCBvciByaWdodCBjbGljayBhbmQgc2VsZWN0IHNhdmUgYXMuJztcclxuICAgICAgICBpbWdfcGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZycpO1xyXG4gICAgICAgIGlmIChpbWdfcGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGltZ19wYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaW1nX3BhcmVudC5pZCA9ICdpbWcnO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JhcCcpLmFwcGVuZENoaWxkKGltZ19wYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbWdfcGFyZW50LmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwiaW1nLWhlYWRlclwiPkdlbmVyYXRlZCBJbWFnZSAmbmJzcDs8YSB0aXRsZT1cImhpZGUgaW1hZ2VcIiBocmVmPVwiI1wiPng8L2E+PC9kaXY+JztcclxuICAgICAgICBpbWdfcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgaW1nX3BhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWcnKTtcclxuICAgICAgICAgICAgaW1nX3BhcmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGltZ19wYXJlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbWdfcGFyZW50LmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuZ2VuZXJhdGVMb3dSZXNCaXRtYXAuYXNrVG9TY2FsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzY2FsZSA9IHByb21wdCgnUGljayBhIHNjYWxpbmcgZmFjdG9yLi4uXFxuMSA9IGFjdHVhbCBzaXplLCAuNSA9IGhhbGYsIDIgPSBkb3VibGVcXG4obm90ZTogbGFyZ2UgbnVtYmVycyBtaWdodCBjcmFzaCB5b3VyIGJyb3dzZXIpJyk7XHJcbiAgICAgICAgaWYgKHNjYWxlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHBhcnNlRmxvYXQoc2NhbGUpO1xyXG4gICAgICAgICAgICB9IGNhdGNoICh4KSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IE5hTjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNOYU4oc2NhbGUpKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnVGhhdCBpcyBub3QgYSBudW1iZXIhJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlICogMTA7IC8vIHNpbmNlIGFjdHVhbCBzaXplIGlzIGFjdHVhbGx5IDEweCFcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5nZW5lcmF0ZUxvd1Jlc0JpdG1hcChzY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxufSkodGhpcywgdGhpcy5kb2N1bWVudCk7IiwiLy8gKGZ1bmN0aW9uKCQpIHtcclxuLy8gICAgICQoZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgJCgnYm9keScpLnRvb2x0aXAoe1xyXG4vLyAgICAgICAgICAgICBzZWxlY3RvcjogJ1tyZWw9dG9vbHRpcF0nXHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9KTtcclxuLy8gfSkoalF1ZXJ5KTtcclxuXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFsndWkucm91dGVyJywgJ2x6LXN0cmluZycsICd1aS5ib290c3RyYXAnXSlcclxuICAgIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHVpYlRvb2x0aXBQcm92aWRlcicsXHJcbiAgICAgICAgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIsICR1aWJUb29sdGlwUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL21haW4nKTtcclxuICAgICAgICAgICAgdmFyIHN0YXRlcyA9IFtdO1xyXG4gICAgICAgICAgICBzdGF0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnaG9tZScsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2Jsb3FoZWFkLmNvbXBvbmVudHMuaG9tZSdcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzdGF0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnaG9tZS5tYWluJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ21haW4nLFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAnYmxvcWhlYWQuY29tcG9uZW50cy5tYWluR2FtZSdcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzdGF0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnaG9tZS5hY2hpZXZlbWVudHMnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnYWNoaWV2ZW1lbnRzJyxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2Jsb3FoZWFkLmNvbXBvbmVudHMuYWNoaWV2ZW1lbnRzVUknXHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3RhdGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hvbWUudGVzdCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICd0ZXN0JyxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2Jsb3FoZWFkLmNvbXBvbmVudHMudGVzdEludGVyZmFjZSdcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc3RhdGVzLmZvckVhY2goZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKHN0YXRlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICR1aWJUb29sdGlwUHJvdmlkZXIub3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBhcHBlbmRUb0JvZHk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AtbGVmdCcsXHJcbiAgICAgICAgICAgICAgICBwb3B1cENsb3NlRGVsYXk6IDI1MCxcclxuICAgICAgICAgICAgICAgIHBvcHVwRGVsYXk6IDI1MFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBdKS5ydW4oWydnYW1lU2VydmljZScsIGZ1bmN0aW9uKGdhbWVTZXJ2aWNlKSB7XHJcbiAgICAgICAgZ2FtZVNlcnZpY2UuaW5pdCgpO1xyXG4gICAgfV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuY29tcG9uZW50KCdibG9xaGVhZC5jb21wb25lbnRzLmFjaGlldmVtZW50c1VJJywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FjaGlldmVtZW50cy9hY2hpZXZlbWVudHMuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMuYWNoaWV2ZW1lbnRzVUknLFxyXG4gICAgYmluZGluZ3M6IHtcclxuICAgICAgICB0aXRsZTogJ0AnLFxyXG4gICAgICAgIGZvb3RlcjogJ0AnXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMuYWNoaWV2ZW1lbnRzVUknLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIH07XHJcbn0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuY29tcG9uZW50KCdibG9xaGVhZEJ1aWxkaW5nTGlzdCcsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9idWlsZGluZ0xpc3QvYnVpbGRpbmdMaXN0Lmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmJ1aWxkaW5nTGlzdCdcclxufSk7XHJcblxyXG5cclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy5idWlsZGluZ0xpc3QnLCBbXHJcbiAgICAnJHNjb3BlJywgJ2J1aWxkaW5nU2VydmljZScsICckc2NlJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgYnVpbGRpbmdTZXJ2aWNlLCAkc2NlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmJ1aWxkaW5ncyA9IFtdOyAvL2J1aWxkaW5nU2VydmljZS5nZXRCdWlsZGluZ1NuYXBzaG90KCk7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nU2VydmljZS5TdWJzY3JpYmVCdWlsZGluZ3NDaGFuZ2VkRXZlbnQoJHNjb3BlLCBzZWxmLnVwZGF0ZUJ1aWxkaW5ncyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZUJ1aWxkaW5ncyA9IGZ1bmN0aW9uKGV2ZW50LCBidWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgc2VsZi5idWlsZGluZ3MgPSBidWlsZGluZ3M7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVpbGRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGluZ3NbaV0udG9vbHRpcCA9ICRzY2UudHJ1c3RBc0h0bWwoc2VsZi5nZXRDb3N0VG9vbHRpcChidWlsZGluZ3NbaV0uY29zdFRvQnVpbGQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhidWlsZGluZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5nZXRDb3N0VG9vbHRpcCA9IGZ1bmN0aW9uKGNvc3RUb0J1aWxkKSB7XHJcbiAgICAgICAgICAgIHZhciB0b29sdGlwID0gJ1xcJzx1bCBjbGFzcz1cImxpc3QtZ3JvdXBcIj4nO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvc3RUb0J1aWxkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0b29sdGlwICs9ICc8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj48c3Bhbj4nICsgY29zdFRvQnVpbGRbaV0uYW1vdW50ICsgJzwvc3Bhbj4gPHNwYW4+JyArIGNvc3RUb0J1aWxkW2ldLnJlc291cmNlICsgJzwvc3Bhbj48L2xpPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdG9vbHRpcCArPSAnPC91bD5cXCcnO1xyXG4gICAgICAgICAgICByZXR1cm4gdG9vbHRpcDtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5hcHAuY29tcG9uZW50KCdibG9xaGVhZEdhbWVDb250cm9sJywge1xyXG4gICAgdGVtcGxhdGU6ICc8ZGl2PicgK1xyXG4gICAgICAgICc8YnV0dG9uIHRpdGxlPVwiSGFyZCBSZXNldFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4teHMgYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIiRjdHJsLnJlc2V0U2F2ZSgpO1wiPjxpIGNsYXNzPVwiZmEgZmEtcmVjeWNsZVwiPjwvaT48L2J1dHRvbj4nICtcclxuICAgICAgICAnPGJ1dHRvbiB0aXRsZT1cIlBsYXkvUGF1c2VcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCIkY3RybC50b2dnbGVTdGF0ZSgpO1wiPjxpIGNsYXNzPVwiZmFcIiBuZy1jbGFzcz1cIiRjdHJsLmdldEljb24oKVwiPjwvaT48L2J1dHRvbj4nICtcclxuICAgICAgICAnPC9kaXY+JyxcclxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJ2dhbWVTZXJ2aWNlJywgJ2dhbWVMb29wU2VydmljZScsICdnYW1lU3RhdGVzJywgZnVuY3Rpb24oJHNjb3BlLCBnYW1lU2VydmljZSwgZ2FtZUxvb3BTZXJ2aWNlLCBnYW1lU3RhdGVzKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IGdhbWVMb29wU2VydmljZS5nZXRTdGF0ZSgpLmN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudG9nZ2xlU3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSAoc2VsZi5jdXJyZW50U3RhdGUgPT09IGdhbWVTdGF0ZXMuUlVOTklORyA/IGdhbWVTdGF0ZXMuUEFVU0VEIDogZ2FtZVN0YXRlcy5SVU5OSU5HKTtcclxuICAgICAgICAgICAgZ2FtZUxvb3BTZXJ2aWNlLnNldFN0YXRlKHNlbGYuY3VycmVudFN0YXRlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0SWNvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jdXJyZW50U3RhdGUgPT09IGdhbWVTdGF0ZXMuUlVOTklORyA/ICdmYS1wYXVzZScgOiAnZmEtcGxheSc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJlc2V0U2F2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBnYW1lU2VydmljZS5oYXJkUmVzZXQoKTtcclxuICAgICAgICB9O1xyXG4gICAgfV1cclxufSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkTG9nJywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2xvZy9sb2cuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMubG9nJ1xyXG59KTtcclxuXHJcbmdhbWUuY29uc3RhbnQoJ2xvZ1R5cGVzJywge1xyXG4gICAgR0VORVJBTDogMSxcclxuICAgIEJSRUVEOiAyLFxyXG4gICAgQUNISUVWRU1FTlQ6IDNcclxufSk7XHJcblxyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMubG9nJywgW1xyXG4gICAgJyRzY29wZScsICdsb2dTZXJ2aWNlJywgJ2xvZ1R5cGVzJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgbG9nU2VydmljZSwgbG9nVHlwZXMpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMgPSBbXTtcclxuICAgICAgICAgICAgbG9nU2VydmljZS5TdWJzY3JpYmVOZXdNZXNzYWdlRXZlbnQoJHNjb3BlLCBzZWxmLnJlY2VpdmVNZXNzYWdlcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRMb2dDbGFzcyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIHByZWZpeCA9ICdsaXN0LWdyb3VwLWl0ZW0tJztcclxuICAgICAgICAgICAgdmFyIGEgPSAnJztcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGxvZ1R5cGVzLkdFTkVSQUw6XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9ICdjb2xvci1nZW5lcmFsJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgbG9nVHlwZXMuQUNISUVWRU1FTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9ICdjb2xvci1hY2hpZXZlbWVudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGxvZ1R5cGVzLkJSRUVEOlxyXG4gICAgICAgICAgICAgICAgICAgIGEgPSAnY29sb3ItYnJlZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBhID0gcHJlZml4ICsgJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYucmVjZWl2ZU1lc3NhZ2VzID0gZnVuY3Rpb24oZXZlbnQsIG1lc3NhZ2VzKSB7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMgPSBtZXNzYWdlcztcclxuICAgICAgICAgICAgJCgnLmxvZy1jb21wb25lbnQnKVswXS5zY3JvbGxUb3AgPSAkKCcubG9nLWNvbXBvbmVudCcpWzBdLnNjcm9sbEhlaWdodDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTtcclxuXHJcbmdhbWUuc2VydmljZSgnbG9nU2VydmljZScsIFsnJHJvb3RTY29wZScsICdsb2dUeXBlcycsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGxvZ1R5cGVzKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihjbGVhckxvZykge1xyXG4gICAgICAgIGlmIChjbGVhckxvZykge1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgICAgIHNlbGYubG9nR2VuZXJhbE1lc3NhZ2UoXCJXZWxjb21lIHRvIEdlbmV0aXghXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZWxmLmxvZ0dlbmVyYWxNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgICAgIHNlbGYubWVzc2FnZXMucHVzaCh7IHR5cGU6IGxvZ1R5cGVzLkdFTkVSQUwsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgICAgICBpZiAoc2VsZi5tZXNzYWdlcy5sZW5ndGggPiAxMDApXHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMuc3BsaWNlKDAsIDEpO1xyXG4gICAgICAgICRyb290U2NvcGUuJGVtaXQoJ25ld01lc3NhZ2VFdmVudCcsIHNlbGYubWVzc2FnZXMpO1xyXG4gICAgfTtcclxuICAgIHNlbGYubG9nQnJlZWRNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgICAgIHNlbGYubWVzc2FnZXMucHVzaCh7IHR5cGU6IGxvZ1R5cGVzLkJSRUVELCB0aW1lc3RhbXA6IERhdGUubm93KCksIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgaWYgKHNlbGYubWVzc2FnZXMubGVuZ3RoID4gMTAwKVxyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzLnNwbGljZSgwLCAxKTtcclxuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCduZXdNZXNzYWdlRXZlbnQnLCBzZWxmLm1lc3NhZ2VzKTtcclxuICAgIH07XHJcbiAgICBzZWxmLmxvZ0FjaGlldmVtZW50TWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2goeyB0eXBlOiBsb2dUeXBlcy5BQ0hJRVZFTUVOVCwgdGltZXN0YW1wOiBEYXRlLm5vdygpLCBtZXNzYWdlOiBtZXNzYWdlIH0pO1xyXG4gICAgICAgIGlmIChzZWxmLm1lc3NhZ2VzLmxlbmd0aCA+IDEwMClcclxuICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnbmV3TWVzc2FnZUV2ZW50Jywgc2VsZi5tZXNzYWdlcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNlbGYuU3Vic2NyaWJlTmV3TWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGhhbmRsZXIgPSAkcm9vdFNjb3BlLiRvbignbmV3TWVzc2FnZUV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgICRyb290U2NvcGUuJGVtaXQoJ25ld01lc3NhZ2VFdmVudCcsIHNlbGYubWVzc2FnZXMpO1xyXG4gICAgfTtcclxuXHJcbn1dKTsiLCJ2YXIgZ2FtZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWRQbGF5ZXJCb3gnLCB7XHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgcmVxdWlyZToge1xyXG4gICAgICAgIG1haW5DdHJsOiBcIl5ibG9xaGVhZC5jb21wb25lbnRzLmhvbWVcIlxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9wbGF5ZXJCb3gvcGxheWVyQm94Lmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLnBsYXllckJveCcsXHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHRpdGxlOiAnQCcsXHJcbiAgICAgICAgZm9vdGVyOiAnQCdcclxuICAgIH1cclxufSk7XHJcblxyXG5cclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy5wbGF5ZXJCb3gnLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGYudW5pdCA9IHNlbGYubWFpbkN0cmwudW5pdDtcclxuICAgIH07XHJcbn0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuZmlsdGVyKCdoYXNUcmFpdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVuaXRzLCB0cmFpdE5hbWUpIHtcclxuICAgICAgICB2YXIgcmV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgaWYgKHVuaXRzW2ldLmhhc1RyYWl0KHRyYWl0TmFtZSkpXHJcbiAgICAgICAgICAgICAgICByZXQucHVzaCh1bml0c1tpXSk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcbn0pO1xyXG5cclxuXHJcbmdhbWUuZmFjdG9yeSgnQnJlZWRlcicsIFsnJGZpbHRlcicsICdUcmFpdEluc3BlY3RvcicsIGZ1bmN0aW9uKCRmaWx0ZXIsIFRyYWl0SW5zcGVjdG9yKSB7XHJcblxyXG5cclxuXHJcbiAgICAvKiBjb25zdHJ1Y3RvciAqL1xyXG4gICAgdmFyIEJyZWVkZXIgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICB0aGlzLnRyYWl0SW5zcGVjdG9yID0gbmV3IFRyYWl0SW5zcGVjdG9yKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoY29uZmlnKTtcclxuICAgIH07XHJcbiAgICAvKiBwdWJsaWMgZnVuY3Rpb25zICovXHJcbiAgICBCcmVlZGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICBpZiAodHlwZW9mKGNvbmZpZykgPT0gJ3VuZGVmaW5lZCcpIGNvbmZpZyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaWQgPSBjb25maWcuaWQgfHwgdGhpcy5pZCB8fCAwO1xyXG4gICAgICAgIHRoaXMubW90aGVyID0gY29uZmlnLm1vdGhlciB8fCB0aGlzLm1vdGhlciB8fCBudWxsO1xyXG4gICAgICAgIHRoaXMuZmF0aGVyID0gY29uZmlnLmZhdGhlciB8fCB0aGlzLmZhdGhlciB8fCBudWxsO1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGlvbiA9IGNvbmZpZy5nZW5lcmF0aW9uIHx8IHRoaXMuZ2VuZXJhdGlvbiB8fCAwO1xyXG4gICAgICAgIHRoaXMuZ2VuZXMgPSBjb25maWcuZ2VuZXMgfHwgdGhpcy5nZW5lcyB8fCBbXTtcclxuICAgICAgICB0aGlzLmJyZWVkZXJHZW5lQ2FwID0gY29uZmlnLmJyZWVkZXJHZW5lQ2FwIHx8IHRoaXMuYnJlZWRlckdlbmVDYXAgfHwgMjU7XHJcblxyXG4gICAgICAgIHRoaXMucmVkR3JlZW5JbWFnZSA9IGdldFJlZEdyZWVuSW1hZ2UodGhpcy5nZW5lcywgdGhpcy5icmVlZGVyR2VuZUNhcCk7XHJcbiAgICAgICAgLy90aGlzLmJsdWVJbWFnZSA9IGdldEJsdWVJbWFnZSh0aGlzLmdlbmVzKTtcclxuXHJcbiAgICAgICAgdGhpcy50cmFpdHMgPSB0aGlzLnRyYWl0SW5zcGVjdG9yLmdldFRyYWl0cyh0aGlzLmdlbmVzKTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB0aGlzLnRyYWl0SW5zcGVjdG9yLmdldEF0dHJpYnV0ZXModGhpcy5nZW5lcyk7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9ICh0aGlzLm5hbWUgJiYgdGhpcy5uYW1lICE9PSAnVW5rbm93biBHZW5kZXInKSA/IHRoaXMubmFtZSA6IGNvbmZpZy5uYW1lIHx8IHRoaXMuZ2V0UmFuZG9tTmFtZSgpO1xyXG5cclxuICAgIH07XHJcbiAgICBCcmVlZGVyLnByb3RvdHlwZS5icmVlZCA9IGZ1bmN0aW9uKHBhcnRuZXIsIG5ld0lkKSB7XHJcbiAgICAgICAgdmFyIHAxID0gdGhpcztcclxuICAgICAgICB2YXIgcDIgPSBwYXJ0bmVyO1xyXG5cclxuICAgICAgICB2YXIgbXlHZW5kZXIgPSB0aGlzLmhhc1RyYWl0KCdNYWxlJykgPyAnTWFsZScgOiAnRmVtYWxlJztcclxuXHJcbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IEJyZWVkZXIoe1xyXG4gICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgIGdlbmVyYXRpb246IHAxLmdlbmVyYXRpb24gKyAxLFxyXG4gICAgICAgICAgICBnZW5lczogW10sXHJcbiAgICAgICAgICAgIG1vdGhlcjogbXlHZW5kZXIgPT0gJ0ZlbWFsZScgPyBwMSA6IHAyLFxyXG4gICAgICAgICAgICBmYXRoZXI6IG15R2VuZGVyID09ICdNYWxlJyA/IHAxIDogcDJcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBwMS5nZW5lcy5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICB2YXIgcDFnID0gcDEuZ2VuZXNbZ107XHJcbiAgICAgICAgICAgIHZhciBwMmcgPSBwMi5nZW5lc1tnXTtcclxuICAgICAgICAgICAgY2hpbGQuZ2VuZXMucHVzaChjcm9zc292ZXIocDFnLCBwMmcsIHRoaXMuYnJlZWRlckdlbmVDYXApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGQudXBkYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgfTtcclxuICAgIEJyZWVkZXIucHJvdG90eXBlLmdldFRyYWl0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYWl0cztcclxuICAgIH07XHJcbiAgICBCcmVlZGVyLnByb3RvdHlwZS5oYXNUcmFpdCA9IGZ1bmN0aW9uKHRyYWl0KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMudHJhaXRzLmZpbHRlcihmdW5jdGlvbihteVRyYWl0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBteVRyYWl0Lm5hbWUgPT09IHRyYWl0O1xyXG4gICAgICAgIH0pLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0ID4gMDtcclxuICAgIH07XHJcbiAgICBCcmVlZGVyLnByb3RvdHlwZS5nZXRSYW5kb21OYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdlbmVzIHx8IHRoaXMuZ2VuZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnVW5rbm93biBHZW5kZXInO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGZpcnN0TmFtZSA9ICh0aGlzLmhhc1RyYWl0KCdNYWxlJykpID8gbmFtZUxpc3QxW3JhbmRvbUludEZyb21JbnRlcnZhbCgwLCBuYW1lTGlzdDEubGVuZ3RoIC0gMSldIDogbmFtZUxpc3QyW3JhbmRvbUludEZyb21JbnRlcnZhbCgwLCBuYW1lTGlzdDIubGVuZ3RoIC0gMSldO1xyXG4gICAgICAgIHZhciBsYXN0TmFtZSA9IG5hbWVMaXN0M1tyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3QzLmxlbmd0aCAtIDEpXSArIG5hbWVMaXN0NFtyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3Q0Lmxlbmd0aCAtIDEpXSArIG5hbWVMaXN0NVtyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3Q1Lmxlbmd0aCAtIDEpXTtcclxuICAgICAgICByZXR1cm4gZmlyc3ROYW1lICsgbGFzdE5hbWU7XHJcbiAgICB9O1xyXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYWxsIHJlbGF0aW9ucyB0byBhY2NvdW50IGZvciBpbmJyZWVkaW5nIChha2EgdW5jbGUgYnJvdGhlcilcclxuICAgIC8qIHRoaXMgaXMgd2F5IHdyb25nLi4uLlxyXG4gICAgQnJlZWRlci5wcm90b3R5cGUuZ2V0UmVsYXRpb25zID0gZnVuY3Rpb24odGhleSkge1xyXG4gICAgICAgIHZhciBteXBhdGVybmFsID0gW107XHJcbiAgICAgICAgdmFyIG15bWF0ZXJuYWwgPSBbXTtcclxuICAgICAgICB2YXIgbXlHZW5kZXIgPSB0aGlzLmhhc1RyYWl0KCdNYWxlJykgPyAnTWFsZScgOiAnRmVtYWxlJztcclxuICAgICAgICB2YXIgdGhleXBhdGVybmFsID0gW107XHJcbiAgICAgICAgdmFyIHRoZXltYXRlcm5hbCA9IFtdO1xyXG4gICAgICAgIHZhciB0aGV5R2VuZGVyID0gdGhleS5oYXNUcmFpdCgnTWFsZScpID8gJ01hbGUnIDogJ0ZlbWFsZSc7XHJcblxyXG4gICAgICAgIHZhciB1O1xyXG4gICAgICAgIC8vIGJ1aWxkICdteScgbGlzdCBvZiBtb3RoZXJzIGFuZCBmYXRoZXJzXHJcbiAgICAgICAgdSA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKHUubW90aGVyICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBteW1hdGVybmFsLnB1c2godS5tb3RoZXIpO1xyXG4gICAgICAgICAgICB1ID0gdS5tb3RoZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHUgPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlICh1LmZhdGhlciAhPSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbXlwYXRlcm5hbC5wdXNoKHUuZmF0aGVyKTtcclxuICAgICAgICAgICAgdSA9IHUuZmF0aGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBidWlsZCAndGhleScgbGlzdCBvZiBtb3RoZXJzIGFuZCBmYXRoZXJzXHJcbiAgICAgICAgdSA9IHRoZXk7XHJcbiAgICAgICAgd2hpbGUgKHUubW90aGVyICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGV5bWF0ZXJuYWwucHVzaCh1Lm1vdGhlcik7XHJcbiAgICAgICAgICAgIHUgPSB1Lm1vdGhlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdSA9IHRoZXk7XHJcbiAgICAgICAgd2hpbGUgKHUuZmF0aGVyICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGV5cGF0ZXJuYWwucHVzaCh1LmZhdGhlcik7XHJcbiAgICAgICAgICAgIHUgPSB1LmZhdGhlcjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB2YXIgcmV0ID0gW107XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGZvciBtYXRlcm5hbCByZWxhdGlvbnNoaXBzXHJcbiAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCBteW1hdGVybmFsLmxlbmd0aDsgaCsrKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoZXltYXRlcm5hbC5sZW5ndGg7IGsrKylcclxuICAgICAgICAgICAgICAgIGlmIChteW1hdGVybmFsW2hdLmlkID09IHRoZXltYXRlcm5hbC5pZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBzYW1lIG1vdGhlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoID09IDAgJiYga2sgPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goKCh0aGlzLmZhdGhlci5pZCAhPSB0aGV5LmZhdGhlci5pZCkgPyAnSGFsZiAnIDogJycpICsgKCh0aGV5R2VuZGVyID09ICdGZW1hbGUnKSA/ICdTaXN0ZXInIDogJ0Jyb3RoZXInKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoID4gaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goJ0dyYW5kICcucmVwZWF0KChoLWspIC0gMSkgKyAgKCh0aGV5R2VuZGVyID09ICdGZW1hbGUnKSA/ICdOZWljZScgOiAnTmVwaGV3JykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoID4gaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goJ0dyYW5kICcucmVwZWF0KChoLWspIC0gMSkgKyAgKCh0aGV5R2VuZGVyID09ICdGZW1hbGUnKSA/ICdOZWljZScgOiAnTmVwaGV3JykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuXHJcblxyXG5cclxuXHJcbiAgICB9O1xyXG4gICAgKi9cclxuXHJcblxyXG4gICAgLyogcHJpdmF0ZSBtZW1iZXJzICovXHJcbiAgICB2YXIgZ2VuZXRpY09wdGlvbnMgPSB7XHJcbiAgICAgICAgY3Jvc3NvdmVycmF0ZTogMC41XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG5cclxuICAgIC8vIG1hbGUgZmlyc3QgbmFtZXNcclxuICAgIHZhciBuYW1lTGlzdDEgPSBbJ0RpZ2d5ICcsICdEZWFuICcsICdEdWtlICcsICdEb3lsZSAnLCAnRGlyayAnLCAnRGFnICcsICdEaW1pdHJpICcsICdEcnUgJ107XHJcbiAgICAvLyBmZW1hbGUgZmlyc3QgbmFtZXNcclxuICAgIHZhciBuYW1lTGlzdDIgPSBbJ0RhZ2d5ICcsICdEYWlzeSAnLCAnRGluYWggJywgJ0RoYXJtYSAnLCAnRGVlICcsICdEYXBobmUgJywgJ0RpeGllICcsICdEYXJjeSAnXTtcclxuICAgIC8vIGxhc3QgbmFtZSBwcmVmaXhlcyAoZW1wdHkgc3RyaW5ncyBhbmQgZHVwZXMgYXJlIGZvciBjb250cm9sbGluZyB0aGUgb2RkcylcclxuICAgIHZhciBuYW1lTGlzdDMgPSBbJycsICcnLCAnJywgJycsICcnLCAnVmFuICcsICdWb24gJywgJ09cXCcnLCAnTWMnLCAnTWMnXTtcclxuICAgIC8vIGxhc3QgbmFtZXNcclxuICAgIHZhciBuYW1lTGlzdDQgPSBbJ0Rvb2cnLCAnRGliYicsICdEYWJiJywgJ0RpZycsICdEYW5nJywgJ0R1Z2cnXTtcclxuICAgIC8vIGxhc3QgbmFtZSBzdWZmaXhlcyAoZW1wdHkgc3RyaW5ncyBhbmQgZHVwZXMgYXJlIGZvciBjb250cm9sbGluZyB0aGUgb2RkcylcclxuICAgIHZhciBuYW1lTGlzdDUgPSBbJycsICcnLCAnJywgJ2xlcicsICdsZXInLCAnZXInLCAnZXInLCAnZXInLCAnd3VlcnN0JywgJ2Vyd3VlcnN0JywgJ2VydG9uJywgJ2VydG9uJywgJ3NraSddO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qIHByaXZhdGUgZnVuY3Rpb25zICovXHJcbiAgICBmdW5jdGlvbiBjcm9zc292ZXIoZzEsIGcyLCBnZW5lQ2FwKSB7XHJcbiAgICAgICAgdmFyIGNyb3Nzb3ZlciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgdmFyIGdlbmVSYXRpbyA9IGdlbmVDYXAgLyAyNTUuMDtcclxuICAgICAgICB2YXIgZyA9IGFuZ3VsYXIuY29weShjcm9zc292ZXIgPD0gZ2VuZXRpY09wdGlvbnMuY3Jvc3NvdmVycmF0ZSA/IGcxIDogZzIpO1xyXG4gICAgICAgIGdbMF0gLz0gZ2VuZVJhdGlvO1xyXG4gICAgICAgIGdbMV0gLz0gZ2VuZVJhdGlvO1xyXG4gICAgICAgIHZhciBtdXRhdGlvblJhdGUgPSBnWzJdIC8gMjU1LjA7XHJcbiAgICAgICAgdmFyIGJpdFN0cmluZ1IgPSAnJztcclxuICAgICAgICB2YXIgYml0U3RyaW5nRyA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IG11dGF0aW9uUmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYml0U3RyaW5nUiArPSAnMSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiaXRTdHJpbmdSICs9ICcwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IG11dGF0aW9uUmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYml0U3RyaW5nRyArPSAnMSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiaXRTdHJpbmdHICs9ICcwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2xkUiA9IGdbMF07XHJcbiAgICAgICAgdmFyIG9sZEcgPSBnWzFdO1xyXG4gICAgICAgIGdbMF0gXj0gcGFyc2VJbnQoYml0U3RyaW5nUiwgMik7XHJcbiAgICAgICAgZ1sxXSBePSBwYXJzZUludChiaXRTdHJpbmdHLCAyKTtcclxuICAgICAgICBnWzBdICo9IGdlbmVSYXRpbztcclxuICAgICAgICBnWzFdICo9IGdlbmVSYXRpbztcclxuICAgICAgICByZXR1cm4gZztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSZWRHcmVlbkltYWdlKGdlbmVzLCBicmVlZGVyR2VuZUNhcCkge1xyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUJpdG1hcERhdGFVUkwoYWRkUm93cyhjb252ZXJ0UmVkR3JlZW5NYXAoZ2VuZXMsIGJyZWVkZXJHZW5lQ2FwKSwgZ2VuZXMubGVuZ3RoKSwgMjApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEJsdWVJbWFnZShnZW5lcykge1xyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUJpdG1hcERhdGFVUkwoYWRkUm93cyhjb252ZXJ0Qmx1ZU1hcChnZW5lcyksIGdlbmVzLmxlbmd0aCksIDIwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0UmVkR3JlZW5NYXAoZ2VuZXMsIGJyZWVkZXJHZW5lQ2FwKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHZhciBtaW5Db2xvclJhdGlvID0gMSArIGJyZWVkZXJHZW5lQ2FwIC8gNTAuMDtcclxuICAgICAgICB2YXIgY29sb3JSYXRpbyA9IDIwNS4wIC8gYnJlZWRlckdlbmVDYXA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgciA9IGdlbmVzW2ldWzBdO1xyXG4gICAgICAgICAgICB2YXIgZyA9IGdlbmVzW2ldWzFdO1xyXG4gICAgICAgICAgICB2YXIgYnJpZ2h0ID0gTWF0aC5hYnMociAtIGcpICogY29sb3JSYXRpbztcclxuICAgICAgICAgICAgaWYgKHIgPiBnKSB7XHJcbiAgICAgICAgICAgICAgICByID0gYnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgciAqPSBtaW5Db2xvclJhdGlvO1xyXG4gICAgICAgICAgICAgICAgZyA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByID0gMDtcclxuICAgICAgICAgICAgICAgIGcgPSBicmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBnICo9IG1pbkNvbG9yUmF0aW87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9pZiAociA+IDApIHIgKz0gbWluQ29sb3I7XHJcbiAgICAgICAgICAgIC8vaWYgKGcgPiAwKSBnICs9IG1pbkNvbG9yO1xyXG4gICAgICAgICAgICBpZiAociA+IDI1NSkgciA9IDI1NTtcclxuICAgICAgICAgICAgaWYgKGcgPiAyNTUpIGcgPSAyNTU7XHJcblxyXG4gICAgICAgICAgICByZXN1bHQucHVzaChbciwgZywgMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnZlcnRCbHVlTWFwKGdlbmVzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VuZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goWzAsIDAsIGdlbmVzW2ldWzJdXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUm93cyhnZW5lcywgY29scykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IChnZW5lcy5sZW5ndGggLyBjb2xzKTsgaisrKSB7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJvdy5wdXNoKGdlbmVzW2kgKyAoaiAqIGNvbHMpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocm93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gQnJlZWRlcjtcclxufV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuZmFjdG9yeSgnUG9wdWxhdGlvbicsIFsnJGZpbHRlcicsICdCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsIGZ1bmN0aW9uKCRmaWx0ZXIsIEJyZWVkZXIsIGdlbmVEZWZpbml0aW9ucykge1xyXG5cclxuXHJcbiAgICAvKiBjb25zdHJ1Y3RvciAqL1xyXG4gICAgdmFyIFBvcHVsYXRpb24gPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKHN0YXRlKTtcclxuICAgIH07XHJcbiAgICAvKiBwdWJsaWMgZnVuY3Rpb25zICovXHJcbiAgICBQb3B1bGF0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwge307XHJcbiAgICAgICAgdGhpcy5nZW5lRGVmaW5pdGlvbnMgPSBnZW5lRGVmaW5pdGlvbnM7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50R2VuZXJhdGlvbiA9IHN0YXRlLmN1cnJlbnRHZW5lcmF0aW9uIHx8IHRoaXMuY3VycmVudEdlbmVyYXRpb24gfHwgMDtcclxuICAgICAgICB0aGlzLmJyZWVkZXJzID0gc3RhdGUuYnJlZWRlcnMgfHwgdGhpcy5icmVlZGVycyB8fCBbXTtcclxuICAgICAgICB0aGlzLmJyZWVkZXJMaW1pdCA9IHN0YXRlLmJyZWVkZXJMaW1pdCB8fCB0aGlzLmJyZWVkZXJMaW1pdCB8fCAwO1xyXG4gICAgICAgIHRoaXMubWF4U2l6ZSA9IHN0YXRlLm1heFNpemUgfHwgdGhpcy5tYXhTaXplIHx8IDEwO1xyXG4gICAgICAgIHRoaXMuYnJlZWRlck11dGF0aW9uQml0cyA9IHN0YXRlLmJyZWVkZXJNdXRhdGlvbkJpdHMgfHwgdGhpcy5icmVlZGVyTXV0YXRpb25CaXRzIHx8IDQ7XHJcbiAgICAgICAgdGhpcy5icmVlZGVyTXV0YXRpb25DaGFuY2UgPSBzdGF0ZS5icmVlZGVyTXV0YXRpb25DaGFuY2UgfHwgdGhpcy5icmVlZGVyTXV0YXRpb25DaGFuY2UgfHwgNTtcclxuICAgICAgICB0aGlzLmJyZWVkZXJHZW5lc1VubG9ja2VkID0gc3RhdGUuYnJlZWRlckdlbmVzVW5sb2NrZWQgfHwgdGhpcy5icmVlZGVyR2VuZXNVbmxvY2tlZCB8fCBbNDJdO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbFNpemUgPSBzdGF0ZS5pbml0aWFsU2l6ZSB8fCB0aGlzLmluaXRpYWxTaXplIHx8IDI7XHJcbiAgICAgICAgaWYgKHN0YXRlLm1lbWJlcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgc3RhdGUubWVtYmVycy5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lbWJlciA9IHN0YXRlLm1lbWJlcnNbbV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IG5ldyBCcmVlZGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbWVtYmVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vdGhlcjogbWVtYmVyLm1vdGhlciB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGZhdGhlcjogbWVtYmVyLmZhdGhlciB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRpb246IG1lbWJlci5nZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVzOiBtZW1iZXIuZ2VuZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25CaXRzOiBtZW1iZXIubXV0YXRpb25CaXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1lbWJlci5uYW1lLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB1bml0LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZW1iZXJzLnB1c2godW5pdCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHRoaXMubWVtYmVycyA9IHRoaXMubWVtYmVycyB8fCB0aGlzLmNyZWF0ZUluaXRpYWxQb3B1bGF0aW9uKHRoaXMuaW5pdGlhbFNpemUpO1xyXG4gICAgfTtcclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0YXRlID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50R2VuZXJhdGlvbjogdGhpcy5jdXJyZW50R2VuZXJhdGlvbixcclxuICAgICAgICAgICAgYnJlZWRlcnM6IHRoaXMuYnJlZWRlcnMsXHJcbiAgICAgICAgICAgIGJyZWVkZXJMaW1pdDogdGhpcy5icmVlZGVyTGltaXQsXHJcbiAgICAgICAgICAgIG1heFNpemU6IHRoaXMubWF4U2l6ZSxcclxuICAgICAgICAgICAgYnJlZWRlck11dGF0aW9uQml0czogdGhpcy5icmVlZGVyTXV0YXRpb25CaXRzLFxyXG4gICAgICAgICAgICBicmVlZGVyTXV0YXRpb25DaGFuY2U6IHRoaXMuYnJlZWRlck11dGF0aW9uQ2hhbmNlLFxyXG4gICAgICAgICAgICBicmVlZGVyR2VuZXNVbmxvY2tlZDogdGhpcy5icmVlZGVyR2VuZXNVbmxvY2tlZCxcclxuICAgICAgICAgICAgaW5pdGlhbFNpemU6IHRoaXMuaW5pdGlhbFNpemUsXHJcbiAgICAgICAgICAgIG1lbWJlcnM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHRoaXMubWVtYmVycy5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICB2YXIgbWVtYmVyID0gdGhpcy5tZW1iZXJzW21dO1xyXG4gICAgICAgICAgICBzdGF0ZS5tZW1iZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IG1lbWJlci5pZCxcclxuICAgICAgICAgICAgICAgIGdlbmVyYXRpb246IG1lbWJlci5nZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXM6IG1lbWJlci5nZW5lcyxcclxuICAgICAgICAgICAgICAgIG11dGF0aW9uQml0czogbWVtYmVyLm11dGF0aW9uQml0cyxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG1lbWJlci5uYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLmNyZWF0ZUluaXRpYWxQb3B1bGF0aW9uID0gZnVuY3Rpb24oY291bnQpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBvcHVsYXRpb24gPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGdlbmVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGduID0gMDsgZ24gPCBzZWxmLmdlbmVEZWZpbml0aW9ucy5sZW5ndGg7IGduKyspIHtcclxuICAgICAgICAgICAgICAgIGdlbmVzLnB1c2goWzAsIDAsIDBdKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmJyZWVkZXJHZW5lc1VubG9ja2VkLmluZGV4T2YoZ24pICE9PSAtMSkgZ2VuZXNbZ25dWzJdID0gc2VsZi5icmVlZGVyTXV0YXRpb25DaGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciByID0gaSAlIDIgPT09IDAgPyAyNTUgOiAwO1xyXG4gICAgICAgICAgICB2YXIgZyA9IGkgJSAyID09PSAwID8gMCA6IDI1NTtcclxuXHJcbiAgICAgICAgICAgIGdlbmVzWzQyXVswXSA9IHI7XHJcbiAgICAgICAgICAgIGdlbmVzWzQyXVsxXSA9IGc7XHJcbiAgICAgICAgICAgIGdlbmVzWzQyXVsyXSA9IDA7XHJcblxyXG4gICAgICAgICAgICB2YXIgdW5pdCA9IG5ldyBCcmVlZGVyKHtcclxuICAgICAgICAgICAgICAgIGlkOiBpLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIGdlbmVzOiBhbmd1bGFyLmNvcHkoZ2VuZXMpLFxyXG4gICAgICAgICAgICAgICAgbXV0YXRpb25CaXRzOiBzZWxmLmJyZWVkZXJNdXRhdGlvbkJpdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHVuaXQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb24ucHVzaCh1bml0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvcHVsYXRpb247XHJcbiAgICB9O1xyXG5cclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLmlzQnJlZWRpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5tZW1iZXJzLmxlbmd0aCA+PSB0aGlzLm1heFNpemUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhlcmUgYXJlIGF0IGxlYXN0IDEgbWFsZSBhbmQgMSBmZW1hbGUgaW4gdGhlIGJyZWVkZXJzXHJcbiAgICAgICAgdmFyIGhhc01hbGUgPSBmYWxzZSxcclxuICAgICAgICAgICAgaGFzRmVtYWxlID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJyZWVkZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB1bml0ID0gdGhpcy5nZXRCeUlkKHRoaXMuYnJlZWRlcnNbaV0pO1xyXG4gICAgICAgICAgICBpZiAodW5pdC5oYXNUcmFpdCgnTWFsZScpKSBoYXNNYWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgZWxzZSBoYXNGZW1hbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoaGFzTWFsZSAmJiBoYXNGZW1hbGUpIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzTWFsZSAmJiBoYXNGZW1hbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLmdldEJ5SWQgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uKHVuaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuaXQuaWQgPT09IGlkO1xyXG4gICAgICAgIH0pWzBdO1xyXG4gICAgfTtcclxuXHJcbiAgICBQb3B1bGF0aW9uLnByb3RvdHlwZS5nZXRCeUdlbmVyYXRpb24gPSBmdW5jdGlvbihnZW5lcmF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24odW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5pdC5nZW5lcmF0aW9uID09PSBnZW5lcmF0aW9uO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBQb3B1bGF0aW9uLnByb3RvdHlwZS5icmVlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBpZiAoIXNlbGYuaXNCcmVlZGluZygpKSByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgcDEgPSBzZWxmLmdldEJ5SWQoc2VsZi5icmVlZGVyc1swXSk7XHJcbiAgICAgICAgdmFyIHAyID0gc2VsZi5nZXRCeUlkKHNlbGYuYnJlZWRlcnNbMV0pO1xyXG4gICAgICAgIHZhciBjaGlsZCA9IHAxLmJyZWVkKHAyLCBzZWxmLm1lbWJlcnMubGVuZ3RoKTtcclxuICAgICAgICBzZWxmLm1lbWJlcnMucHVzaChjaGlsZCk7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gUG9wdWxhdGlvbjtcclxufV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcblxyXG5nYW1lLmNvbnN0YW50KCdnZW5lRGVmaW5pdGlvbnMnLCAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZ2VuZURlZmluaXRpb25zID0gW107XHJcbiAgICAvL2dlbmUgOnIsZyxiIHI6cmVjZXNzaXZlLCBnOmRvbWluYW50LCBiOm11dGF0aW9ucmF0ZVxyXG4gICAgZ2VuZURlZmluaXRpb25zWzBdID0geyBkb206ICdCcm9hZCBTaG91bGRlcnMnLCByZWM6ICdTbGVuZGVyIFNob3VsZGVycycsIGF0dHI6IFsnU1RSJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1sxXSA9IHsgZG9tOiAnVGhpY2sgU2t1bGwnLCByZWM6ICdTb2Z0IFNrdWxsJywgYXR0cjogWydTVFInXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzJdID0geyBkb206ICdMYXJnZSBBcm1zJywgcmVjOiAnU21hbGwgQXJtcycsIGF0dHI6IFsnU1RSJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1szXSA9IHsgZG9tOiAnTGFyZ2UgTGVncycsIHJlYzogJ1NtYWxsIExlZ3MnLCBhdHRyOiBbJ1NUUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbNF0gPSB7IGRvbTogJ0JpZyBDaGVzdCcsIHJlYzogJ1dlYWsgQ2hlc3QnLCBhdHRyOiBbJ1NUUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbNV0gPSB7IGRvbTogJ1RvdWdoIEphdycsIHJlYzogJ1dlYWsgSmF3JywgYXR0cjogWydTVFInXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzZdID0geyBkb206ICdPYWZpc2gnLCByZWM6ICdNb3VzZXknLCBhdHRyOiBbJ1NUUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbN10gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnU1RSJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s4XSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydTVFInXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzldID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ1NUUiddIH07XHJcblxyXG4gICAgZ2VuZURlZmluaXRpb25zWzEwXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzExXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzEyXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzEzXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzE0XSA9IHsgZG9tOiAnQ2FsY3VsYXRlZCBEZWNpc2lvbnMnLCByZWM6ICdSZWNrbGVzcycsIGF0dHI6IFsnSU5UJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1sxNV0gPSB7IGRvbTogJ0xhdGVyYWwgVGhpbmtlcicsIHJlYzogJ1NpbmdsZSBNaW5kZWQnLCBhdHRyOiBbJ0lOVCddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMTZdID0geyBkb206ICdRdWljayBMZWFybmVyJywgcmVjOiAnRm9yZ2V0ZnVsJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzE3XSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzE4XSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzE5XSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydJTlQnXSB9O1xyXG5cclxuICAgIGdlbmVEZWZpbml0aW9uc1syMF0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syMV0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syMl0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syM10gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syNF0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syNV0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syNl0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syN10gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syOF0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1syOV0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnRU5EJ10gfTtcclxuXHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzBdID0geyBkb206ICdFbG9xdWVudCcsIHJlYzogJ0NhdGF0b25pYycsIGF0dHI6IFsnQ0hSJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1szMV0gPSB7IGRvbTogJ1Bvd2VyZnVsIFZvaWNlJywgcmVjOiAnUXVpZXQgVm9pY2UnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzJdID0geyBkb206ICdGdWxsIExpcHMnLCByZWM6ICdUaGluIExpcHMnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzNdID0geyBkb206ICdEYXJrIFNraW4nLCByZWM6ICdGYWlyIFNraW4nLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzRdID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzVdID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzZdID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzddID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzhdID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcbiAgICBnZW5lRGVmaW5pdGlvbnNbMzldID0geyBkb206ICcnLCByZWM6ICcnLCBhdHRyOiBbJ0NIUiddIH07XHJcblxyXG4gICAgZ2VuZURlZmluaXRpb25zWzQwXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydMQ0snXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzQxXSA9IHsgZG9tOiAnJywgcmVjOiAnJywgYXR0cjogWydMQ0snXSB9O1xyXG4gICAgZ2VuZURlZmluaXRpb25zWzQyXSA9IHsgZG9tOiAnRmVtYWxlJywgcmVjOiAnTWFsZScsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0M10gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0NF0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0NV0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0Nl0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0N10gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0OF0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuICAgIGdlbmVEZWZpbml0aW9uc1s0OV0gPSB7IGRvbTogJycsIHJlYzogJycsIGF0dHI6IFsnTENLJ10gfTtcclxuXHJcbiAgICByZXR1cm4gZ2VuZURlZmluaXRpb25zO1xyXG59KSgpKTtcclxuXHJcbmdhbWUuY29uc3RhbnQoJ3RyYWl0RGVmaW5pdGlvbnMnLCAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdHJhaXRzID0gW3tcclxuICAgICAgICAgICAgbmFtZTogJ0hhbmRzb21lJyxcclxuICAgICAgICAgICAgZ2VuZXM6IFtcclxuICAgICAgICAgICAgICAgIFswLCAtMjAwLCAyMDBdLFxyXG4gICAgICAgICAgICAgICAgWzUsIDUwLCAyNTVdXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVkVHJhaXRzOiBbJ01hbGUnXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnUHJldHR5JyxcclxuICAgICAgICAgICAgZ2VuZXM6IFtcclxuICAgICAgICAgICAgICAgIFswLCAtMjAwLCAtMTAwXSxcclxuICAgICAgICAgICAgICAgIFs0LCAyMCwgMjQwXVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICByZXF1aXJlZFRyYWl0czogWydGZW1hbGUnXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnQWdncmVzc2l2ZScsXHJcbiAgICAgICAgICAgIGdlbmVzOiBbXHJcbiAgICAgICAgICAgICAgICBbMCwgMjAwLCAyNTVdLFxyXG4gICAgICAgICAgICAgICAgWzIsIDIwMCwgMjU1XSxcclxuICAgICAgICAgICAgICAgIFs0LCAyMDAsIDI1NV0sXHJcbiAgICAgICAgICAgICAgICBbNSwgMjAwLCAyNTVdLFxyXG4gICAgICAgICAgICAgICAgWzE0LCAtMjU1LCAtMTUwXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdGZW1hbGUnLFxyXG4gICAgICAgICAgICBnZW5lczogW1xyXG4gICAgICAgICAgICAgICAgWzQyLCAwLCAyNTVdXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ01hbGUnLFxyXG4gICAgICAgICAgICBnZW5lczogW1xyXG4gICAgICAgICAgICAgICAgWzQyLCAtMjU1LCAtMV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnSGFuZHNvbWUgQWdncmVzc2l2ZSBhbmQgc29tZXRoaW5nJyxcclxuICAgICAgICAgICAgZ2VuZXM6IFtcclxuICAgICAgICAgICAgICAgIFszMCwgMCwgMF1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgcmVxdWlyZWRUcmFpdHM6IFsnSGFuZHNvbWUnLCAnQWdncmVzc2l2ZSddXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICB2YXIgY2hlY2tlZCA9IFtdO1xyXG4gICAgdmFyIGdldFRyYWl0QnlOYW1lID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0cmFpdHMuZmlsdGVyKGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IHQubmFtZTtcclxuICAgICAgICB9KVswXTtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0UmVxdWlyZWRHZW5lc1JlY3Vyc2l2ZSA9IGZ1bmN0aW9uKHRyYWl0KSB7XHJcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRyYWl0LnJlcXVpcmVkVHJhaXRzKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRyYWl0LnJlcXVpcmVkVHJhaXRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRUcmFpdCA9IHRyYWl0LnJlcXVpcmVkVHJhaXRzW2pdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcSA9IGdldFRyYWl0QnlOYW1lKHJlcXVpcmVkVHJhaXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQuaW5kZXhPZihyZXEubmFtZSkgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIGdldFJlcXVpcmVkR2VuZXNSZWN1cnNpdmUocmVxKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgcmVxLmdlbmVzLmxlbmd0aDsgZysrKVxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0LmdlbmVzLnB1c2gocmVxLmdlbmVzW2ddKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjaGVja2VkLnB1c2godHJhaXQubmFtZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBidWlsZFRyYWl0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFpdCA9IHRyYWl0c1tpXTtcclxuICAgICAgICAgICAgZ2V0UmVxdWlyZWRHZW5lc1JlY3Vyc2l2ZSh0cmFpdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY29uc29sZS5sb2codHJhaXRzKTtcclxuICAgICAgICByZXR1cm4gdHJhaXRzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBidWlsZFRyYWl0cygpO1xyXG59KSgpKTtcclxuXHJcblxyXG5nYW1lLmZhY3RvcnkoJ1RyYWl0SW5zcGVjdG9yJywgWyckZmlsdGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgZnVuY3Rpb24oJGZpbHRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zKSB7XHJcbiAgICAvKiBjb25zdHJ1Y3RvciAqL1xyXG4gICAgdmFyIFRyYWl0SW5zcGVjdG9yID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoY29uZmlnKTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAvKiBwdWJsaWMgZnVuY3Rpb25zICovXHJcbiAgICBUcmFpdEluc3BlY3Rvci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZihjb25maWcpID09ICd1bmRlZmluZWQnKSBjb25maWcgPSB7fTtcclxuICAgICAgICAvL3RoaXMuaWQgPSBjb25maWcuaWQgfHwgdGhpcy5pZCB8fCAwOyAgICAgICAgXHJcbiAgICB9O1xyXG5cclxuICAgIFRyYWl0SW5zcGVjdG9yLnByb3RvdHlwZS5nZXRUcmFpdHMgPSBmdW5jdGlvbihnZW5lcykge1xyXG4gICAgICAgIHZhciByZXQgPSBbXTtcclxuICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhaXREZWZpbml0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRkID0gdHJhaXREZWZpbml0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBtZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCB0ZC5nZW5lcy5sZW5ndGggJiYgbWV0ID09PSB0cnVlOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGRnID0gdGQuZ2VuZXNbaF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBnZW5lc1t0ZGdbMF1dWzFdIC0gZ2VuZXNbdGRnWzBdXVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodiA8IHRkZ1sxXSB8fCB2ID4gdGRnWzJdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2godGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcblxyXG4gICAgVHJhaXRJbnNwZWN0b3IucHJvdG90eXBlLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihnZW5lcykge1xyXG4gICAgICAgIHZhciByZXQgPSB7XHJcbiAgICAgICAgICAgIFwiU1RSXCI6IDAsXHJcbiAgICAgICAgICAgIFwiSU5UXCI6IDAsXHJcbiAgICAgICAgICAgIFwiRU5EXCI6IDAsXHJcbiAgICAgICAgICAgIFwiQ0hSXCI6IDAsXHJcbiAgICAgICAgICAgIFwiTENLXCI6IDBcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChnZW5lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIHN0ckJhc2UgPSAwLFxyXG4gICAgICAgICAgICAgICAgaW50QmFzZSA9IDAsXHJcbiAgICAgICAgICAgICAgICBlbmRCYXNlID0gMCxcclxuICAgICAgICAgICAgICAgIGNockJhc2UgPSAwLFxyXG4gICAgICAgICAgICAgICAgbGNrQmFzZSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZ2VuZXMubGVuZ3RoOyBnKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChnIDwgMTApXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyQmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZyA8IDIwKVxyXG4gICAgICAgICAgICAgICAgICAgIGludEJhc2UgKz0gZ2VuZXNbZ11bMV0gLSBnZW5lc1tnXVswXTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGcgPCAzMClcclxuICAgICAgICAgICAgICAgICAgICBlbmRCYXNlICs9IGdlbmVzW2ddWzFdIC0gZ2VuZXNbZ11bMF07XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChnIDwgNDApXHJcbiAgICAgICAgICAgICAgICAgICAgY2hyQmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGxja0Jhc2UgKz0gZ2VuZXNbZ11bMV0gLSBnZW5lc1tnXVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXQuU1RSID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoKE1hdGguYWJzKHN0ckJhc2UpICsgMjApIC8gMjUpKSAqIChzdHJCYXNlIDwgMCA/IC0xIDogMSk7XHJcbiAgICAgICAgICAgIHJldC5JTlQgPSBNYXRoLmZsb29yKE1hdGguc3FydCgoTWF0aC5hYnMoaW50QmFzZSkgKyAyMCkgLyAyNSkpICogKGludEJhc2UgPCAwID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgcmV0LkVORCA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KChNYXRoLmFicyhlbmRCYXNlKSArIDIwKSAvIDI1KSkgKiAoZW5kQmFzZSA8IDAgPyAtMSA6IDEpO1xyXG4gICAgICAgICAgICByZXQuQ0hSID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoKE1hdGguYWJzKGNockJhc2UpICsgMjApIC8gMjUpKSAqIChjaHJCYXNlIDwgMCA/IC0xIDogMSk7XHJcbiAgICAgICAgICAgIHJldC5MQ0sgPSBNYXRoLmZsb29yKE1hdGguc3FydCgoTWF0aC5hYnMobGNrQmFzZSkgKyAyMCkgLyAyNSkpICogKGxja0Jhc2UgPCAwID8gLTEgOiAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qIHByaXZhdGUgbWVtYmVycyAqL1xyXG5cclxuICAgIHJldHVybiBUcmFpdEluc3BlY3RvcjtcclxufV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuY29tcG9uZW50KCdibG9xaGVhZC5jb21wb25lbnRzLmhvbWUnLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvaG9tZS5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdibG9xaGVhZC5jb250cm9sbGVycy5ob21lJ1xyXG59KTtcclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy5ob21lJywgZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB9O1xyXG59KTtcclxuXHJcblxyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkLmNvbXBvbmVudHMubWFpbkdhbWUnLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbWFpbkdhbWUvbWFpbkdhbWUuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMubWFpbkdhbWUnXHJcbn0pO1xyXG5cclxuXHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLm1haW5HYW1lJywgW1xyXG4gICAgJyRzY29wZScsICdwb3B1bGF0aW9uU2VydmljZScsICdhY2hpZXZlbWVudFNlcnZpY2UnLCAncmVzb3VyY2VTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgcG9wdWxhdGlvblNlcnZpY2UsIGFjaGlldmVtZW50U2VydmljZSwgcmVzb3VyY2VTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmJyZWVkZXJzID0gW107XHJcbiAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbiA9IFtdO1xyXG4gICAgICAgICAgICBzZWxmLm1heFBvcHVsYXRpb24gPSAwO1xyXG4gICAgICAgICAgICBzZWxmLm1heEJyZWVkZXJzID0gMDtcclxuICAgICAgICAgICAgcG9wdWxhdGlvblNlcnZpY2UuU3Vic2NyaWJlUG9wdWxhdGlvblVwZGF0ZUV2ZW50KCRzY29wZSwgc2VsZi51cGRhdGVQb3B1bGF0aW9uKTtcclxuICAgICAgICAgICAgcG9wdWxhdGlvblNlcnZpY2UuU3Vic2NyaWJlQnJlZWRlclVwZGF0ZUV2ZW50KCRzY29wZSwgc2VsZi51cGRhdGVCcmVlZGVycyk7XHJcbiAgICAgICAgICAgIGFjaGlldmVtZW50U2VydmljZS5TdWJzY3JpYmVOZXdSZXdhcmRFdmVudCgkc2NvcGUsIHNlbGYucmV3YXJkRWFybmVkKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnJld2FyZEVhcm5lZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXdhcmQpIHtcclxuICAgICAgICAgICAgLy8gZXZlbnR1YWxseSB0aGlzIHdpbGwgc2hvdyBhIHBvcHVwXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJld2FyZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVHZW5lID0gZnVuY3Rpb24oaWQsIGdlbmVJbmRleCwgZ2VuZVZhbHVlcykge1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS51cGRhdGVNZW1iZXIoaWQsIGdlbmVJbmRleCwgZ2VuZVZhbHVlcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRCcmVlZGVyID0gZnVuY3Rpb24odW5pdGlkKSB7XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLmFkZEJyZWVkZXIodW5pdGlkKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnJlbW92ZUJyZWVkZXIgPSBmdW5jdGlvbih1bml0aWQpIHtcclxuICAgICAgICAgICAgcG9wdWxhdGlvblNlcnZpY2UucmVtb3ZlQnJlZWRlcih1bml0aWQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlQnJlZWRlcnMgPSBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBzZWxmLmJyZWVkZXJzID0gZGF0YS5icmVlZGVycztcclxuICAgICAgICAgICAgc2VsZi5pc0JyZWVkaW5nID0gZGF0YS5pc0JyZWVkaW5nO1xyXG4gICAgICAgICAgICBzZWxmLnN0ZXBzU2luY2VCcmVlZCA9IGRhdGEuc3RlcHNTaW5jZUJyZWVkO1xyXG4gICAgICAgICAgICBzZWxmLmJyZWVkU3RlcHMgPSBkYXRhLmJyZWVkU3RlcHM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZVBvcHVsYXRpb24gPSBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24gPSBkYXRhLnBvcHVsYXRpb247XHJcbiAgICAgICAgICAgIHNlbGYubWF4UG9wdWxhdGlvbiA9IGRhdGEubWF4U2l6ZTtcclxuICAgICAgICAgICAgc2VsZi5icmVlZGVyTGltaXQgPSBkYXRhLmJyZWVkZXJMaW1pdDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTtcclxuXHJcblxyXG5nYW1lLmNvbXBvbmVudChcImJsb3FoZWFkQnJlZWRlclwiLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnRzL21haW5HYW1lL2JyZWVkZXIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJibG9xaGVhZGVyLmNvbnRyb2xsZXJzLmJyZWVkZXJcIixcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdW5pdDogJzwnLFxyXG4gICAgICAgIGFsbG93QXNzaWduOiAnPCcsXHJcbiAgICAgICAgYXNzaWduOiAnJidcclxuICAgIH1cclxufSk7XHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoXCJibG9xaGVhZGVyLmNvbnRyb2xsZXJzLmJyZWVkZXJcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzZWxmLmFsbG93QXNzaWduID0gYW5ndWxhci5pc0RlZmluZWQoc2VsZi5hbGxvd0Fzc2lnbikgPyBzZWxmLmFsbG93QXNzaWduIDogdHJ1ZTtcclxuXHJcbiAgICB9O1xyXG4gICAgc2VsZi5hc3NpZ25NZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGYuYXNzaWduKHsgJGlkOiBzZWxmLnVuaXQuaWQgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7IiwidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5hcHAuY29tcG9uZW50KCdibG9xaGVhZC5jb21wb25lbnRzLnRlc3RJbnRlcmZhY2UnLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS90ZXN0SW50ZXJmYWNlLmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLnRlc3RJbnRlcmZhY2UnXHJcbn0pO1xyXG5cclxuLy8gdGFiIGNvbXBvbmVudHNcclxuYXBwLmNvbXBvbmVudCgnYnJlZWRlclRhYicsIHtcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdW5pdHM6ICc9JyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBbJ0JyZWVkZXInLCAnZ2VuZURlZmluaXRpb25zJywgJ3RyYWl0RGVmaW5pdGlvbnMnLCBmdW5jdGlvbihCcmVlZGVyLCBnZW5lRGVmaW5pdGlvbnMsIHRyYWl0RGVmaW5pdGlvbnMpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYubGFzdEJyZWVkZXJJRCA9IDA7XHJcbiAgICAgICAgc2VsZi5uZXdCcmVlZGVyR2VuZGVyID0gJ01hbGUnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNlbGYua2lsbEJyZWVkZXIgPSBmdW5jdGlvbih1bml0KSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdHMuc3BsaWNlKHNlbGYudW5pdHMuaW5kZXhPZih1bml0KSwgMSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHNlbGYuYWRkTmV3QnJlZWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2VuZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBnZW5lRGVmaW5pdGlvbnMubGVuZ3RoOyBnKyspIHtcclxuICAgICAgICAgICAgICAgIGdlbmVzLnB1c2goWzAsMCwwXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBnZW5kZXIgPSAoc2VsZi5uZXdCcmVlZGVyR2VuZGVyID09ICdNYWxlJykgPyAyNTUgOiAwO1xyXG4gICAgICAgICAgICBnZW5lc1s0Ml0gPSBbZ2VuZGVyLCAyNTUgLSBnZW5kZXIsIDBdO1xyXG5cclxuICAgICAgICAgICAgdmFyIHVuaXQgPSBuZXcgQnJlZWRlcih7XHJcbiAgICAgICAgICAgICAgICBpZDogc2VsZi5sYXN0QnJlZWRlcklEKyssXHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IDYsXHJcbiAgICAgICAgICAgICAgICBnZW5lczogZ2VuZXNcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB1bml0LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBzZWxmLnVuaXRzLnVuc2hpZnQodW5pdCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfV0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9icmVlZGVyVGFiLmh0bWwnXHJcbn0pO1xyXG5hcHAuY29tcG9uZW50KCdtYXRpbmdUYWInLCB7XHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHVuaXRzOiAnPScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogWydCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgZnVuY3Rpb24oQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIH1dLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvbWF0aW5nVGFiLmh0bWwnXHJcbn0pO1xyXG5cclxuXHJcblxyXG5hcHAuY29tcG9uZW50KCdnZW5vbWVFZGl0b3InLHtcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdW5pdDogJz0nXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogWydnZW5lRGVmaW5pdGlvbnMnLCBmdW5jdGlvbihnZW5lRGVmaW5pdGlvbnMpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZ2VuZURlZmluaXRpb25zID0gZ2VuZURlZmluaXRpb25zO1xyXG4gICAgICAgICAgICBzZWxmLmV4cGFuZG8gPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYucmFuZG9taXplTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnVuaXQubmFtZSA9IHNlbGYudW5pdC5nZXRSYW5kb21OYW1lKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJhbmRvbWl6ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdC5nZW5lc1tpbmRleF0gPSBbcmFuZG9tSW50RnJvbUludGVydmFsKDAsMjU1KSxyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwyNTUpLHJhbmRvbUludEZyb21JbnRlcnZhbCgwLDI1NSldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yYW5kb21pemVBbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnVuaXQuZ2VuZXMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJhbmRvbWl6ZShpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBnZW5kZXIgPSByYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwxKSA9PT0gMCA/IDI1NSA6IDA7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdC5nZW5lc1s0Ml0gPSBbZ2VuZGVyLCAyNTUgLSBnZW5kZXIsIDBdO1xyXG4gICAgICAgICAgICBzZWxmLnVuaXQudXBkYXRlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgIH1dLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvZ2Vub21lRWRpdG9yLmh0bWwnXHJcbn0pO1xyXG5cclxuXHJcblxyXG5hcHAuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMudGVzdEludGVyZmFjZScsIFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ2dhbWVTZXJ2aWNlJywgJ0JyZWVkZXInLCAnZ2VuZURlZmluaXRpb25zJywgJ3RyYWl0RGVmaW5pdGlvbnMnLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0LCBnYW1lU2VydmljZSwgQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cclxuXHJcblxyXG4gICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2VsZi5nZW5lRGVmaW5pdGlvbnMgPSBnZW5lRGVmaW5pdGlvbnM7XHJcbiAgICAgICAgc2VsZi50cmFpdERlZmluaXRpb25zID0gdHJhaXREZWZpbml0aW9ucztcclxuICAgICAgICAvL3NlbGYuZGlnZ2VycyA9IGdhbWVTZXJ2aWNlLmRpZ2dlcnM7XHJcbiAgICAgICAgc2VsZi51bml0cyA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vZ2FtZVNlcnZpY2UuU3Vic2NyaWJlQnJlZWRFdmVudCgkc2NvcGUsIGZ1bmN0aW9uKGV2ZW50LCBvZmZzcHJpbmcpIHtcclxuICAgICAgICAvLyAgICAvLyRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7IHNlbGYuZGlnZ2VyT2Zmc3ByaW5nID0gb2Zmc3ByaW5nOyB9KTtcclxuICAgICAgICAvL30pO1xyXG4gICAgICAgIC8vZ2FtZVNlcnZpY2UuU3Vic2NyaWJlTmV3R2VuZXJhdGlvbkV2ZW50KCRzY29wZSwgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vICAgICAgICBzZWxmLmRpZ2dlcnMgPSBkYXRhLkRpZ2dlcnM7XHJcbiAgICAgICAgLy8gICAgICAgIC8vc2VsZi5kaWdnZXJBbmNlc3RvcnMgPSBkYXRhLkFuY2VzdG9ycztcclxuICAgICAgICAvLyAgICB9KTtcclxuICAgICAgICAvL30pO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIHNlbGYudXBkYXRlR2VuZSA9IGZ1bmN0aW9uKGRpZ2dlckluZGV4LCBnZW5lSW5kZXgsIHZhbHVlcykge1xyXG4gICAgICAgICAgICB2YXIgdW5pdCA9IHNlbGYudW5pdHNbZGlnZ2VySW5kZXhdO1xyXG4gICAgICAgICAgICBkaWdnZXIuZ2VuZXNbZ2VuZUluZGV4XSA9IHZhbHVlcztcclxuICAgICAgICAgICAgZGlnZ2VyLnVwZGF0ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICB9O1xyXG5cclxufV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcblxyXG5cclxuZ2FtZS5jb25zdGFudCgnYWNoaWV2ZW1lbnRTZXR1cCcsIHtcclxuICAgIGFjaGlldmVtZW50czoge1xyXG4gICAgICAgIEFfQklSVEhTOiB7XHJcbiAgICAgICAgICAgIGFpZDogJ0FfQklSVEhTJyxcclxuICAgICAgICAgICAgbmFtZTogJ1RoZSBDaG9zZW4gT25lJyxcclxuICAgICAgICAgICAgZGVzYzogJ0NyZWF0ZSBhIG5ldyB1bml0JyxcclxuICAgICAgICAgICAgcmFua3M6IFtcclxuICAgICAgICAgICAgICAgIFsxLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgWydQX1JfQk9OVVMnLCAnR09MRCcsIDVdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX0JPTlVTJywgJ1dPT0QnLCAxMDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX0JPTlVTJywgJ0RJUlQnLCA1MDAwXSxcclxuICAgICAgICAgICAgICAgIF1dLFxyXG4gICAgICAgICAgICAgICAgWzIwLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgWydQX1JfQk9OVVMnLCAnR09MRCcsIDUwXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ1BfTV9IQVBQSU5FU1MnXSxcclxuICAgICAgICAgICAgICAgICAgICBbJ1BfR19FTkhBTkNFRCcsIDE0LCAxMF1cclxuICAgICAgICAgICAgICAgIF1dXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIEFfRElSVDoge1xyXG4gICAgICAgICAgICBhaWQ6ICdBX0RJUlQnLFxyXG4gICAgICAgICAgICBuYW1lOiAnSXRzIERpcnQuLi4uJyxcclxuICAgICAgICAgICAgZGVzYzogJ0Vhcm4gZGlydC4nLFxyXG4gICAgICAgICAgICByYW5rczogW1xyXG4gICAgICAgICAgICAgICAgWzUwLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgWydQX1JfTVVMVElQTElFUicsICdIQVBQSU5FU1MnLCAwLjFdXHJcbiAgICAgICAgICAgICAgICBdXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBBX0RJUlRfQzoge1xyXG4gICAgICAgICAgICBhaWQ6ICdBX0RJUlRfQycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdEaXJ0IEhvYXJkZXInLFxyXG4gICAgICAgICAgICBkZXNjOiAnQXF1aXJlIGRpcnQuLi4gbG90cyBhbmQgbG90cyBvZiBkaXJ0IScsXHJcbiAgICAgICAgICAgIHJhbmtzOiBbXHJcbiAgICAgICAgICAgICAgICBbMTAwLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgWydQX1JfTVVMVElQTElFUicsICdIQVBQSU5FU1MnLCAwLjJdXHJcbiAgICAgICAgICAgICAgICBdXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBBX0JSSUNLUzoge1xyXG4gICAgICAgICAgICBhaWQ6ICdBX0JSSUNLUycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdicmlja3MnLFxyXG4gICAgICAgICAgICBkZXNjOiAnRWFybiBicmlja3MuJyxcclxuICAgICAgICAgICAgcmFua3M6IFtcclxuICAgICAgICAgICAgICAgIFs1MCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4xXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9CUklDS1NfQzoge1xyXG4gICAgICAgICAgICBhaWQ6ICdBX0JSSUNLU19DJyxcclxuICAgICAgICAgICAgbmFtZTogJ0JyaWNrIEhvYXJkZXInLFxyXG4gICAgICAgICAgICBkZXNjOiAnQXF1aXJlIGJyaWNrcy4uLiBsb3RzIGFuZCBsb3RzIG9mIGJyaWNrcyEnLFxyXG4gICAgICAgICAgICByYW5rczogW1xyXG4gICAgICAgICAgICAgICAgWzEwMCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4yXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9XQVRFUjoge1xyXG4gICAgICAgICAgICBhaWQ6ICdBX1dBVEVSJyxcclxuICAgICAgICAgICAgbmFtZTogJ29tbm9tbm9tJyxcclxuICAgICAgICAgICAgZGVzYzogJ0Vhcm4gd2F0ZXIuJyxcclxuICAgICAgICAgICAgcmFua3M6IFtcclxuICAgICAgICAgICAgICAgIFs1MCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4xXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9XQVRFUl9DOiB7XHJcbiAgICAgICAgICAgIGFpZDogJ0FfV0FURVJfQycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdXYXRlciBIb2FyZGVyJyxcclxuICAgICAgICAgICAgZGVzYzogJ0FxdWlyZSB3YXRlci4uLiBsb3RzIGFuZCBsb3RzIG9mIHdhdGVyIScsXHJcbiAgICAgICAgICAgIHJhbmtzOiBbXHJcbiAgICAgICAgICAgICAgICBbMTAwLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgWydQX1JfTVVMVElQTElFUicsICdIQVBQSU5FU1MnLCAwLjJdXHJcbiAgICAgICAgICAgICAgICBdXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBBX1dPT0Q6IHtcclxuICAgICAgICAgICAgYWlkOiAnQV9XT09EJyxcclxuICAgICAgICAgICAgbmFtZTogJ3RyZWUgZ3V0cycsXHJcbiAgICAgICAgICAgIGRlc2M6ICdFYXJuIHdvb2QuJyxcclxuICAgICAgICAgICAgcmFua3M6IFtcclxuICAgICAgICAgICAgICAgIFs1MCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4xXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9XT09EX0M6IHtcclxuICAgICAgICAgICAgYWlkOiAnQV9XT09EX0MnLFxyXG4gICAgICAgICAgICBuYW1lOiAnV29vZCBIb2FyZGVyJyxcclxuICAgICAgICAgICAgZGVzYzogJ0FxdWlyZSB3b29kLi4uIGxvdHMgYW5kIGxvdHMgb2Ygd29vZCEnLFxyXG4gICAgICAgICAgICByYW5rczogW1xyXG4gICAgICAgICAgICAgICAgWzEwMCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4yXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9HT0xEOiB7XHJcbiAgICAgICAgICAgIGFpZDogJ0FfR09MRCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICdPb29vaGhoIFNoaWlpaWlueScsXHJcbiAgICAgICAgICAgIGRlc2M6ICdFYXJuIGdvbGQuJyxcclxuICAgICAgICAgICAgcmFua3M6IFtcclxuICAgICAgICAgICAgICAgIFs1MCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4xXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9HT0xEX0M6IHtcclxuICAgICAgICAgICAgYWlkOiAnQV9HT0xEX0MnLFxyXG4gICAgICAgICAgICBuYW1lOiAnR29sZCBIb2FyZGVyJyxcclxuICAgICAgICAgICAgZGVzYzogJ0FxdWlyZSBnb2xkLi4uIGxvdHMgYW5kIGxvdHMgb2YgZ29sZCEnLFxyXG4gICAgICAgICAgICByYW5rczogW1xyXG4gICAgICAgICAgICAgICAgWzEwMCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4yXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQV9IQVBQSU5FU1M6IHtcclxuICAgICAgICAgICAgYWlkOiAnQV9IQVBQSU5FU1MnLFxyXG4gICAgICAgICAgICBuYW1lOiAnYmUgaGFwcHkgbW9uJyxcclxuICAgICAgICAgICAgZGVzYzogJ0Vhcm4gaGFwcGluZXNzLicsXHJcbiAgICAgICAgICAgIHJhbmtzOiBbXHJcbiAgICAgICAgICAgICAgICBbNTAsIFtcclxuICAgICAgICAgICAgICAgICAgICBbJ1BfUl9NVUxUSVBMSUVSJywgJ0hBUFBJTkVTUycsIDAuMV1cclxuICAgICAgICAgICAgICAgIF1dXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIEFfSEFQUElORVNTX0M6IHtcclxuICAgICAgICAgICAgYWlkOiAnQV9IQVBQSU5FU1NfQycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdIYXBweW5lc3MnLFxyXG4gICAgICAgICAgICBkZXNjOiAnQXF1aXJlIGhhcHBpbmVzcy4uLiBsb3RzIGFuZCBsb3RzIG9mIGhhcHBpbmVzcyEnLFxyXG4gICAgICAgICAgICByYW5rczogW1xyXG4gICAgICAgICAgICAgICAgWzEwMCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIFsnUF9SX01VTFRJUExJRVInLCAnSEFQUElORVNTJywgMC4yXVxyXG4gICAgICAgICAgICAgICAgXV1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwZXJrczoge1xyXG4gICAgICAgIC8vIG1lY2hhbmljc1xyXG4gICAgICAgIFBfTV9IQVBQSU5FU1M6IHtcclxuICAgICAgICAgICAgcGlkOiAnUF9NX0hBUFBJTkVTUycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdOZXcgTWVjaGFuaWM6IEhhcHBpbmVzcycsXHJcbiAgICAgICAgICAgIGRlc2M6ICdIYXBwaW5lc3MgaXMgYSByZXByZXNlbnRhdGlvbiBvZiBob3cgY29udGVudCB5b3VyIHBvcHVsYXRpb24gaXMuJyxcclxuICAgICAgICAgICAgb25jZTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUF9SX01VTFRJUExJRVI6IHtcclxuICAgICAgICAgICAgcGlkOiAnUF9SX01VTFRJUExJRVInLFxyXG4gICAgICAgICAgICBuYW1lOiAnUmVzb3VyY2UgTXVsaXBsaWVyJyxcclxuICAgICAgICAgICAgZGVzYzogJ1RoZSByYXRlIHRoYXQgeW91IGFxdWlyZSBbJTFdIGhhcyBiZWVuIGluY3JlYXNlZCBieSBbJTJdeC4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBQX1JfQk9OVVM6IHtcclxuICAgICAgICAgICAgcGlkOiAnUF9SX0JPTlVTJyxcclxuICAgICAgICAgICAgbmFtZTogJ0JvbnVzIFJlc291cmNlcycsXHJcbiAgICAgICAgICAgIGRlc2M6ICdbJTJdIFslMV0gaGFzIGJlZW4gYWRkZWQgdG8geW91ciBjb2ZmZXJzLidcclxuICAgICAgICB9LFxyXG4gICAgICAgIFBfR19FTkhBTkNFRDoge1xyXG4gICAgICAgICAgICBwaWQ6ICdQX0dfRU5IQU5DRUQnLFxyXG4gICAgICAgICAgICBuYW1lOiAnR2VuZSBFbmhhbmNlbWVudCcsXHJcbiAgICAgICAgICAgIGRlc2M6ICdUaGUgYm91bmRhcnkgaGFzIGJlZW4gaW5jcmVhc2VkIGJ5IFslYW10XSBmb3Igb25lIG9mIHlvdXIgWyVhdHRyXSBnZW5lcy4gKFslZG9tXS9bJXJlY10pJ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuXHJcblxyXG5nYW1lLnNlcnZpY2UoJ2FjaGlldmVtZW50U2VydmljZScsIFtcclxuICAgICckcm9vdFNjb3BlJywgJyRmaWx0ZXInLCAnbG9nU2VydmljZScsICdhY2hpZXZlbWVudFNldHVwJywgJ2dlbmVEZWZpbml0aW9ucycsICdyZXNvdXJjZVR5cGVzJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRmaWx0ZXIsIGxvZ1NlcnZpY2UsIGFjaGlldmVtZW50U2V0dXAsIGdlbmVEZWZpbml0aW9ucywgcmVzb3VyY2VUeXBlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSlcclxuICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSB7IGFjaGlldmVtZW50czogc3RhdGUuYWNoaWV2ZW1lbnRzLCBwZXJrczogc3RhdGUucGVya3MgfTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHsgYWNoaWV2ZW1lbnRzOiBbXSwgcGVya3M6IFtdIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHM6IHNlbGYucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgcGVya3M6IHNlbGYucHJvZ3Jlc3MucGVya3NcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVQcm9ncmVzcyA9IGZ1bmN0aW9uKGFpZCwgYW1vdW50KSB7XHJcbiAgICAgICAgICAgIHZhciBhY2hQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF07XHJcbiAgICAgICAgICAgIGlmICghYWNoUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgIGFjaFByb2dyZXNzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFpZDogYWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF0gPSBhY2hQcm9ncmVzcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIG9sZHZhbCA9IGFjaFByb2dyZXNzLmFtb3VudDtcclxuICAgICAgICAgICAgdmFyIG5ld3ZhbCA9IGFjaFByb2dyZXNzLmFtb3VudCArIGFtb3VudDtcclxuXHJcbiAgICAgICAgICAgIGFjaFByb2dyZXNzLmFtb3VudCA9IG5ld3ZhbDtcclxuXHJcbiAgICAgICAgICAgIHZhciBhY2hTZXR1cCA9IGFjaGlldmVtZW50U2V0dXAuYWNoaWV2ZW1lbnRzW2FpZF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHJjID0gMDsgcmMgPCBhY2hTZXR1cC5yYW5rcy5sZW5ndGg7IHJjKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbW91bnRSZXF1aXJlZCA9IGFjaFNldHVwLnJhbmtzW3JjXVswXTtcclxuICAgICAgICAgICAgICAgIGlmIChhbW91bnRSZXF1aXJlZCA+IG9sZHZhbCAmJiBhbW91bnRSZXF1aXJlZCA8PSBuZXd2YWwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJld2FyZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnQ6IGFjaFNldHVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnRSZXF1aXJlZDogYW1vdW50UmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmtzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvZyB0aGUgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ1NlcnZpY2UubG9nQWNoaWV2ZW1lbnRNZXNzYWdlKCdBY2hpZXZlbWVudCBFYXJuZWQgLSAnICsgYWNoU2V0dXAubmFtZSArICcgKCcgKyBhbW91bnRSZXF1aXJlZCArICcpJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb2Nlc3MgdGhlIHBlcmtzXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcGMgPSAwOyBwYyA8IGFjaFNldHVwLnJhbmtzW3JjXVsxXS5sZW5ndGg7IHBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBzZWxmLmFwcGx5UGVyayhhY2hTZXR1cC5yYW5rc1tyY11bMV1bcGNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5wZXJrcy5wdXNoKHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCduZXdSZXdhcmRFdmVudCcsIHJld2FyZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5hcHBseVBlcmsgPSBmdW5jdGlvbihhcnIpIHtcclxuICAgICAgICAgICAgdmFyIHBpZCA9IGFyclswXTtcclxuICAgICAgICAgICAgdmFyIHBlcmtTZXR1cCA9IGFjaGlldmVtZW50U2V0dXAucGVya3NbcGlkXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgcGVyayBjYW4gb25seSBiZSBlYXJuZWQgb25jZSBhbmQgdGhlIHBsYXllciBoYXMgZWFybmVkIGl0IGFscmVhZHksXHJcbiAgICAgICAgICAgIC8vIHdlIGRvIG5vdCBoYXZlIHRvIGRvIGFueXRoaW5nXHJcbiAgICAgICAgICAgIGlmIChwZXJrU2V0dXAub25jZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBlcmtTZWFyY2ggPSAkZmlsdGVyKCdmaWx0ZXInKShzZWxmLnByb2dyZXNzLnBlcmtzLCB7IHBpZDogcGlkIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmtTZWFyY2gubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBsb2cgdGhlIG1lc3NhZ2VcclxuICAgICAgICAgICAgdmFyIG1zZyA9IHBlcmtTZXR1cC5uYW1lICsgJyAtICcgKyBwZXJrU2V0dXAuZGVzYztcclxuICAgICAgICAgICAgc3dpdGNoIChwZXJrU2V0dXAucGlkKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQX0dfRU5IQU5DRUQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW5lID0gZ2VuZURlZmluaXRpb25zW2FyclsxXV07XHJcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gbXNnLnJlcGxhY2UoJ1slZG9tXScsIGdlbmUuZG9tKTtcclxuICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cucmVwbGFjZSgnWyVyZWNdJywgZ2VuZS5yZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKCdbJWF0dHJdJywgZ2VuZS5hdHRyWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cucmVwbGFjZSgnWyVhbXRdJywgYXJyWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BfUl9CT05VUyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQX1JfTVVMVElQTElFUic6XHJcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gbXNnLnJlcGxhY2UoJ1slMV0nLCByZXNvdXJjZVR5cGVzW2FyclsxXV0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gbXNnLnJlcGxhY2UoJ1slMl0nLCBhcnJbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gbXNnLnJlcGxhY2UoJ1slJyArIGkgKyAnXScsIGFycltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxvZ1NlcnZpY2UubG9nQWNoaWV2ZW1lbnRNZXNzYWdlKG1zZyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmV0ID0ge1xyXG4gICAgICAgICAgICAgICAgcGlkOiBwaWQsXHJcbiAgICAgICAgICAgICAgICBtc2c6IG1zZyxcclxuICAgICAgICAgICAgICAgIGFycjogYXJyLFxyXG4gICAgICAgICAgICAgICAgZHQ6IChuZXcgRGF0ZSgpKS50b1VUQ1N0cmluZygpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MucGVya3MucHVzaChyZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLlN1YnNjcmliZU5ld1Jld2FyZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ25ld1Jld2FyZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb25zdGFudCgnZGVmYXVsdEJ1aWxkaW5ncycsIHtcclxuICAgIEJVTkdBTE9XOiB7XHJcbiAgICAgICAgbmFtZTogJ0JyZWVkaW5nIEJ1bmdhbG93JyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0EgcHJpdmF0ZSBidW5nYWxvdyB3aGVyZSB0aGUgbWFnaWMgaGFwcGVucy4nLFxyXG4gICAgICAgIHVzZTogJ2JyZWVkaW5nJyxcclxuICAgICAgICBzaXplOiAyLFxyXG4gICAgICAgIGJhc2VDb3N0OiBbe1xyXG4gICAgICAgICAgICByZXNvdXJjZTogJ0RJUlQnLFxyXG4gICAgICAgICAgICBhbW91bnQ6IDI1LFxyXG4gICAgICAgICAgICBjb3N0TXVsdGlwbGllcjogMS4wNVxyXG4gICAgICAgIH1dLFxyXG4gICAgICAgIHB1cmNoYXNlZDogMCxcclxuICAgICAgICBnaWZ0ZWQ6IDEsXHJcbiAgICAgICAgdW5sb2NrZWQ6IDFcclxuXHJcbiAgICB9LFxyXG4gICAgRElSVFBJTEU6IHtcclxuICAgICAgICBuYW1lOiAnRGlydCBwaWxlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1doZXJlIGVsc2Ugd291bGQgeW91IHN0b3JlIGRpcnQ/JyxcclxuICAgICAgICB1c2U6ICdzdG9yYWdlJyxcclxuICAgICAgICBzdG9yZXM6ICdESVJUJyxcclxuICAgICAgICBzaXplOiAyNSxcclxuICAgICAgICBiYXNlQ29zdDogW3tcclxuICAgICAgICAgICAgcmVzb3VyY2U6ICdESVJUJyxcclxuICAgICAgICAgICAgYW1vdW50OiAxMCxcclxuICAgICAgICAgICAgY29zdE11bHRpcGxpZXI6IDEuMjVcclxuICAgICAgICB9XSxcclxuICAgICAgICBwdXJjaGFzZWQ6IDAsXHJcbiAgICAgICAgZ2lmdGVkOiAxLFxyXG4gICAgICAgIHVubG9ja2VkOiAxXHJcbiAgICB9LFxyXG4gICAgU09ESE9VU0U6IHtcclxuICAgICAgICBuYW1lOiAnU29kIGhvdXNlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Byb3ZpZGVzIG1pbmltYWwgc2hlbHRlciBmb3Ige3NpemV9IHRoaW5ncy4nLFxyXG4gICAgICAgIHVzZTogJ2hvdXNpbmcnLFxyXG4gICAgICAgIHNpemU6IDUsXHJcbiAgICAgICAgYmFzZUNvc3Q6IFt7XHJcbiAgICAgICAgICAgIHJlc291cmNlOiAnRElSVCcsXHJcbiAgICAgICAgICAgIGFtb3VudDogNSxcclxuICAgICAgICAgICAgY29zdE11bHRpcGxpZXI6IDEuMDVcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIHJlc291cmNlOiAnV0FURVInLFxyXG4gICAgICAgICAgICBhbW91bnQ6IDUsXHJcbiAgICAgICAgICAgIGNvc3RNdWx0aXBsaWVyOiAxLjA1XHJcbiAgICAgICAgfV0sXHJcbiAgICAgICAgcHVyY2hhc2VkOiAwLFxyXG4gICAgICAgIGdpZnRlZDogMSxcclxuICAgICAgICB1bmxvY2tlZDogMVxyXG4gICAgfSxcclxuICAgIFdFTEw6IHtcclxuICAgICAgICBuYW1lOiAnV2VsbCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdVc2VkIGZvciB3YXRlciBwcm9kdWN0aW9uLicsXHJcbiAgICAgICAgdXNlOiAncHJvZHVjdGlvbicsXHJcbiAgICAgICAgcHJvZHVjZXM6ICdXQVRFUicsXHJcbiAgICAgICAgc2l6ZTogNSxcclxuICAgICAgICBiYXNlQ29zdDogW3tcclxuICAgICAgICAgICAgcmVzb3VyY2U6ICdCUklDS1MnLFxyXG4gICAgICAgICAgICBhbW91bnQ6IDEwMCxcclxuICAgICAgICAgICAgY29zdE11bHRpcGxpZXI6IDEuMDVcclxuICAgICAgICB9XSxcclxuICAgICAgICBwdXJjaGFzZWQ6IDAsXHJcbiAgICAgICAgZ2lmdGVkOiAwLFxyXG4gICAgICAgIHVubG9ja2VkOiAwXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gZ2FtZS5mYWN0b3J5KCdCdWlsZGluZycsIFsnYnVpbGRpbmdUeXBlcycsIGZ1bmN0aW9uKGJ1aWxkaW5nVHlwZXMpIHtcclxuLy8gICAgIHZhciBCdWlsZGluZyA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbi8vICAgICAgICAgdGhpcy51cGRhdGUoc3RhdGUpO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIEJ1aWxkaW5nLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4vLyAgICAgICAgIHRoaXMuYnVpbGRpbmdUeXBlID0gc3RhdGUuYnVpbGRpbmdUeXBlIHx8IHRoaXMuYnVpbGRpbmdUeXBlO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIHJldHVybiBCdWlsZGluZztcclxuLy8gfV0pO1xyXG5cclxuXHJcbmdhbWUuc2VydmljZSgnYnVpbGRpbmdTZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnZGVmYXVsdEJ1aWxkaW5ncycsICdyZXNvdXJjZVR5cGVzJywgJ3Jlc291cmNlU2VydmljZScsICdwb3B1bGF0aW9uU2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCBkZWZhdWx0QnVpbGRpbmdzLCByZXNvdXJjZVR5cGVzLCByZXNvdXJjZVNlcnZpY2UsIHBvcHVsYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICAgICAgc2VsZi5zdGF0ZS5idWlsZGluZ3MgPSBhbmd1bGFyLm1lcmdlKHt9LCBkZWZhdWx0QnVpbGRpbmdzLCBzdGF0ZS5idWlsZGluZ3MpO1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVN0b3JhZ2UoKTtcclxuICAgICAgICAgICAgc2VsZi51cGRhdGVCcmVlZGVycygpO1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUhvdXNpbmcoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldEJ1aWxkaW5nU25hcHNob3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxmLnN0YXRlLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzZWxmLnN0YXRlLmJ1aWxkaW5nc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZGluZy51bmxvY2tlZCB8fCAwID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuYXBzaG90LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYnVpbGRpbmcubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzZWxmLmZvcm1hdERlc2NyaXB0aW9uKGJ1aWxkaW5nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuZ2V0U2l6ZShidWlsZGluZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lZDogYnVpbGRpbmcucHVyY2hhc2VkICsgYnVpbGRpbmcuZ2lmdGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29zdFRvQnVpbGQ6IHNlbGYuY2FsY3VsYXRlTmV4dENvc3QoYnVpbGRpbmcpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5mb3JtYXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGJ1aWxkaW5nKSB7XHJcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IGJ1aWxkaW5nLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24uaW5kZXhPZigne3NpemV9JykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHNlbGYuZ2V0U2l6ZShidWlsZGluZyk7XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uLnJlcGxhY2UoL3tzaXplfS9nLCBzaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5nZXRTaXplID0gZnVuY3Rpb24oYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSBidWlsZGluZy5zaXplICogKGJ1aWxkaW5nLm11bHRpcGxpZXIgfHwgMSk7XHJcbiAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdicmVlZGluZycpIHNpemUgKj0gKHNlbGYuc3RhdGUuYnJlZWRpbmdTaXplTXVsdGlwbGllciB8fCAxKTtcclxuICAgICAgICAgICAgaWYgKGJ1aWxkaW5nLnVzZSA9PT0gJ3N0b3JhZ2UnKSBzaXplICo9IChzZWxmLnN0YXRlLnN0b3JhZ2VTaXplTXVsdGlwbGllciB8fCAxKTtcclxuICAgICAgICAgICAgaWYgKGJ1aWxkaW5nLnVzZSA9PT0gJ2hvdXNpbmcnKSBzaXplICo9IChzZWxmLnN0YXRlLmhvdXNpbmdTaXplTXVsdGlwbGllciB8fCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmNhbGN1bGF0ZU5leHRDb3N0ID0gZnVuY3Rpb24oYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgdmFyIGNvc3RzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVpbGRpbmcuYmFzZUNvc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb3N0ID0gYnVpbGRpbmcuYmFzZUNvc3RbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEFtb3VudCA9IGNvc3QuYW1vdW50ICogTWF0aC5wb3coY29zdC5jb3N0TXVsdGlwbGllciwgYnVpbGRpbmcucHVyY2hhc2VkKTtcclxuICAgICAgICAgICAgICAgIGNvc3RzLnB1c2goeyByZXNvdXJjZTogcmVzb3VyY2VUeXBlc1tjb3N0LnJlc291cmNlXS5uYW1lLCBhbW91bnQ6IG5leHRBbW91bnQgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvc3RzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlQnJlZWRlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB0eXBlTXVsdCA9IHNlbGYuc3RhdGUuYnJlZWRpbmdTaXplTXVsdGlwbGllciB8fCAxO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VsZi5zdGF0ZS5idWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnN0YXRlLmJ1aWxkaW5ncy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gc2VsZi5zdGF0ZS5idWlsZGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmcudXNlID09PSAnYnJlZWRpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gYnVpbGRpbmcuc2l6ZU11bHRpcGxpZXIgfHwgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ICs9IE1hdGguZmxvb3IoYnVpbGRpbmcuc2l6ZSAqIG11bHRpcGxpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXggKj0gdHlwZU11bHQ7XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLnNldEJyZWVkZXJMaW1pdChNYXRoLmZsb29yKG1heCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi51cGRhdGVTdG9yYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlTXVsdCA9IHNlbGYuc3RhdGUuc3RvcmFnZVNpemVNdWx0aXBsaWVyIHx8IDE7XHJcbiAgICAgICAgICAgIHZhciByZXNvdXJjZXMgPSByZXNvdXJjZVNlcnZpY2UuZ2V0UmVzb3VyY2VzU25hcHNob3QoKTtcclxuICAgICAgICAgICAgdmFyIHJ0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxmLnN0YXRlLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzZWxmLnN0YXRlLmJ1aWxkaW5nc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdzdG9yYWdlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydC5wdXNoKGJ1aWxkaW5nLnN0b3Jlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gYnVpbGRpbmcubXVsdGlwbGllciB8fCAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbYnVpbGRpbmcuc3RvcmVzXS5uZXdBbW91bnQgPSByZXNvdXJjZXNbYnVpbGRpbmcuc3RvcmVzXS5uZXdBbW91bnQgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzW2J1aWxkaW5nLnN0b3Jlc10ubmV3QW1vdW50ICs9IE1hdGguZmxvb3IoKGJ1aWxkaW5nLnNpemUgKiBtdWx0aXBsaWVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBydC5maWx0ZXIoZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzW3RdLm5ld0Ftb3VudCA9IE1hdGguZmxvb3IocmVzb3VyY2VzW3RdLm5ld0Ftb3VudCAqIHR5cGVNdWx0KTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbdF1bMV0gIT0gcmVzb3VyY2VzW3RdLm5ld0Ftb3VudClcclxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZVNlcnZpY2Uuc2V0UmVzb3VyY2VMaW1pdCh0LCByZXNvdXJjZXNbdF0ubmV3QW1vdW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZUhvdXNpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHR5cGVNdWx0ID0gc2VsZi5zdGF0ZS5ob3VzaW5nU2l6ZU11bHRpcGxpZXIgfHwgMTtcclxuICAgICAgICAgICAgdmFyIG1heCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxmLnN0YXRlLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzZWxmLnN0YXRlLmJ1aWxkaW5nc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdob3VzaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IGJ1aWxkaW5nLm11bHRpcGxpZXIgfHwgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ICs9IE1hdGguZmxvb3IoYnVpbGRpbmcuc2l6ZSAqIG11bHRpcGxpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5zZXRQb3B1bGF0aW9uTGltaXQoTWF0aC5mbG9vcihtYXggKiB0eXBlTXVsdCkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuU3Vic2NyaWJlQnVpbGRpbmdzQ2hhbmdlZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ2J1aWxkaW5nc0NoYW5nZWRFdmVudCcsIGNhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUpIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnYnVpbGRpbmdzQ2hhbmdlZEV2ZW50Jywgc2VsZi5nZXRCdWlsZGluZ1NuYXBzaG90KCkpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbl0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuZ2FtZS5zZXJ2aWNlKCdwb3B1bGF0aW9uU2VydmljZScsIFtcclxuICAgICckcm9vdFNjb3BlJywgJ2dhbWVMb29wU2VydmljZScsICdQb3B1bGF0aW9uJywgJ2xvZ1NlcnZpY2UnLCAnYWNoaWV2ZW1lbnRTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsIGdhbWVMb29wU2VydmljZSwgUG9wdWxhdGlvbiwgbG9nU2VydmljZSwgYWNoaWV2ZW1lbnRTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHt9O1xyXG4gICAgICAgICAgICBzZWxmLmJyZWVkU3RlcHMgPSBzdGF0ZS5icmVlZFN0ZXBzIHx8IHN0YXRlLmJyZWVkU3RlcHMgfHwgNjtcclxuICAgICAgICAgICAgc2VsZi5zdGVwc1NpbmNlQnJlZWQgPSBzdGF0ZS5zdGVwc1NpbmNlQnJlZWQgfHwgc2VsZi5zdGVwc1NpbmNlQnJlZWQgfHwgMDtcclxuICAgICAgICAgICAgc2VsZi5wb3B1bGF0aW9uU3RhdGUgPSBzdGF0ZS5wb3B1bGF0aW9uU3RhdGUgfHwgc2VsZi5wb3B1bGF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbiA9IChzZWxmLnBvcHVsYXRpb25TdGF0ZSkgPyBuZXcgUG9wdWxhdGlvbihzZWxmLnBvcHVsYXRpb25TdGF0ZSkgOiBzZWxmLnBvcHVsYXRpb24gfHwgbmV3IFBvcHVsYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubG9nU2VydmljZSA9IGxvZ1NlcnZpY2U7XHJcbiAgICAgICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCgpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIGJyZWVkU3RlcHM6IHNlbGYuYnJlZWRTdGVwcyxcclxuICAgICAgICAgICAgICAgIHN0ZXBzU2luY2VCcmVlZDogc2VsZi5zdGVwc1NpbmNlQnJlZWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc3RhdGUucG9wdWxhdGlvblN0YXRlID0gc2VsZi5wb3B1bGF0aW9uLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmhhbmRsZUdhbWVMb29wID0gZnVuY3Rpb24oZXZlbnQsIHN0ZXBzKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3BVcGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5uYW1lICE9PSAnZ2FtZUxvb3BFdmVudCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3B1bGF0ZVNlcnZpY2UuaGFuZGxlR2FtZUxvb3AgLSBJbnZhbGlkIGV2ZW50OiAnICsgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnBvcHVsYXRpb24uaXNCcmVlZGluZygpKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnN0ZXBzU2luY2VCcmVlZCArPSBzdGVwcztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChzZWxmLnN0ZXBzU2luY2VCcmVlZCA+PSBzZWxmLmJyZWVkU3RlcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0ZXBzU2luY2VCcmVlZCAtPSBzZWxmLmJyZWVkU3RlcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNwcmluZyA9IHNlbGYucG9wdWxhdGlvbi5icmVlZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzcHJpbmcgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nU2VydmljZS5sb2dCcmVlZE1lc3NhZ2UoXCJOZXcgb2Zmc3ByaW5nISBcIiArIG9mZnNwcmluZy5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ckJhc2UgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50QmFzZSA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRCYXNlID0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNockJhc2UgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGNrQmFzZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW5lcyA9IG9mZnNwcmluZy5nZW5lcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBnZW5lcy5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcgPCAxMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJCYXNlICs9IGdlbmVzW2ddWzFdIC0gZ2VuZXNbZ11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChnIDwgMjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50QmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZyA8IDMwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEJhc2UgKz0gZ2VuZXNbZ11bMV0gLSBnZW5lc1tnXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGcgPCA0MClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJCYXNlICs9IGdlbmVzW2ddWzFdIC0gZ2VuZXNbZ11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGNrQmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0ckJhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UudXBkYXRlUHJvZ3Jlc3MoJ0FfQklSVEhTJywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcFVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcFVwZGF0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRCcmVlZGVyID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5pbmRleE9mKGlkKSA9PT0gLTEgJiYgc2VsZi5wb3B1bGF0aW9uLmJyZWVkZXJzLmxlbmd0aCA8IHNlbGYucG9wdWxhdGlvbi5icmVlZGVyTGltaXQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5wdXNoKGlkKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2dTZXJ2aWNlLmxvZ0JyZWVkTWVzc2FnZShcIkJyZWVkZXIgYWRkZWQ6IFwiICsgc2VsZi5wb3B1bGF0aW9uLmdldEJ5SWQoaWQpLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJlbW92ZUJyZWVkZXIgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBzZWxmLnBvcHVsYXRpb24uYnJlZWRlcnMuaW5kZXhPZihpZCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnBvcHVsYXRpb24uaXNCcmVlZGluZygpKSBzZWxmLnN0ZXBzU2luY2VCcmVlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNlbmRCcmVlZGVyVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYubG9nU2VydmljZS5sb2dCcmVlZE1lc3NhZ2UoXCJCcmVlZGVyIHJlbW92ZWQ6IFwiICsgc2VsZi5wb3B1bGF0aW9uLmdldEJ5SWQoaWQpLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZU1lbWJlciA9IGZ1bmN0aW9uKGlkLCBnZW5lSW5kZXgsIGdlbmVWYWx1ZXMpIHtcclxuICAgICAgICAgICAgdmFyIG1lbWJlciA9IHNlbGYucG9wdWxhdGlvbi5nZXRCeUlkKGlkKTtcclxuICAgICAgICAgICAgbWVtYmVyLmdlbmVzW2dlbmVJbmRleF0gPSBnZW5lVmFsdWVzO1xyXG4gICAgICAgICAgICBtZW1iZXIudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHNlbGYuc2VuZFBvcHVsYXRpb25VcGRhdGVFdmVudCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZXRCcmVlZGVyTGltaXQgPSBmdW5jdGlvbihuZXdMaW1pdCkge1xyXG4gICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24uYnJlZWRlckxpbWl0ID0gbmV3TGltaXQ7XHJcbiAgICAgICAgICAgIHNlbGYuc2VuZFBvcHVsYXRpb25VcGRhdGVFdmVudCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZXRQb3B1bGF0aW9uTGltaXQgPSBmdW5jdGlvbihuZXdMaW1pdCkge1xyXG4gICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24ubWF4U2l6ZSA9IG5ld0xpbWl0O1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdicmVlZGVyVXBkYXRlRXZlbnQnLCB7IGJyZWVkZXJzOiBzZWxmLnBvcHVsYXRpb24uYnJlZWRlcnMsIGlzQnJlZWRpbmc6IHNlbGYucG9wdWxhdGlvbi5pc0JyZWVkaW5nKCksIHN0ZXBzU2luY2VCcmVlZDogc2VsZi5zdGVwc1NpbmNlQnJlZWQsIGJyZWVkU3RlcHM6IHNlbGYuYnJlZWRTdGVwcyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2VuZFBvcHVsYXRpb25VcGRhdGVFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdwb3B1bGF0aW9uVXBkYXRlRXZlbnQnLCB7IHBvcHVsYXRpb246IHNlbGYucG9wdWxhdGlvbi5tZW1iZXJzLCBtYXhTaXplOiBzZWxmLnBvcHVsYXRpb24ubWF4U2l6ZSwgYnJlZWRlckxpbWl0OiBzZWxmLnBvcHVsYXRpb24uYnJlZWRlckxpbWl0IH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuU3Vic2NyaWJlQnJlZWRlclVwZGF0ZUV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ2JyZWVkZXJVcGRhdGVFdmVudCcsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRCcmVlZGVyVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLlN1YnNjcmliZVBvcHVsYXRpb25VcGRhdGVFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdwb3B1bGF0aW9uVXBkYXRlRXZlbnQnLCBjYWxsYmFjay5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBnYW1lTG9vcFNlcnZpY2UuU3Vic2NyaWJlR2FtZUxvb3BFdmVudCgkcm9vdFNjb3BlLCBzZWxmLmhhbmRsZUdhbWVMb29wKTtcclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb25zdGFudCgncmVzb3VyY2VUeXBlcycsIHtcclxuICAgIERJUlQ6IHtcclxuICAgICAgICBuYW1lOiAnRGlydCcsXHJcbiAgICAgICAgZGVzYzogJ1VzZWQgaW4gY29uc3RydWN0aW9uIGFuZCBtaW5pbmcuJyxcclxuICAgICAgICBhdHRyOiAnU1RSJ1xyXG4gICAgfSxcclxuICAgIEJSSUNLUzoge1xyXG4gICAgICAgIG5hbWU6ICdCcmlja3MnLFxyXG4gICAgICAgIGRlc2M6ICdVc2VkIGluIGNvbnN0cnVjdGlvbiBhbmQgc21lbHRpbmcuJyxcclxuICAgICAgICBhdHRyOiAnU1RSJ1xyXG4gICAgfSxcclxuICAgIFNURUVMOiB7XHJcbiAgICAgICAgbmFtZTogJ1N0ZWVsJyxcclxuICAgICAgICBkZXNjOiAnVXNlZCBpbiBhZHZhbmNlZCBjb25zdHJ1Y3Rpb24uJyxcclxuICAgICAgICBhdHRyOiAnU1RSJ1xyXG4gICAgfSxcclxuICAgIFdBVEVSOiB7XHJcbiAgICAgICAgbmFtZTogJ1dhdGVyJyxcclxuICAgICAgICBkZXNjOiAnVXNlZCBpbiBjb25zdHJ1Y3Rpb24sIG1pbmluZyBhbmQgcG9wdWxhdGlvbiBleHBhbnNpb24uJyxcclxuICAgICAgICBhdHRyOiAnRU5EJ1xyXG4gICAgfSxcclxuICAgIFdPT0Q6IHtcclxuICAgICAgICBuYW1lOiAnV29vZCcsXHJcbiAgICAgICAgZGVzYzogJ1VzZWQgaW4gY29uc3RydWN0aW9uIGFuZCBtaW5pbmcuJyxcclxuICAgICAgICBhdHRyOiAnRU5EJ1xyXG4gICAgfSxcclxuICAgIEdPTEQ6IHtcclxuICAgICAgICBuYW1lOiAnR29sZCcsXHJcbiAgICAgICAgZGVzYzogJ1VzZWQgZm9yIHB1cmNoYXNpbmcgZ2VuZSByZXNlYXJjaCB0ZWNobm9sb2dpZXMuJyxcclxuICAgICAgICBhdHRyOiAnSU5UJ1xyXG4gICAgfSxcclxuICAgIFNDSUVOQ0U6IHtcclxuICAgICAgICBuYW1lOiAnU2NpZW5jZScsXHJcbiAgICAgICAgZGVzYzogJ1VzZWQgaW4gZ2VuZXRpYyBtb2RpZmljYXRpb24gYW5kIGFkdmFuY2VkIGNvbnN0cnVjdGlvbi4nLFxyXG4gICAgICAgIGF0dHI6ICdJTlQnXHJcbiAgICB9LFxyXG4gICAgSEFQUElORVNTOiB7XHJcbiAgICAgICAgbmFtZTogJ0hhcHBpbmVzcycsXHJcbiAgICAgICAgZGVzYzogJ0dvb2QgdGhpbmdzIGhhcHBlbiB0byB0aG9zZSB0aGF0IGFyZSBoYXBweS4uLicsXHJcbiAgICAgICAgYXR0cjogJ0NIUidcclxuICAgIH0sXHJcbiAgICBFVk9DT0lOOiB7XHJcbiAgICAgICAgbmFtZTogJ0V2by1Db2lucycsXHJcbiAgICAgICAgZGVzYzogJ0EgcmFyZSBjb21tb2RpdHkgaW5kZWVkLiBVc2VkIHRvIGRpc2NvdmVyIHRyYWl0cy4nLFxyXG4gICAgICAgIGF0dHI6ICdMQ0snXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZ2FtZS5zZXJ2aWNlKCdyZXNvdXJjZVNlcnZpY2UnLCBbXHJcbiAgICAnJHJvb3RTY29wZScsICckZmlsdGVyJywgJ2xvZ1NlcnZpY2UnLCAnZ2VuZURlZmluaXRpb25zJywgJ3Jlc291cmNlVHlwZXMnLCAnYWNoaWV2ZW1lbnRTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRmaWx0ZXIsIGxvZ1NlcnZpY2UsIGdlbmVEZWZpbml0aW9ucywgcmVzb3VyY2VUeXBlcywgYWNoaWV2ZW1lbnRTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXRlID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UuU3Vic2NyaWJlTmV3UmV3YXJkRXZlbnQoJHJvb3RTY29wZSwgc2VsZi5yZXdhcmRFYXJuZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB0dXJuIHRoZW0gYWxsIG9uIGZvciB0ZXN0aW5nIHB1cnBvc2VzXHJcbiAgICAgICAgICAgIHZhciBvdmVycmlkZUFsbE9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdExpbWl0cyA9IHtcclxuICAgICAgICAgICAgICAgIERJUlQ6IFswLCAwLCB0cnVlIHx8IG92ZXJyaWRlQWxsT25dLFxyXG4gICAgICAgICAgICAgICAgQlJJQ0tTOiBbMCwgMCwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbl0sXHJcbiAgICAgICAgICAgICAgICBXQVRFUjogWzAsIDAsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT25dLFxyXG4gICAgICAgICAgICAgICAgV09PRDogWzAsIDAsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT25dLFxyXG4gICAgICAgICAgICAgICAgR09MRDogWzAsIDAsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT25dLFxyXG4gICAgICAgICAgICAgICAgSEFQUElORVNTOiBbMCwgLTEsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT25dLFxyXG4gICAgICAgICAgICAgICAgU0NJRU5DRTogWzAsIC0xLCBmYWxzZSB8fCBvdmVycmlkZUFsbE9uXSxcclxuICAgICAgICAgICAgICAgIFNURUVMOiBbMCwgMCwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbl0sXHJcbiAgICAgICAgICAgICAgICBFVk9DT0lOOiBbMCwgLTEsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT25dXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciByZXNvdXJjZVR5cGUgaW4gcmVzb3VyY2VUeXBlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlVHlwZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gc2VsZi5zdGF0ZS5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IGRlZmF1bHRMaW1pdHNbcmVzb3VyY2VUeXBlXSB8fCBbMCwgOTExLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUucmVzb3VyY2VzW3Jlc291cmNlVHlwZV0gPSByO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUNoYW5nZWRFdmVudCcsIHJlc291cmNlVHlwZSwgclswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgncmVzb3VyY2VMaW1pdENoYW5nZWRFdmVudCcsIHJlc291cmNlVHlwZSwgclsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgncmVzb3VyY2VFbmFibGVkRXZlbnQnLCByZXNvdXJjZVR5cGUsIHJbMl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnN0YXRlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYucmV3YXJkRWFybmVkID0gZnVuY3Rpb24oZXZlbnQsIHJld2FyZCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHJld2FyZC5wZXJrcy5sZW5ndGg7IHArKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBlcmsgPSByZXdhcmQucGVya3NbcF07XHJcbiAgICAgICAgICAgICAgICBpZiAocGVyay5waWQgPT09ICdQX1JfQk9OVVMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRSZXNvdXJjZShwZXJrLmFyclsxXSwgcGVyay5hcnJbMl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmsucGlkID09PSAnUF9NX0hBUFBJTkVTUycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlLnJlc291cmNlcy5IQVBQSU5FU1NbMl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlRW5hYmxlZEV2ZW50JywgJ0hBUFBJTkVTUycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRSZXNvdXJjZXNTbmFwc2hvdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYW5ndWxhci5jb3B5KHNlbGYuc3RhdGUucmVzb3VyY2VzKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZFJlc291cmNlID0gZnVuY3Rpb24ocmVzb3VyY2VUeXBlLCBhbW91bnQpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBzZWxmLnN0YXRlLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdO1xyXG4gICAgICAgICAgICBpZiAoclsyXSA9PT0gZmFsc2UgJiYgclsxXSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzb3VyY2VUeXBlICsgXCIgaXMgbm90IGVuYWJsZWQsIGNhbm5vdCBpbmNyZWFzZSBhbW91bnQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgclswXSArPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIGlmIChyWzFdICE9IC0xICYmIHJbMF0gPiByWzFdKSByWzBdID0gclsxXTtcclxuICAgICAgICAgICAgaWYgKHJbMF0gPCAwKSByWzBdID0gMDtcclxuICAgICAgICAgICAgYWNoaWV2ZW1lbnRTZXJ2aWNlLnVwZGF0ZVByb2dyZXNzKCdBXycgKyByZXNvdXJjZVR5cGUsIGFtb3VudCk7XHJcbiAgICAgICAgICAgIGFjaGlldmVtZW50U2VydmljZS51cGRhdGVQcm9ncmVzcygnQV8nICsgcmVzb3VyY2VUeXBlICsgJ19DJywgclswXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoclsyXSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlRW5hYmxlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJbMl0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUNoYW5nZWRFdmVudCcsIHJlc291cmNlVHlwZSwgclswXSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNldFJlc291cmNlTGltaXQgPSBmdW5jdGlvbihyZXNvdXJjZVR5cGUsIGFtb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgciA9IHNlbGYuc3RhdGUucmVzb3VyY2VzW3Jlc291cmNlVHlwZV07XHJcbiAgICAgICAgICAgIGlmIChyWzFdID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBzZXQgcmVzb3VyY2UgbGltaXQgb246IFwiICsgcmVzb3VyY2VUeXBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByWzFdID0gYW1vdW50O1xyXG4gICAgICAgICAgICBpZiAoclsyXSA9PT0gZmFsc2UgJiYgKGFtb3VudCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICByWzJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlRW5hYmxlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUxpbWl0Q2hhbmdlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCByWzFdKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLlN1YnNjcmliZVJlc291cmNlQ2hhbmdlZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ3Jlc291cmNlQ2hhbmdlZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmIChzY29wZSkgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVSZXNvdXJjZUxpbWl0Q2hhbmdlZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ3Jlc291cmNlTGltaXRDaGFuZ2VkRXZlbnQnLCBjYWxsYmFjay5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgaWYgKHNjb3BlKSBzY29wZS4kb24oJyRkZXN0cm95JywgaGFuZGxlcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLlN1YnNjcmliZVJlc291cmNlRW5hYmxlZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ3Jlc291cmNlRW5hYmxlZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmIChzY29wZSkgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkUmVzb3VyY2VMaXN0Jywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Jlc291cmNlTGlzdC9yZXNvdXJjZUxpc3QuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMucmVzb3VyY2VMaXN0J1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMucmVzb3VyY2VMaXN0JywgW1xyXG4gICAgJyRzY29wZScsICdyZXNvdXJjZVNlcnZpY2UnLCAncmVzb3VyY2VUeXBlcycsXHJcbiAgICBmdW5jdGlvbigkc2NvcGUsIHJlc291cmNlU2VydmljZSwgcmVzb3VyY2VUeXBlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnJlc291cmNlVHlwZXMgPSByZXNvdXJjZVR5cGVzO1xyXG4gICAgICAgIHNlbGYucmVzb3VyY2VzID0ge307XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5TdWJzY3JpYmVSZXNvdXJjZUNoYW5nZWRFdmVudCgkc2NvcGUsIHNlbGYucmVzb3VyY2VDaGFuZ2VkKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VTZXJ2aWNlLlN1YnNjcmliZVJlc291cmNlTGltaXRDaGFuZ2VkRXZlbnQoJHNjb3BlLCBzZWxmLnJlc291cmNlTGltaXRDaGFuZ2VkKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VTZXJ2aWNlLlN1YnNjcmliZVJlc291cmNlRW5hYmxlZEV2ZW50KCRzY29wZSwgc2VsZi5yZXNvdXJjZUVuYWJsZWQpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlcyA9IHJlc291cmNlU2VydmljZS5nZXRSZXNvdXJjZXNTbmFwc2hvdCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0VW5sb2NrZWRSZXNvdXJjZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciByZXMgaW4gc2VsZi5yZXNvdXJjZXMpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzKSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNvdXJjZXNbcmVzXVsyXSA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0W3Jlc10gPSBzZWxmLnJlc291cmNlc1tyZXNdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgc2VsZi5yZXNvdXJjZUNoYW5nZWQgPSBmdW5jdGlvbihldmVudCwgcmVzb3VyY2VUeXBlLCBhbW91bnQpIHtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdKVxyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXSA9IFtdO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdWzBdID0gYW1vdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yZXNvdXJjZUxpbWl0Q2hhbmdlZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXNvdXJjZVR5cGUsIGFtb3VudCkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYucmVzb3VyY2VzW3Jlc291cmNlVHlwZV0pXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdID0gW107XHJcbiAgICAgICAgICAgIHNlbGYucmVzb3VyY2VzW3Jlc291cmNlVHlwZV1bMV0gPSBhbW91bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJlc291cmNlRW5hYmxlZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXNvdXJjZVR5cGUsIGJpdCkge1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdWzJdID0gYml0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG5dKTsiLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9ob21lLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbWQtNiBjb2wtbGctNFwiPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PGJsb3FoZWFkLXBsYXllci1ib3ggdGl0bGU9XCJMb2dcIj48YmxvcWhlYWQtbG9nPjwvYmxvcWhlYWQtbG9nPjwvYmxvcWhlYWQtcGxheWVyLWJveD48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjxibG9xaGVhZC1wbGF5ZXItYm94IHRpdGxlPVwiUmVzb3VyY2VzXCI+PGJsb3FoZWFkLXJlc291cmNlLWxpc3Q+PC9ibG9xaGVhZC1yZXNvdXJjZS1saXN0PjwvYmxvcWhlYWQtcGxheWVyLWJveD48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC02IGNvbC1sZy04XCI+PGRpdiB1aS12aWV3PVwiXCI+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvYWNoaWV2ZW1lbnRzL2FjaGlldmVtZW50cy5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PGJsb3FoZWFkLXBsYXllci1ib3ggdGl0bGU9XCJBY2hpZXZlbWVudHNcIj48ZGl2IGNsYXNzPVwicm93IGJyZWVkZXItY29udGFpbmVyXCI+PGRpdiBuZy1yZXBlYXQ9XCJjaGlsZCBpbiAkY3RybC5wb3B1bGF0aW9uXCIgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTggY29sLW1kLTYgY29sLWxnLTRcIj48YmxvcWhlYWQtYnJlZWRlciB1bml0PVwiY2hpbGRcIiBhc3NpZ249XCIkY3RybC5hZGRCcmVlZGVyKCRpZClcIj48L2Jsb3FoZWFkLWJyZWVkZXI+PC9kaXY+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL2J1aWxkaW5nTGlzdC9idWlsZGluZ0xpc3QuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIiB0aXRsZT1cIlwiPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTVcIj5CdWlsZGluZzwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtMlwiPk93bmVkPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInJvd1wiIG5nLXJlcGVhdD1cImJ1aWxkaW5nIGluICRjdHJsLmJ1aWxkaW5nc1wiIHN0eWxlPVwicGFkZGluZy1ib3R0b206IDVweFwiPjxkaXYgY2xhc3M9XCJjb2wteHMtNVwiPjxoNSB1aWItdG9vbHRpcD1cInt7YnVpbGRpbmcuZGVzY3JpcHRpb259fVwiPnt7YnVpbGRpbmcubmFtZX19PC9oNT48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLXhzLTJcIj48aDUgbmctYmluZD1cImJ1aWxkaW5nLm93bmVkXCI+PC9oNT48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLXhzLTRcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIHRvb2x0aXAtcGxhY2VtZW50PVwidG9wXCIgdWliLXRvb2x0aXAtdGVtcGxhdGU9XCJcXCdyZXNvdXJjZVRvb2x0aXAuaHRtbFxcJ1wiPkJ1aWxkPC9idXR0b24+PC9kaXY+PC9kaXY+PHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwicmVzb3VyY2VUb29sdGlwLmh0bWxcIj48ZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICA8aDU+UmVxdWlyZXM8L2g1PlxcbicgK1xuICAgICcgICAgICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cImNvc3QgaW4gYnVpbGRpbmcuY29zdFRvQnVpbGRcIj48c3BhbiBuZy1iaW5kPVwiY29zdC5yZXNvdXJjZVwiPjwvc3Bhbj46IDxzcGFuIG5nLWJpbmQ9XCJjb3N0LmFtb3VudFwiPjwvc3Bhbj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICA8L2Rpdj48L3NjcmlwdD48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9sb2cvbG9nLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwibG9nLWNvbXBvbmVudFwiPjx1bCBjbGFzcz1cImxpc3QtZ3JvdXBcIj48bGkgbmctcmVwZWF0PVwiaXRlbSBpbiAkY3RybC5tZXNzYWdlcyB0cmFjayBieSAkaW5kZXhcIiBuZy1jbGFzcz1cIiRjdHJsLmdldExvZ0NsYXNzKGl0ZW0udHlwZSlcIj5bPHNwYW4gbmctYmluZD1cIml0ZW0udGltZXN0YW1wfGRhdGU6XFwnTU0vZGQgSEg6bW06c3NcXCdcIj48L3NwYW4+XSZuYnNwOyA8c3BhbiBuZy1iaW5kPVwiaXRlbS5tZXNzYWdlXCI+PC9zcGFuPjwvbGk+PC91bD48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9wbGF5ZXJCb3gvcGxheWVyQm94Lmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPjxkaXYgY2xhc3M9XCJwYW5lbC1oZWFkaW5nXCI+PGgzIGNsYXNzPVwicGFuZWwtdGl0bGVcIiBuZy1iaW5kPVwiJGN0cmwudGl0bGVcIj48L2gzPjwvZGl2PjxkaXYgY2xhc3M9XCJwYW5lbC1ib2R5XCI+PG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPjwvZGl2PjxkaXYgbmctaWY9XCJhbmd1bGFyLmlzRGVmaW5lZCgkY3RybC5mb290ZXIpXCIgY2xhc3M9XCJwYW5lbC1mb290ZXJcIj48c3BhbiBuZy1iaW5kPVwiJGN0cmwuZm9vdGVyXCI+PC9zcGFuPjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL21haW5HYW1lL2JyZWVkZXIuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJibG9xaGVhZC1jb21wb25lbnRcIj48aDU+e3skY3RybC51bml0Lm5hbWV9fSA8aSBjbGFzcz1cImZhIGZhLXN0YXJcIiBuZy1yZXBlYXQ9XCJ0cmFpdCBpbiAkY3RybC51bml0LnRyYWl0c1wiIGRhdGEtY29udGFpbmVyPVwiYm9keVwiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIHJlbD1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIHRpdGxlPVwie3t0cmFpdC5uYW1lfX1cIj48L2k+PC9oNT48dGFibGUgY2xhc3M9XCJnZW5vbWVFZGl0b3JcIj48dGhlYWQ+PHRyPjx0aCBjb2xzcGFuPVwiNVwiPjxpbWcgY2xhc3M9XCJpbWctcmVzcG9uc2l2ZVwiIG5nLXNyYz1cInt7JGN0cmwudW5pdC5yZWRHcmVlbkltYWdlfX1cIj48L3RoPjwvdHI+PHRyPjx0aCBzdHlsZT1cIndpZHRoOiAyMCVcIj5TVFI8L3RoPjx0aCBzdHlsZT1cIndpZHRoOiAyMCVcIj5JTlQ8L3RoPjx0aCBzdHlsZT1cIndpZHRoOiAyMCVcIj5FTkQ8L3RoPjx0aCBzdHlsZT1cIndpZHRoOiAyMCVcIj5DSFI8L3RoPjx0aCBzdHlsZT1cIndpZHRoOiAyMCVcIj5MQ0s8L3RoPjwvdHI+PC90aGVhZD48dGJvZHk+PHRyPjx0ZD48c3BhbiBuZy1iaW5kPVwiJGN0cmwudW5pdC5hdHRyaWJ1dGVzLlNUUlwiPjwvc3Bhbj48L3RkPjx0ZD48c3BhbiBuZy1iaW5kPVwiJGN0cmwudW5pdC5hdHRyaWJ1dGVzLklOVFwiPjwvc3Bhbj48L3RkPjx0ZD48c3BhbiBuZy1iaW5kPVwiJGN0cmwudW5pdC5hdHRyaWJ1dGVzLkVORFwiPjwvc3Bhbj48L3RkPjx0ZD48c3BhbiBuZy1iaW5kPVwiJGN0cmwudW5pdC5hdHRyaWJ1dGVzLkNIUlwiPjwvc3Bhbj48L3RkPjx0ZD48c3BhbiBuZy1iaW5kPVwiJGN0cmwudW5pdC5hdHRyaWJ1dGVzLkxDS1wiPjwvc3Bhbj48L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjxkaXYgbmctc2hvdz1cIiRjdHJsLmFsbG93QXNzaWduXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIiRjdHJsLmFzc2lnbk1lKCkgXCI+QnJlZWQgTWU8L2J1dHRvbj48ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cIm1lbnVcIiBkYXRhLWNvbnRhaW5lcj1cImJvZHlcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5Xb3JrIDxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+PC9idXR0b24+PHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPjxsaSBuZy1yZXBlYXQ9XCJqb2IgaW4gW1xcJ0RpZ1xcJywgXFwnRmFybVxcJywgXFwnQ2hvcFxcJywgXFwnQnVpbGRcXCddXCI+PGEgbmctYmluZD1cImpvYlwiPjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvbWFpbkdhbWUvbWFpbkdhbWUuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIj48ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjxibG9xaGVhZC1wbGF5ZXItYm94IHRpdGxlPVwiUG9wdWxhdGlvbiBbe3skY3RybC5wb3B1bGF0aW9uLmxlbmd0aH19IC8ge3skY3RybC5tYXhQb3B1bGF0aW9ufX1dIC0tLUZJTFRFUlMgSEVSRT8/Py0tLS1cIj48ZGl2IGNsYXNzPVwicm93IGJyZWVkZXItY29udGFpbmVyXCI+PGRpdiBuZy1yZXBlYXQ9XCJjaGlsZCBpbiAkY3RybC5wb3B1bGF0aW9uXCIgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTggY29sLW1kLTYgY29sLWxnLTRcIj48YmxvcWhlYWQtYnJlZWRlciB1bml0PVwiY2hpbGRcIiBhc3NpZ249XCIkY3RybC5hZGRCcmVlZGVyKCRpZClcIj48L2Jsb3FoZWFkLWJyZWVkZXI+PC9kaXY+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1zbS0xMCBjb2wtbWQtNiBjb2wtbGctNFwiPjxibG9xaGVhZC1wbGF5ZXItYm94IHRpdGxlPVwiQnVpbGRpbmdzXCI+PGJsb3FoZWFkLWJ1aWxkaW5nLWxpc3Q+PC9ibG9xaGVhZC1idWlsZGluZy1saXN0PjwvYmxvcWhlYWQtcGxheWVyLWJveD48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1zbS0xMCBjb2wtbWQtNiBjb2wtbGctNFwiPjxibG9xaGVhZC1wbGF5ZXItYm94IHRpdGxlPVwiQnJlZWRlcnMgW3t7JGN0cmwuYnJlZWRlcnMubGVuZ3RofX0gLyB7eyRjdHJsLmJyZWVkZXJMaW1pdH19XVwiPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1sZy0xMlwiPjxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPjxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbm93PVwie3skY3RybC5zdGVwc1NpbmNlQnJlZWR9fVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cInt7JGN0cmwuYnJlZWRTdGVwc319fVwiIG5nLXN0eWxlPVwie3dpZHRoOiAoMTAwKigkY3RybC5zdGVwc1NpbmNlQnJlZWQvJGN0cmwuYnJlZWRTdGVwcykpICsgXFwnJVxcJ31cIj48c3BhbiBuZy1iaW5kPVwiJGN0cmwuc3RlcHNTaW5jZUJyZWVkICsgXFwnIC8gXFwnICsgJGN0cmwuYnJlZWRTdGVwc1wiPjwvc3Bhbj48aSBjbGFzcz1cImZhIGZhLWNvZ1wiIG5nLWNsYXNzPVwiJGN0cmwuaXNCcmVlZGluZyA9PSB0cnVlID8gXFwnZmEtc3BpblxcJyA6IFxcJ1xcJ1wiPjwvaT48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwicm93IGJyZWVkZXItY29udGFpbmVyXCI+PGRpdiBuZy1yZXBlYXQ9XCJicmVlZGVyaWQgaW4gJGN0cmwuYnJlZWRlcnNcIiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbGctMTJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgbmctY2xpY2s9XCIkY3RybC5yZW1vdmVCcmVlZGVyKGJyZWVkZXJpZClcIj48c3Bhbj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPjxibG9xaGVhZC1icmVlZGVyIHVuaXQ9XCIkY3RybC5wb3B1bGF0aW9uW2JyZWVkZXJpZF1cIiBhbGxvdy1hc3NpZ249XCJmYWxzZVwiPjwvYmxvcWhlYWQtYnJlZWRlcj48L2Rpdj48L2Rpdj48L2Jsb3FoZWFkLXBsYXllci1ib3g+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9icmVlZGVyVGFiLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy02XCI+PGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGJ0bi1ncm91cFwiIG5nLWNsaWNrPVwiJGN0cmwuYWRkTmV3QnJlZWRlcigpXCI+QWRkIG5ldyBCcmVlZGVyPC9idXR0b24+PGRpdiBjbGFzcz1cImRyb3Bkb3duIGJ0bi1ncm91cFwiPjxkaXYgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj5HZW5kZXI6IHt7JGN0cmwubmV3QnJlZWRlckdlbmRlcn19IDxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+PC9kaXY+PHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPjxsaT48YSBkYXRhLXRhcmdldD1cIlwiIG5nLWNsaWNrPVwiJGN0cmwubmV3QnJlZWRlckdlbmRlciA9IFxcJ01hbGVcXCdcIj5NYWxlPC9hPjwvbGk+PGxpPjxhIGRhdGEtdGFyZ2V0PVwiXCIgbmctY2xpY2s9XCIkY3RybC5uZXdCcmVlZGVyR2VuZGVyID0gXFwnRmVtYWxlXFwnXCI+RmVtYWxlPC9hPjwvbGk+PC91bD48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBjb2wtc20tNiBjb2wtbWQtNFwiIG5nLXJlcGVhdD1cInVuaXQgaW4gJGN0cmwudW5pdHNcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgbmctY2xpY2s9XCIkY3RybC5raWxsQnJlZWRlcih1bml0KVwiPjxzcGFuPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+PGdlbm9tZS1lZGl0b3IgdW5pdD1cInVuaXRcIj48L2dlbm9tZS1lZGl0b3I+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9nZW5vbWVFZGl0b3IuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJibG9xaGVhZC1jb21wb25lbnRcIj48aDQ+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemVOYW1lKCk7XCI+PGkgY2xhc3M9XCJmYSBmYS1hc3Rlcmlza1wiPjwvaT48L2J1dHRvbj4ge3skY3RybC51bml0Lm5hbWV9fSA8aSBjbGFzcz1cImZhIGZhLXN0YXJcIiBuZy1yZXBlYXQ9XCJ0cmFpdCBpbiAkY3RybC51bml0LnRyYWl0c1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIHJlbD1cInRvb2x0aXBcIiB0aXRsZT1cInt7dHJhaXQubmFtZX19XCI+PC9pPjwvaDQ+PGltZyBjbGFzcz1cImltZy1yZXNwb25zaXZlXCIgbmctc3JjPVwie3skY3RybC51bml0LnJlZEdyZWVuSW1hZ2V9fVwiIG5nLWNsaWNrPVwiJGN0cmwuZXhwYW5kbyA9ICEkY3RybC5leHBhbmRvXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgcmVsPVwidG9vbHRpcFwiIHRpdGxlPVwiQ2xpY2sgdG8gZXhwYW5kL2NvbGxhcHNlXCI+PGRpdiBuZy1zaG93PVwiJGN0cmwuZXhwYW5kb1wiIHN0eWxlPVwiaGVpZ2h0OiA0MDBweDsgb3ZlcmZsb3cteTogc2Nyb2xsOyBtYXJnaW4tdG9wOjVweFwiPjx0YWJsZSBjbGFzcz1cImdlbm9tZUVkaXRvciB0YWJsZSB0YWJsZS1jb25kZW5zZWRcIj48dGhlYWQ+PHRyPjx0aD4mbmJzcDs8L3RoPjx0aD5Eb21pbmFudDwvdGg+PHRoPlJlY2Vzc2l2ZTwvdGg+PHRoPlZhbHVlcyAoRC9SL00pPC90aD48dGg+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi13YXJuaW5nXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemVBbGwoKTtcIj48aSBjbGFzcz1cImZhIGZhLWFzdGVyaXNrXCI+PC9pPjwvYnV0dG9uPjwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHIgbmctcmVwZWF0PVwiZ2VuZSBpbiAkY3RybC5nZW5lRGVmaW5pdGlvbnNcIj48dGQgbmctYmluZD1cIiRpbmRleFwiPjwvdGQ+PHRkIG5nLWJpbmQ9XCJnZW5lLmRvbVwiPjwvdGQ+PHRkIG5nLWJpbmQ9XCJnZW5lLnJlY1wiPjwvdGQ+PHRkPjxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIG1heD1cIjI1NVwiIG5nLW1vZGVsPVwiJGN0cmwudW5pdC5nZW5lc1skaW5kZXhdWzFdXCIgbmctY2hhbmdlPVwiJGN0cmwudW5pdC51cGRhdGUoKVwiPiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBtYXg9XCIyNTVcIiBuZy1tb2RlbD1cIiRjdHJsLnVuaXQuZ2VuZXNbJGluZGV4XVswXVwiIG5nLWNoYW5nZT1cIiRjdHJsLnVuaXQudXBkYXRlKClcIj4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgbWF4PVwiMjU1XCIgbmctbW9kZWw9XCIkY3RybC51bml0LmdlbmVzWyRpbmRleF1bMl1cIiBuZy1jaGFuZ2U9XCIkY3RybC51bml0LnVwZGF0ZSgpXCI+PC90ZD48dGQ+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemUoJGluZGV4KTtcIj48aSBjbGFzcz1cImZhIGZhLWFzdGVyaXNrXCI+PC9pPjwvYnV0dG9uPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9tYXRpbmdUYWIuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPjxkaXYgY2xhc3M9XCJkcm9wZG93biBidG4tZ3JvdXBcIj48ZGl2IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+TW90aGVyOiB7eyRjdHJsLm1vdGhlci5uYW1lfX0gPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2Rpdj48dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+PGxpPjxhIGRhdGEtdGFyZ2V0PVwiXCIgbmctY2xpY2s9XCIkY3RybC5tb3RoZXIgPSB1bml0XCIgbmctcmVwZWF0PVwidW5pdCBpbiAkY3RybC51bml0cyB8IGhhc1RyYWl0OlxcJ0ZlbWFsZVxcJ1wiIG5nLWJpbmQ9XCJ1bml0Lm5hbWVcIj48L2E+PC9saT48L3VsPjwvZGl2PjxkaXYgY2xhc3M9XCJkcm9wZG93biBidG4tZ3JvdXBcIj48ZGl2IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+RmF0aGVyOiB7eyRjdHJsLmZhdGhlci5uYW1lfX0gPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2Rpdj48dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+PGxpPjxhIGRhdGEtdGFyZ2V0PVwiXCIgbmctY2xpY2s9XCIkY3RybC5mYXRoZXIgPSB1bml0XCIgbmctcmVwZWF0PVwidW5pdCBpbiAkY3RybC51bml0cyB8IGhhc1RyYWl0OlxcJ01hbGVcXCdcIiBuZy1iaW5kPVwidW5pdC5uYW1lXCI+PC9hPjwvbGk+PC91bD48L2Rpdj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBidG4tZ3JvdXBcIiBuZy1jbGljaz1cIiRjdHJsLm1hdGUoKVwiIG5nLWRpc2FibGVkPVwiISRjdHJsLmZhdGhlciB8fCAhJGN0cmwubW90aGVyXCI+TWF0ZTwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvdGVzdEludGVyZmFjZS5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+PGxpIHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzcz1cImFjdGl2ZVwiPjxhIGRhdGEtdGFyZ2V0PVwiI2JyZWVkZXJzXCIgcm9sZT1cInRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCI+QnJlZWRlcnM8L2E+PC9saT48bGkgcm9sZT1cInByZXNlbnRhdGlvblwiPjxhIGRhdGEtdGFyZ2V0PVwiI21hdGluZ1wiIHJvbGU9XCJ0YWJcIiBkYXRhLXRvZ2dsZT1cInRhYlwiPk1hdGluZzwvYT48L2xpPjwvdWw+PGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+PGRpdiByb2xlPVwidGFicGFuZWxcIiBjbGFzcz1cInRhYi1wYW5lIGFjdGl2ZVwiIGlkPVwiYnJlZWRlcnNcIj48YnJlZWRlci10YWIgdW5pdHM9XCIkY3RybC51bml0c1wiPjwvYnJlZWRlci10YWI+PC9kaXY+PGRpdiByb2xlPVwidGFicGFuZWxcIiBjbGFzcz1cInRhYi1wYW5lXCIgaWQ9XCJtYXRpbmdcIj48bWF0aW5nLXRhYiB1bml0cz1cIiRjdHJsLnVuaXRzXCI+PC9tYXRpbmctdGFiPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3Jlc291cmNlTGlzdC9yZXNvdXJjZUxpc3QuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJyZXNvdXJjZS1saXN0IGNvbC14cy0xMlwiPjxkaXYgY2xhc3M9XCJyb3dcIiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gJGN0cmwucmVzb3VyY2VzXCIgbmctaWY9XCJ2YWx1ZVsyXSA9PT0gdHJ1ZVwiIGRhdGEtYXR0cj1cInt7JGN0cmwucmVzb3VyY2VUeXBlc1trZXldLmF0dHJ9fVwiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTJcIj48aDUgdWliLXRvb2x0aXA9XCJ7eyRjdHJsLnJlc291cmNlVHlwZXNba2V5XS5kZXNjfX1cIj57eyRjdHJsLnJlc291cmNlVHlwZXNba2V5XS5uYW1lfX08L2g1PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTEwXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzLWJhclwiIHJvbGU9XCJwcm9ncmVzc2JhclwiIGFyaWEtdmFsdWVub3c9XCJ7e3ZhbHVlWzBdfX1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCJ7e3ZhbHVlWzFdfX1cIiBuZy1zdHlsZT1cInt3aWR0aDogKDEwMCoodmFsdWVbMF0vdmFsdWVbMV0pKSArIFxcJyVcXCd9XCI+PHNwYW4gbmctYmluZD1cInZhbHVlWzBdICsgXFwnIC8gXFwnICsgdmFsdWVbMV1cIj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIl19
