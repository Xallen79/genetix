function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,r,a,i=e.length,o=i?e[0].length:0,s="",l=[];t>0;t--)s+="\0";for(n=0;n<i;n++){for(r=0;r<o;r++)a=e[n][r],l.push(String.fromCharCode(a[2])+String.fromCharCode(a[1])+String.fromCharCode(a[0]));l.push(s)}return l.join("")}function n(e,t){var n,r,a,i=e.length,o=parseInt(i*t),s=i?e[0].length:0,l=parseInt(s*t),c=[];for(a=0;a<o;a++)for(c.push(n=[]),r=0;r<l;r++)n.push(e[parseInt(a/t)][parseInt(r/t)]);return c}window.generateBitmapDataURL=function(r,a){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;a=a||1,1!=a&&(r=n(r,a));var i,o=r.length,s=o?r[0].length:0,l=(4-3*s%4)%4,c=(3*s+l)*o,d=54+c;return o=e(o,4),s=e(s,4),c=e(c,4),d=e(d,4),i="BM"+d+"\0\0\0\x006\0\0\0(\0\0\0"+s+o+"\0\0\0\0\0\0"+c+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(r,l),"data:image/bmp;base64,"+btoa(i)}}(),function(e,t,n){function r(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?i=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?i=function(e){e=e.substring(1);var t=0,n=e.length,r=[];if(3==n)for(;t<n;t++)r.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)r.push(parseInt("0x"+e.substring(t,t+2)));return r}:alert("Unparseable color: "+e)}function a(e){var a=t.getElementById(e).style.backgroundColor;return""===a?[255,255,255]:(i===n&&r(a),i(a))}var i;e.generateLowResBitmap=function(n){n=n||10;for(var r,i,o,s,l,c=50,d=49,u=[];d>=0;d--)for(u.push(i=[]),r=0;r<c;r++)i.push(a(r+"_"+d));return s=t.createElement("img"),l=e.generateBitmapDataURL(u,n),s.src=l,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",o=t.getElementById("img"),null===o&&(o=t.createElement("div"),o.id="img",t.getElementById("wrap").appendChild(o)),o.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',o.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},o.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),angular.module("bloqhead.genetixApp",["ui.router","lz-string","ui.bootstrap","sprintf","ngAnimate","lvl.directives.dragdrop"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$uibTooltipProvider","$animateProvider",function(e,t,n,r,a){t.otherwise("/main");var i=[];i.push({name:"home",url:"/",component:"bloqhead.components.home"}),i.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),i.push({name:"home.achievements",url:"achievements",component:"bloqhead.components.achievementsUI"}),i.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),i.forEach(function(t){e.state(t)}),r.options({appendToBody:!0,placement:"auto top",popupCloseDelay:250,popupDelay:250})}]).run(["gameService",function(e){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.achievementsUI",{templateUrl:"components/achievements/achievements.html",controller:"bloqhead.controllers.achievementsUI",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.achievementsUI",["$rootScope","achievementSetup","resourceTypes","achievementService",function(e,t,n,r){var a=this;a.achievementService=r,a.achievementSetup=t,a.$onInit=function(){a.achievementProgress=r.getProgressSnapshot(),console.log(a.achievementProgress)},a.getAchievementClass=function(e){var t={};return t},a.getAchievementRankClass=function(e,t){var r={};if(e.res){var i=a.achievementService.state.progress.achievements[e.aid]||{};i.lastRank>=t[0]&&(r["achievement-rank-"+n[e.res].attr]=!0)}return r}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadBuildingList",{templateUrl:"components/buildingList/buildingList.html",controller:"bloqhead.controllers.buildingList"}),game.controller("bloqhead.controllers.buildingList",["$scope","buildingService","resourceService","resourceTypes",function(e,t,n,r){var a=this;a.$onInit=function(){a.buildings=[],a.resourceTypes=r,a.resourceService=n,t.SubscribeBuildingsChangedEvent(e,a.updateBuildings)},a.updateBuildings=function(e,t){a.buildings=t},a.build=function(e){t.build(e)}}]);var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],r=0;r<e.length;r++)e[r].hasTrait(t)&&n.push(e[r]);return n}}),game.factory("Breeder",["$filter","TraitInspector","geneDefinitions","jobTypes","attributes","resourceTypes",function(e,t,n,r,a,i){function o(e,t,n){var r=Math.random(),a=n/255,i=angular.copy(e);i[0]=r<=m.crossoverrate?e[0]:t[0],i[1]=r<=m.crossoverrate?t[1]:e[1],i[0]/=a,i[1]/=a;for(var o=i[2]/255,s="",l="",c=0;c<8;c++)s+=Math.random()<o?"1":"0",l+=Math.random()<o?"1":"0";i[0],i[1];i[0]^=parseInt(s,2),i[1]^=parseInt(l,2);i[0];return i[0]=Math.round(i[0]*a),i[1]=Math.round(i[1]*a),i}function s(e,t){return t?s(t,e%t):e}function l(e,t){return e*t/s(e,t)}function c(e,t,r){if(0!==e.length){for(var a={STR:[],INT:[],END:[],CHR:[],LCK:[]},i=[],o=0;o<t.length;o++){var s=n[t[o]].attr;a[s].push(e[t[o]])}var c=[a.STR.length,a.INT.length,a.END.length,a.CHR.length,a.LCK.length],p=Math.min(a.STR.length,a.INT.length,a.END.length,a.CHR.length,a.LCK.length);for(c.forEach(function(e){p=l(p,e)});p<5;)p*=2;for(var g in a)for(var m=p/a[g].length,h=0;h<a[g].length;h++)for(var v=0;v<m;v++)i.push(a[g][h]);return generateBitmapDataURL(u(d(i,r),i.length),1)}}function d(e,t){for(var n=[],r=1+t/50,a=205/t,i=0;i<e.length;i++){var o=e[i][0],s=e[i][1],l=Math.abs(o-s)*a;o>s?(o=l,o*=r,s=0):(o=0,s=l,s*=r),o>255&&(o=255),s>255&&(s=255),n.push([o,s,0])}return n}function u(e,t){for(var n=[],r=0;r<e.length/t;r++){for(var a=[],i=0;i<t;i++)a.push(e[i+r*t]);n.push(a)}return n}function p(e){var t=[],n=0;for(var r in a){var o=e[r];o<0?n-=Math.pow(10,-1*o):n+=Math.pow(10,o)}return n<0&&(n=0),t.push({resource:i.HAPPINESS.name,resourceType:"HAPPINESS",amount:n}),t}var g=function(e){this.traitInspector=new t,this.update(e)};g.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.dt=e.dt||this.dt||(new Date).getTime(),this.mother=e.mother||this.mother||null,this.father=e.father||this.father||null,this.generation=e.generation||this.generation||0,this.genes=e.genes||this.genes||[],this.breederGeneCap=e.breederGeneCap||this.breederGeneCap||25,this.genesUnlocked=e.genesUnlocked||this.genesUnlocked||[],this.currentJob=e.currentJob||this.currentJob||null,this.redGreenImage=c(this.genes,this.genesUnlocked,this.breederGeneCap),this.traits=this.traitInspector.getTraits(this.genes),this.attributes=this.traitInspector.getAttributes(this.genes),this.banishCost=p(this.attributes),this.name=this.name&&"Unknown Gender"!==this.name?this.name:e.name||this.getRandomName()},g.prototype.breed=function(e,t){for(var r=this,a=e,i=this.hasTrait("Male")?"Male":"Female",s=new g({id:t,dt:(new Date).getTime(),generation:r.generation,genes:[],genesUnlocked:r.genesUnlocked,breederGeneCap:r.breederGeneCap,mother:"Female"==i?r:a,father:"Male"==i?r:a}),l=0;l<r.genes.length;l++)if("Female"===n[l].dom)s.genes.push(randomIntFromInterval(0,1)>0?r.genes[l]:a.genes[l]);else{var c=r.genes[l],d=a.genes[l];s.genes.push(o(c,d,this.breederGeneCap))}return s.update(),s},g.prototype.getTraits=function(){return this.traits},g.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},g.prototype.getRandomName=function(){if(!this.genes||0===this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?h[randomIntFromInterval(0,h.length-1)]:v[randomIntFromInterval(0,v.length-1)],t=b[randomIntFromInterval(0,b.length-1)]+f[randomIntFromInterval(0,f.length-1)]+S[randomIntFromInterval(0,S.length-1)];return e+t},g.prototype.getAttribute=function(e){return this.attributes[e]};var m={crossoverrate:.5},h=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],v=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],b=["","","","","","Van ","Von ","O'","Mc","Mc"],f=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],S=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return g}]);var game=angular.module("bloqhead.genetixApp");game.factory("Population",["$filter","Breeder","geneDefinitions","logService",function(e,t,n,r){var a=function(e){this.update(e)};return a.prototype.update=function(e){if(e=e||{},this.geneDefinitions=n,this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.breeders=e.breeders||this.breeders||[],this.breederLimit=e.breederLimit||this.breederLimit||0,this.newbornLimit=e.newbornLimit||this.newbornLimit||0,this.maxSize=e.maxSize||this.maxSize||10,this.breederGeneCap=e.breederGeneCap||this.breederGeneCap||25,this.breederMutationChance=e.breederMutationChance||this.breederMutationChance||5,this.breederGenesUnlocked=e.breederGenesUnlocked||this.breederGenesUnlocked||[],this.initialSize=e.initialSize||this.initialSize||2,e.members){this.members=[];for(var r=0;r<e.members.length;r++){var a=e.members[r],i=new t({id:a.id,dt:a.dt,breederGeneCap:a.breederGeneCap,mother:a.mother||null,father:a.father||null,generation:a.generation,genes:a.genes,genesUnlocked:a.genesUnlocked,name:a.name,currentJob:a.currentJob});i.update(),this.members.push(i)}}else this.members=this.members||this.createInitialPopulation(this.initialSize);if(this.newborns=[],e.newborns)for(var o=0;o<e.newborns.length;o++){var s=e.newborns[o],l=new t({id:s.id,dt:s.dt,breederGeneCap:s.breederGeneCap,mother:s.mother||null,father:s.father||null,generation:s.generation,genes:s.genes,genesUnlocked:s.genesUnlocked,name:s.name,currentJob:s.currentJob});l.update(),this.newborns.push(l)}},a.prototype.getState=function(){for(var e={currentGeneration:this.currentGeneration,breeders:this.breeders,breederLimit:this.breederLimit,maxSize:this.maxSize,breederGeneCap:this.breederGeneCap,breederMutationChance:this.breederMutationChance,breederGenesUnlocked:this.breederGenesUnlocked,initialSize:this.initialSize,members:[],newborns:[]},t=0;t<this.members.length;t++){var n=this.members[t];e.members.push({id:n.id,dt:n.dt,breederGeneCap:n.breederGeneCap,generation:n.generation,genes:n.genes,genesUnlocked:n.genesUnlocked,name:n.name,currentJob:n.currentJob})}for(var r=0;r<this.newborns.length;r++){var a=this.newborns[r];e.newborns.push({id:a.id,dt:a.dt,breederGeneCap:a.breederGeneCap,generation:a.generation,genes:a.genes,genesUnlocked:a.genesUnlocked,name:a.name,currentJob:a.currentJob})}return e},a.prototype.createInitialPopulation=function(e){for(var n=this,r=[],a=0;a<e;a++){for(var i=[],o=a%2===0?255:0,s=a%2===0?0:255,l=0;l<n.geneDefinitions.length;l++)i.push([0,0,0]),n.breederGenesUnlocked.indexOf(l)!==-1&&(i[l][2]=n.breederMutationChance),"Male"===n.geneDefinitions[l].rec&&(i[l][0]=o,i[l][1]=s,i[l][2]=0);var c=new t({id:a,generation:0,genes:angular.copy(i),genesUnlocked:n.breederGenesUnlocked,breederGeneCap:n.breederGeneCap});c.update(),r.push(c)}return r},a.prototype.isBreeding=function(){if(this.members.length>=this.maxSize)return!1;if(this.newborns.length>=this.newbornLimit)return!1;for(var e=!1,t=!1,n=0;n<this.breeders.length;n++){var r=this.getById(this.breeders[n]);if(r.hasTrait("Male")?e=!0:t=!0,e&&t)break}return e&&t},a.prototype.getById=function(e){return this.members.filter(function(t){return t.id===e})[0]},a.prototype.getByGeneration=function(e){return this.members.filter(function(t){return t.generation===e})},a.prototype.breed=function(){var e=this;if(!e.isBreeding())return null;var t=e.getById(e.breeders[0]),n=e.getById(e.breeders[1]),r=t.breed(n,e.members.length);return e.newborns.push(r),r},a.prototype.processNewbornFate=function(t,n){var a,i=this.newborns.filter(function(e,n){if(e.id===t)return a=n,!0})[0],o="";switch(n){case"WORK":i.currentJob="IDLE",this.members.push(i),this.newborns.splice(a,1),o=e("fmt")("%(name)s has joined the workforce",i);break;case"BANISH":o=e("fmt")("%(name)s has been banished",i),this.newborns.splice(a,1);break;default:o=o=e("fmt")("Invalid %(fate)s",{fate:n}),console.error("Invalid fate: "+n)}r.logBreedMessage(o)},a}]);var game=angular.module("bloqhead.genetixApp");game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var r=function(e){this.update(e)};r.prototype.update=function(e){"undefined"==typeof e&&(e={})},r.prototype.getTraits=function(e){var t=[],r=s(n);if(e.length)for(var a=0;a<r.length;a++){var i=r[a],o=!0;50==e.length&&e.unshift([255,0,0]);for(var l=0;l<i.genes.length&&o===!0;l++){var c=i.genes[l],d=e[c[0]][1]-e[c[0]][0];(d<c[1]||d>c[2])&&(o=!1)}o&&t.push(i)}return t},r.prototype.getAttributes=function(e){var n={STR:0,INT:0,END:0,CHR:0,LCK:0};if(e.length){for(var r=0,a=0,i=0,o=0,s=0,l=0;l<e.length;l++){var c=t[l].attr;"STR"===c?r+=e[l][1]-e[l][0]:"INT"===c?a+=e[l][1]-e[l][0]:"END"===c?i+=e[l][1]-e[l][0]:"CHR"===c?o+=e[l][1]-e[l][0]:"LCK"===c&&(s+=e[l][1]-e[l][0])}n.STR=Math.floor(Math.sqrt((Math.abs(r)+20)/25))*(r<0?-1:1),n.INT=Math.floor(Math.sqrt((Math.abs(a)+20)/25))*(a<0?-1:1),n.END=Math.floor(Math.sqrt((Math.abs(i)+20)/25))*(i<0?-1:1),n.CHR=Math.floor(Math.sqrt((Math.abs(o)+20)/25))*(o<0?-1:1),n.LCK=Math.floor(Math.sqrt((Math.abs(s)+20)/25))*(s<0?-1:1)}return n};var a=[];traits=[];var i=function(e){return traits.filter(function(t){return e===t.name})[0]},o=function(e){if(angular.isDefined(e.requiredTraits))for(var t=0;t<e.requiredTraits.length;t++){var n=e.requiredTraits[t],r=i(n);a.indexOf(r.name)===-1&&o(r);for(var s=0;s<r.genes.length;s++)e.genes.push(r.genes[s])}a.push(e.name)},s=function(e){a=[],traits=e;for(var t=0;t<traits.length;t++){var n=traits[t];o(n)}return traits};return r}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div><button title="Save Game" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.saveGame();"><i class="fa fa-floppy-o"></i></button><button title="Hard Reset" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.resetSave();"><i class="fa fa-recycle"></i></button><button title="Play/Pause" type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["$scope","gameService","gameLoopService","gameStates",function(e,t,n,r){var a=this;a.$onInit=function(){a.currentState=n.getState().currentState},a.toggleState=function(){a.currentState=a.currentState===r.RUNNING?r.PAUSED:r.RUNNING,n.setState(a.currentState)},a.getIcon=function(){return a.currentState===r.RUNNING?"fa-pause":"fa-play"},a.resetSave=function(){t.hardReset()},a.saveGame=function(){t.saveGame()}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log"}),game.controller("bloqhead.controllers.log",["$scope","logService","logTypes",function(e,t,n){var r=this;r.$onInit=function(){r.messages=[],t.SubscribeNewMessageEvent(e,r.receiveMessages)},r.getLogClass=function(e){var t="list-group-item-",r="";switch(e){case n.GENERAL:r="color-general";break;case n.ACHIEVEMENT:r="color-achievement";break;case n.BREED:r="color-breed";break;case n.WORK:r="color-work";break;default:r=t+"none"}return r},r.receiveMessages=function(e,t){r.messages=t,$(".log-component")[0].scrollTop=$(".log-component")[0].scrollHeight}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this,r=500;n.init=function(e){e&&(n.messages=[],n.logGeneralMessage("Welcome to Genetix!"))},n.logGeneralMessage=function(a){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:a}),n.messages.length>r&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(a){n.messages.push({type:t.BREED,timestamp:Date.now(),message:a}),n.messages.length>r&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(a){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:a}),n.messages.length>r&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logWorkMessage=function(a){n.messages.push({type:t.WORK,timestamp:Date.now(),message:a}),n.messages.length>r&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,r){var a=e.$on("newMessageEvent",r.bind(this));t.$on("$destroy",a),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.home",{templateUrl:"components/home.html",controller:"bloqhead.controllers.home"}),game.controller("bloqhead.controllers.home",function(){this.$onInit=function(){}}),game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","populationService","achievementService","resourceService","workerService",function(e,t,n,r,a){var i=this;i.$onInit=function(){i.breeders=[],i.population=[],i.maxPopulation=0,i.maxBreeders=0,t.SubscribePopulationUpdateEvent(e,i.updatePopulation),t.SubscribeBreederUpdateEvent(e,i.updateBreeders),n.SubscribeNewRewardEvent(e,i.rewardEarned)},i.rewardEarned=function(e,t){console.log(t)},i.updateGene=function(e,n,r){t.updateMember(e,n,r)},i.assign=function(e,t){angular.isDefined(t)?a.addWorker(t,e):i.addBreeder(e)},i.dropped=function(e,t,n){if("breeder-target"===t){var r=angular.element(document.getElementById(e));this.addBreeder(r.data("breederid"))}},i.addBreeder=function(e){t.addBreeder(e)},i.removeBreeder=function(e){t.removeBreeder(e)},i.updateBreeders=function(e,t){i.breeders=t.breeders,i.isBreeding=t.isBreeding,i.stepsSinceBreed=t.stepsSinceBreed,i.breedSteps=t.breedSteps},i.updatePopulation=function(e,t){i.population=t.population,i.newborns=t.newborns,i.maxPopulation=t.maxSize,i.breederLimit=t.breederLimit,i.newbornLimit=t.newbornLimit},i.decideFate=function(e,n){t.processNewbornFate(e,n)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadMortal",{templateUrl:"components/mortal/mortal.html",controller:"bloqheader.controllers.mortal",bindings:{unit:"<",canBreed:"<",assign:"&",mode:"@",display:"@"}}),game.controller("bloqheader.controllers.mortal",["$uibModal","jobTypes","bloqheadGetGeneProgressStyle","geneDefinitions","attributes","resourceTypes","resourceService",function(e,t,n,r,a,i,o){var s=this;s.$onInit=function(){s.display=s.display||"TILE",s.jobTypes=t,s.geneDefinitions=r,s.attributes=a,s.resourceTypes=i,s.resourceService=o},s.canBanish=function(){for(var e in s.unit.banishCost){var t=s.unit.banishCost[e];if(o.getResource(t.resourceType)<t.amount)return!1}return!0},s.assignMe=function(e){var t=!0;if("BANISH"===e){var n=[];for(var r in s.unit.banishCost){var a=s.unit.banishCost[r];if(o.changeResource(a.resourceType,-1*a.amount)===-1){t=!1;for(var i=0;i<n.length;i++)o.changeResource(n.type,n.amount);break}n.push({type:a.resourceType,amount:a.amount})}}t&&s.assign({$id:s.unit.id,$type:e})},s.getGeneTraitRangeStyle=function(e,t){return n.traitRange(e,t)},s.getGeneRangeStyle=function(e){return n.range(e[0],e[1])},s.getGeneValueStyle=function(e){return n.value(e[1]-e[0])},s.imageHover=function(e){var t=[];for(var n in s.attributes)t.push(n);var r=e.target.clientWidth,a=e.offsetX,i=r/5,o=Math.floor(a/i);o=Math.min(t.length-1,o),s.hoverAttr=t[o]},s.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return s.unit}}})}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:{boxTitleHtml:"?bloqheadPlayerBoxTitle"},require:{mainCtrl:"^bloqhead.components.home"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{boxTitle:"@",footer:"@",maxHeight:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit},e.maxHeightOveride=function(){var t={};return"undefined"!=typeof e.maxHeight&&(t.maxHeight=e.maxHeight),t}}),game.component("bloqheadPlayerBoxTitle",{require:{playerBoxCtrl:"^bloqheadPlayerBox"}});var game=angular.module("bloqhead.genetixApp");game.filter("applyPopulationFilter",function(){return function(e,t){var n=[],r=[];"string"==typeof t&&(t=JSON.parse(t));for(var a=0;a<e.length;a++){var i=!0;if(t&&t.traits)for(var o=0;o<t.traits.length;o++){var s=t.traits[o],l=!0;if("-"==s[0]&&(s=s.slice(1),l=!1),l!==e[a].hasTrait(s)){i=!1;break}}i&&n.push(e[a]),i||r.push(e[a])}return n}}),game.service("bloqheadGetGeneProgressStyle",["geneDefinitions",function(e){function t(e,t,n,r,a){return(e-t)*(a-r)/(n-t)+r}return{range:function(e,n){var r={},a=t(-1*e,-255,255,0,100),i=t(n,-255,255,0,100);return r.marginLeft=a+"%",r.width=i-a+"%",r},traitRange:function(n,r){var a={};if(null!==r)for(var i=e.indexOf(n),o=0;o<r.genes.length;o++){var s=r.genes[o];if(s[0]==i){var l=t(s[1],-255,255,0,100),c=t(s[2],-255,255,0,100);a.marginLeft=l+"%",a.width=c-l+"%"}}return a},value:function(e){var n=t(e,-255,255,0,100);n>98&&(n=98),n<2&&(n=2);var r={position:"absolute",marginLeft:n-2+"%",top:"0px",bottom:"0px",width:"4%",backgroundColor:"white",border:"1px solid black"};return r}}}]),game.component("bloqheadPopulationList",{templateUrl:"components/populationList/populationList.html",controller:"bloqhead.controllers.populationList",bindings:{canBreed:"<",breederAssign:"&",population:"<",maxPopulation:"="}}),game.controller("bloqhead.controllers.populationList",["$uibModal","resourceService","resourceTypes","jobTypes",function(e,t,n,r){var a=this;a.jobTypes=r,a.criteria=[],a.$onInit=function(){},a.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})},a.getCustomFilter=function(){for(var e=[],t=0;t<a.criteria.length;t++){var n=a.criteria[t];"trait"==n.type&&e.push(n.val.name)}return JSON.stringify({traits:e})},a.deleteCriteria=function(e){a.criteria.splice(e,1)},a.openTraitSelector=function(t){var n=e.open({animation:!0,component:"bloqheadTraitSelector",size:"lg",resolve:{unit:function(){return t}}});n.result.then(function(e){a.criteria.push({type:"trait",val:e})},function(){})},a.showDetails=function(t){e.open({component:"genomeEditor",resolve:{unit:function(){return t}}})}}]),game.component("bloqheadPopulationPanel",{require:{parent:"^bloqheadPopulationList"},templateUrl:"components/populationList/populationPanel.html",controller:"bloqhead.controllers.populationPanel",bindings:{population:"<",filter:"<",orderBy:"<"}}),game.controller("bloqhead.controllers.populationPanel",["bloqheadGetGeneProgressStyle","geneDefinitions","resourceTypes","resourceService","attributes",function(e,t,n,r,a){var i=this;i.geneDefinitions=t,i.attributes=a,i.resourceTypes=n,i.$onInit=function(){i.orderBy=i.orderBy||"-dt"},i.getGeneTraitRangeStyle=function(t,n){return e.traitRange(t,n)},i.getGeneRangeStyle=function(t){return e.range(t[0],t[1])},i.getGeneValueStyle=function(t){return e.value(t[1]-t[0])},i.getWorkerIcon=function(e){return r.getWorkerIcon(e)},i.imageHover=function(e){var t=[];for(var n in i.attributes)t.push(n);var r=e.target.clientWidth,a=e.offsetX,o=r/5,s=Math.floor(a/o);s=Math.min(t.length-1,s),i.hoverAttr=t[s]}}]),game.component("bloqheadTraitSelector",{templateUrl:"components/populationList/traitSelector.html",controller:"bloqhead.controllers.traitSelector",bindings:{resolve:"<",close:"&",dismiss:"&"}}),game.controller("bloqhead.controllers.traitSelector",["traitDefinitions","geneDefinitions","bloqheadGetGeneProgressStyle",function(e,t,n){var r=this;r.trait=null,r.traitDefinitions=e,r.geneDefinitions=t,r.traitEnter=function(e){r.trait=e},r.traitLeave=function(e){r.trait=null},r.$onInit=function(){r.unit=r.resolve.unit},r.select=function(e){r.close({$value:e})},r.ok=function(){r.close({$value:r.trait})},r.cancel=function(){r.dismiss({$value:"cancel"})},r.getGeneRangeStyle=function(e){return n.traitRange(e,r.trait)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadResourceList",{templateUrl:"components/resourceList/resourceList.html",controller:"bloqhead.controllers.resourceList"}),game.controller("bloqhead.controllers.resourceList",["$scope","resourceService","resourceTypes","workerService","jobTypes",function(e,t,n,r,a){var i=this;i.resourceTypes=n,i.jobTypes=a,i.resources={},i.getWorkerIcon=function(e){return t.getWorkerIcon(e)},i.$onInit=function(){t.SubscribeResourceChangedEvent(e,i.resourceChanged),t.SubscribeResourceLimitChangedEvent(e,i.resourceLimitChanged),t.SubscribeResourceEnabledEvent(e,i.resourceEnabled),i.resources=t.getResourcesSnapshot(),i.workers=[],r.SubscribeWorkersChangedEvent(e,i.updateWorkers)},i.updateWorkers=function(e,t){i.workers=t},i.getUnlockedResources=function(){var e={};for(var t in i.resources)i.resources.hasOwnProperty(t)&&i.resources[t][2]===!0&&(e[t]=i.resources[t]);return e},i.getWorkerCount=function(e){for(var t=0,n=0;n<i.workers.length;n++)e===i.workers[n].resource&&(t+=i.workers[n].count);return t},i.dropped=function(e,t,a,i){var o=n[i].jids[0],s=angular.element(document.getElementById(e)).data("breederid");r.addWorker(o,s)},i.resourceChanged=function(e,t,n){i.resources[t]||(i.resources[t]=[]),i.resources[t][0]=n},i.resourceLimitChanged=function(e,t,n){i.resources[t]||(i.resources[t]=[]),i.resources[t][1]=n},i.resourceEnabled=function(e,t,n){i.resources[t][2]=n}}]);var game=angular.module("bloqhead.genetixApp");game.service("achievementService",["$rootScope","$filter","achievementSetup","logService","geneDefinitions","resourceTypes","defaultBuildings",function(e,t,n,r,a,i,o){var s=this;s.init=function(e){s.state=e||{},s.achievementSetup=n||{},s.state.hasOwnProperty("progress")||(s.state={progress:{achievements:{},perks:[]}})},s.getState=function(){return s.state},s.getProgressSnapshot=function(){return angular.copy(s.state.progress)},s.updateProgress=function(t,n){var a=s.state.progress.achievements[t],i=s.achievementSetup.achievements[t];a||(a={aid:t,amount:0,lastRank:0,nextRank:s.getNextRankAmount(t,0)},s.state.progress.achievements[t]=a);var o=a.amount,l=o;if((i.cumulative||!1)===!0?n>o&&(l=n):n>0&&(l=a.amount+n),a.amount=l,o!=l)for(var c=0;c<i.ranks.length;c++){var d=i.ranks[c][0];if(d>a.lastRank&&d>o&&d<=l){var u=s.getAchievementMessage(i.aid,d);r.logAchievementMessage(u),a.lastRank=d,a.nextRank=s.getNextRankAmount(t,a.amount);for(var p={achievement:i,amountRequired:d,msg:u,perks:[]},g=0;g<i.ranks[c][1].length;g++){var m=s.applyPerk(i.ranks[c][1][g]);null!==m&&p.perks.push(m)}e.$emit("newRewardEvent",p)}}},s.applyPerk=function(e){var a=e[0],i=n.perks[a];if(i.once){var o=t("filter")(s.state.progress.perks,{pid:a});if(0!==o.length)return null}var l=s.getPerkMessage(e,i);r.logAchievementMessage(l);var c={pid:a,msg:l,arr:e,dt:(new Date).toUTCString()};return s.state.progress.perks.push(c),c},s.getNextRankAmount=function(e,t){var r=n.achievements[e].ranks,a=s.state.progress.achievements[e];if(!a&&r.length>0)return r[0][0];for(var i=0;i<r.length;i++)if(r[i][0]>a.amount)return r[i][0];return-1},s.getAchievementMessage=function(e,r,a){var i=n.achievements[e],o=i[a]||i.logmsg||i.desc||i.name||"Unknown",s={name:i.name,req:r};return s.name=t("fmt")(s.name,s),t("fmt")(o,s)},s.getPerkMessage=function(e,r){var s=e[0],l=n.perks[s],c=l[r]||l.logmsg||l.desc||l.name||"Unknown",d={name:l.name};switch(l.pid.substring(0,4)){case"P_G_":var u=a[e[1]];d.dom=u.dom,d.rec=u.rec,d.attr=u.attr,d.amt=e[2];break;case"P_R_":d.res=i[e[1]].name,d.amt=e[2]||0;break;case"P_B_":d.buildingType=o[e[1]].name,d.amt=e[2]||0,d.plural=d.amt>1?"s":"";break;default:for(var p=1;p<e.length;p++)d[p]=e[p]}return d.name=t("fmt")(d.name,d),t("fmt")(c,d)},s.SubscribeNewRewardEvent=function(t,n){var r=e.$on("newRewardEvent",n.bind(this));t.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.service("buildingService",["$rootScope","$filter","defaultBuildings","resourceTypes","resourceService","populationService","achievementService",function(e,t,n,r,a,i,o){var s,l,c=this,d=!1;c.init=function(t){t.buildings=angular.merge({},n,t.buildings),s=angular.merge({},s,t),c.update("all"),a.SubscribeResourceChangedEvent(e,h),d||o.SubscribeNewRewardEvent(e,c.rewardEarned),d=!0},c.getState=function(){var e={buildings:{}};for(var t in s.buildings)if(s.buildings.hasOwnProperty(t)){var n=s.buildings[t];e.buildings[t]={purchased:n.purchased,gifted:n.gifted,unlocked:n.unlocked,multiplier:n.multiplier}}return e},c.getBuildingSnapshot=function(){var t=[];for(var n in s.buildings)if(s.buildings.hasOwnProperty(n)){var r=s.buildings[n];if(r.unlocked){var a=g(r),i=p(r);t.push({type:n,name:r.name,description:u(r,{size:i}),size:i,owned:r.purchased+r.gifted,costToBuild:a,canBuild:m(r,a)})}}return angular.equals(l,t)||e.$emit("buildingsChangedEvent",angular.copy(t)),l=t,angular.copy(t)},c.update=function(e){angular.isDefined(e)&&"all"!==e?"storage"===e?c.updateStorage():"housing"===e?c.updateHousing():"breeding"===e?c.updateBreeders():"newborn"===e?c.updateNursery():"production"===e&&angular.noop():(c.updateStorage(),c.updateBreeders(),c.updateHousing(),c.updateNursery()),c.getBuildingSnapshot()},c.updateBreeders=function(){var e=0,t=s.breedingSizeMultiplier||1;for(var n in s.buildings)if(s.buildings.hasOwnProperty(n)){var r=s.buildings[n];"breeding"===r.use&&(e+=Math.floor(r.size*(r.purchased+r.gifted)*r.multiplier))}e*=t,i.setBreederLimit(Math.floor(e))},c.updateNursery=function(){var e=0,t=s.newbornSizeMultiplier||1;for(var n in s.buildings)if(s.buildings.hasOwnProperty(n)){var r=s.buildings[n];"newborn"===r.use&&(e+=Math.floor(r.size*(r.purchased+r.gifted)*r.multiplier))}e*=t,i.setNurseryLimit(Math.floor(e))},c.updateStorage=function(){var e=s.storageSizeMultiplier||1,t=a.getResourcesSnapshot(),n=[];for(var r in s.buildings)if(s.buildings.hasOwnProperty(r)){var i=s.buildings[r];"storage"===i.use&&(n.push(i.stores),t[i.stores].newAmount=t[i.stores].newAmount||0,t[i.stores].newAmount+=Math.floor(i.size*(i.purchased+i.gifted)*i.multiplier))}n.filter(function(n){t[n].newAmount=Math.floor(t[n].newAmount*e),t[n][1]!=t[n].newAmount&&a.setResourceLimit(n,t[n].newAmount)})},c.updateHousing=function(){var e=s.housingSizeMultiplier||1,t=0;for(var n in s.buildings)if(s.buildings.hasOwnProperty(n)){var r=s.buildings[n];"housing"===r.use&&(t+=Math.floor(r.size*(r.gifted+r.purchased)*r.multiplier))}i.setPopulationLimit(Math.floor(t*e))},c.build=function(e){var t=!0,n=[],r=s.buildings[e],i=g(r);if(m(r,i))for(var l=0;l<i.length;l++){var d=a.changeResource(i[l].resourceType,-1*i[l].amount);if(d===-1){t=!1;break}n.push({resource:i[l].resourceType,amount:i[l].amount})}if(t)s.buildings[e].purchased++,c.update(r.use),o.updateProgress("A_"+e+"_B",1);else for(var u=0;u<n.length;u++)a.changeResource(n[u].resourceType,i[u].amount)},c.rewardEarned=function(e,t){for(var n=0;n<t.perks.length;n++){var r=t.perks[n],a=s.buildings[r.arr[1]];"P_B_BONUS"===r.pid&&(a.gifted+=r.arr[2],c.update(a.use)),"P_B_UNLOCK"===r.pid&&(a.unlocked=1,c.update(a.use)),"P_B_MULTIPLIER"===r.pid&&(a.multiplier+=r.arr[2]/100,c.update(a.use))}},c.SubscribeBuildingsChangedEvent=function(t,n){var r=e.$on("buildingsChangedEvent",n.bind(this));t&&t.$on("$destroy",r),e.$emit("buildingsChangedEvent",c.getBuildingSnapshot())};var u=function(e,n){var r=e.description;return r=t("fmt")(r,n)},p=function(e){var t=e.size*(e.multiplier||1);return"breeding"===e.use&&(t*=s.breedingSizeMultiplier||1),"storage"===e.use&&(t*=s.storageSizeMultiplier||1),"housing"===e.use&&(t*=s.housingSizeMultiplier||1),
t},g=function(e){for(var t=[],n=0;n<e.baseCost.length;n++){var a=e.baseCost[n],i=Math.floor(a.amount*Math.pow(a.costMultiplier,e.purchased));t.push({resource:r[a.resource].name,resourceType:a.resource,amount:i})}return t},m=function(e,t){angular.isDefined(t)||(t=g(e));for(var n=a.getResourcesSnapshot(),r=0;r<t.length;r++){var i=n[t[r].resourceType];if(!angular.isDefined(i)||i[0]<t[r].amount)return!1}return!0},h=function(e,t,n){c.getBuildingSnapshot()}}]);var game=angular.module("bloqhead.genetixApp");game.service("gameLoopService",["$window","$rootScope","gameStates","logService",function(e,t,n,r){var a=this;a.initialized=!1,a.init=function(e){e=e||{},a.saveTime=e.saveTime||Date.now(),a.stepTimeMs=e.stepTimeMs||a.stepTimeMs||1e3,a.lastTime=a.saveTime-Date.now(),a.currentState=e.currentState||a.currentState||n.RUNNING,a.initialized||(a.initialized=!0,a.gameLoop(0))},a.getState=function(){return{stepTimeMs:a.stepTimeMs,currentState:a.currentState,saveTime:a.saveTime}},a.setState=function(e){a.currentState=e,e===n.PAUSED?r.logGeneralMessage("Game paused."):r.logGeneralMessage("Game resumed.")},a.gameLoop=function(r){var a=this;a.saveTime=Date.now();for(var i=0;r-a.lastTime>=a.stepTimeMs*(i+1);)i++;a.lastTime+=a.stepTimeMs*i,a.currentState==n.RUNNING&&i>0&&t.$apply(t.$emit("gameLoopEvent",i)),e.requestAnimationFrame(this.gameLoop.bind(this))},a.SubscribeGameLoopEvent=function(e,n){var r=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",r)}}]),game.service("gameService",["$rootScope","gameSaveKey","defaultState","logService","gameLoopService","populationService","achievementService","resourceService","buildingService","LZString","traitDefinitions","workerService",function(e,t,n,r,a,i,o,s,l,c,d,u){function p(e,t){g.stepsSinceSave+=t;s.getResource("DIRT");g.stepsSinceSave>=g.autoSaveSteps&&(g.saveGame(!0),g.stepsSinceSave=0)}var g=this,m=!1;g.init=function(r){var i=c.decompressFromBase64(localStorage.getItem(t)),o=i?angular.fromJson(i):void 0;g.gameState=r||o||n,g.autoSaveSteps=g.gameState.autoSaveSteps||g.autoSaveSteps||10,g.startGame(),g.stepsSinceSave=0,m||(a.SubscribeGameLoopEvent(e,p),m=!0)},g.startGame=function(){r.init(g.gameState.clearLog),i.init(angular.merge({},n.populationServiceState,g.gameState.populationServiceState)),s.init(angular.merge({},n.resourceServiceState,g.gameState.resourceServiceState)),o.init(angular.merge({},n.achievementServiceState,g.gameState.achievementServiceState)),l.init(angular.merge({},n.buildingServiceState,g.gameState.buildingServiceState)),u.init(angular.merge({},n.workerServiceState,g.gameState.workerServiceState)),a.init(angular.merge({},n.gameLoopServiceState,g.gameState.gameLoopServiceState))},g.hardReset=function(){localStorage.removeItem(t),g.init()},g.saveGame=function(e){var n=angular.copy(g.gameState);n.populationServiceState=angular.copy(i.getState()),n.resourceServiceState=angular.copy(s.getState()),n.achievementServiceState=angular.copy(o.getState()),n.buildingServiceState=angular.copy(l.getState()),n.gameLoopServiceState=angular.copy(a.getState()),n.workerServiceState=angular.copy(u.getState());var d=c.compressToBase64(angular.toJson(angular.copy(n)));localStorage.setItem(t,d),e?r.logGeneralMessage("Game autosaved."):r.logGeneralMessage("Game saved.")}}]);var game=angular.module("bloqhead.genetixApp");game.service("populationService",["$rootScope","$filter","gameLoopService","Population","logService","achievementService",function(e,t,n,r,a,i){var o=this;o.init=function(e){e=e||{},o.breedSteps=e.breedSteps||o.breedSteps||6,o.stepsSinceBreed=angular.isDefined(e.stepsSinceBreed)?e.stepsSinceBreed:o.stepsSinceBreed||0,o.populationState=e.populationState||o.populationState,o.population=o.populationState?new r(o.populationState):o.population||new r,o.logService=a,o.sendBreederUpdateEvent(),o.sendPopulationUpdateEvent()},o.getState=function(){var e={breedSteps:o.breedSteps,stepsSinceBreed:o.stepsSinceBreed};return e.populationState=o.population.getState(),e},o.handleGameLoop=function(e,t){var n=!1;if("gameLoopEvent"!==e.name)return void console.error("populateService.handleGameLoop - Invalid event: "+e);if(o.population.isBreeding()){for(o.stepsSinceBreed+=t;o.stepsSinceBreed>=o.breedSteps;){o.stepsSinceBreed-=o.breedSteps;var r=o.population.breed();null!==r&&(a.logBreedMessage("New offspring! "+r.name),i.updateProgress("A_BIRTHS",1),n=!0)}o.sendBreederUpdateEvent(),n&&o.sendPopulationUpdateEvent()}},o.addBreeder=function(e){if(o.population.breeders.indexOf(e)===-1){var t=o.population.getById(e).hasTrait("Male")?"Male":"Female",n={};if(o.population.breeders.length<o.population.breederLimit)o.population.breeders.length>0&&(n=o.population.getById(o.population.breeders[0]),n.hasTrait(t)&&o.removeBreeder(n.id)),o.population.breeders.push(e),o.logService.logBreedMessage("Breeder added: "+o.population.getById(e).name),o.sendBreederUpdateEvent();else for(var r=0;r<o.population.breeders.length;r++)if(n=o.population.getById(o.population.breeders[r]),n.hasTrait(t)){o.removeBreeder(n.id),o.addBreeder(e);break}}},o.removeBreeder=function(e){var t=o.population.breeders.indexOf(e);t!==-1&&(o.population.breeders.splice(t,1),o.population.isBreeding()||(o.stepsSinceBreed=0),o.sendBreederUpdateEvent(),o.logService.logBreedMessage("Breeder removed: "+o.population.getById(e).name))},o.updateMember=function(e,t,n){var r=o.population.getById(e);r.genes[t]=n,r.update(),o.sendPopulationUpdateEvent()},o.setUnitJob=function(e,n,r){var a=o.population.getById(e);a.currentJob=n;var i=t("fmt")("%(name)s is now a %(job)s",{name:a.name,job:r});o.logService.logWorkMessage(i),o.sendPopulationUpdateEvent()},o.setBreederLimit=function(e){o.population.breederLimit=e,o.sendPopulationUpdateEvent()},o.setNurseryLimit=function(e){o.population.newbornLimit=e,o.sendPopulationUpdateEvent()},o.setPopulationLimit=function(e){o.population.maxSize=e,o.sendPopulationUpdateEvent()},o.processNewbornFate=function(e,t){o.population.processNewbornFate(e,t),o.sendPopulationUpdateEvent()},o.sendBreederUpdateEvent=function(){e.$emit("breederUpdateEvent",{breeders:o.population.breeders,isBreeding:o.population.isBreeding(),stepsSinceBreed:o.stepsSinceBreed,breedSteps:o.breedSteps})},o.sendPopulationUpdateEvent=function(){e.$emit("populationUpdateEvent",{population:o.population.members,newborns:o.population.newborns,maxSize:o.population.maxSize,breederLimit:o.population.breederLimit,newbornLimit:o.population.newbornLimit})},o.SubscribeBreederUpdateEvent=function(t,n){var r=e.$on("breederUpdateEvent",n);t.$on("$destroy",r),o.sendBreederUpdateEvent()},o.SubscribePopulationUpdateEvent=function(t,n){var r=e.$on("populationUpdateEvent",n.bind(this));t.$on("$destroy",r),o.sendPopulationUpdateEvent()},n.SubscribeGameLoopEvent(e,o.handleGameLoop)}]);var game=angular.module("bloqhead.genetixApp");game.service("resourceService",["$rootScope","$filter","logService","geneDefinitions","resourceTypes","achievementService",function(e,t,n,r,a,i){var o=this,s=!1;o.init=function(t){null!==t&&(o.state=t),s||i.SubscribeNewRewardEvent(e,o.rewardEarned),s=!0;var n=!1,r={DIRT:[0,0,!0,1],BRICKS:[0,0,n,1],WATER:[0,0,n,1],WOOD:[0,0,n,1],GOLD:[0,0,n,1],HAPPINESS:[0,-1,!0,1],SCIENCE:[0,-1,n,1],STEEL:[0,0,n,1],EVOCOIN:[0,-1,n,1]};for(var l in a)if(a.hasOwnProperty(l)){var c=o.state.resources[l];"undefined"==typeof c&&(c=r[l]||[0,911,n,1],o.state.resources[l]=c),e.$emit("resourceChangedEvent",l,c[0]),e.$emit("resourceLimitChangedEvent",l,c[1]),e.$emit("resourceEnabledEvent",l,c[2])}},o.getState=function(){return o.state},o.getWorkerIcon=function(e){var t={};return t["fa-truck"]="DIRT"===e,t["fa-tint"]="WATER"===e,t["fa-tree"]="WOOD"===e,t["fa-flask"]="SCIENCE"===e,t["icon-happy"]="HAPPINESS"===e,t},o.rewardEarned=function(t,n){for(var r=0;r<n.perks.length;r++){var a=n.perks[r];"P_R_BONUS"===a.pid&&o.changeResource(a.arr[1],a.arr[2]),"P_R_UNLOCK"===a.pid&&(o.state.resources[a.arr[1]][2]=!0,e.$emit("resourceEnabledEvent",a.arr[1],!0)),"P_R_MULTIPLIER"===a.pid&&o.addResourceMultiplier(a.arr[1],a.arr[2])}},o.getResourcesSnapshot=function(){return angular.copy(o.state.resources)},o.getResource=function(e){return o.state.resources[e][0]},o.changeResource=function(t,n){var r=o.state.resources[t];if(r[2]===!1&&r[1]!==-1)return void console.error(t+" is not enabled, cannot increase amount.");r[0]+=n;var a=n;return r[1]!=-1&&r[0]>r[1]&&(a=n-(r[0]-r[1]),r[0]=r[1]),r[0]<0?(r[0]-=n,-1):(a>0&&i.updateProgress("A_"+t+"_E",a),e.$emit("resourceChangedEvent",t,r[0],o.getResourcesSnapshot()),r[0])},o.setResourceLimit=function(t,n){var r=o.state.resources[t];return r[1]===-1?void console.error("Cannot set resource limit on: "+t):(r[1]=n,r[2]===!1&&n>0&&(r[2]=!0,e.$emit("resourceEnabledEvent",t,!0)),void e.$emit("resourceLimitChangedEvent",t,r[1]))},o.addResourceMultiplier=function(e,t){o.state.resources[e][3]+=t/100},o.SubscribeResourceChangedEvent=function(t,n){var r=e.$on("resourceChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceLimitChangedEvent=function(t,n){var r=e.$on("resourceLimitChangedEvent",n.bind(this));t&&t.$on("$destroy",r)},o.SubscribeResourceEnabledEvent=function(t,n){var r=e.$on("resourceEnabledEvent",n.bind(this));t&&t.$on("$destroy",r)}}]);var game=angular.module("bloqhead.genetixApp");game.service("workerService",["$rootScope","$filter","jobTypes","resourceTypes","resourceService","populationService","achievementService","gameLoopService","logService",function(e,t,n,r,a,i,o,s,l){function c(e,o){for(var s=a.getResourcesSnapshot(),l=0;l<d.workers.length;l++){var c=d.workers[l],u=i.population.getById(c.unitid),p=n[c.jid],g=0;for(c.stepsSinceWork+=o;c.stepsSinceWork>=p.baseWorkerSteps;)g++,c.stepsSinceWork-=p.baseWorkerSteps;if(s[p.resource].gatherAmount=s[p.resource].gatherAmount||0,g>0&&(s[p.resource][0]+s[p.resource].gatherAmount<s[p.resource][1]||s[p.resource][1]===-1)){var m=u.getAttribute(r[p.resource].attr);gatherAmount=Math.round(p.baseAmount*g*s[p.resource][3]*Math.pow(10,m)),s[p.resource].gatherAmount+=gatherAmount;t("fmt")("%(name)s produced %(amt)d %(res)s.",{name:u.name,amt:gatherAmount,res:r[p.resource].name})}}for(var h in s)s.hasOwnProperty(h)&&s[h].gatherAmount&&a.changeResource(h,s[h].gatherAmount)}var d,u,p=this,g=!1;p.init=function(t){d=t||d||{},g||(s.SubscribeGameLoopEvent(e,c),g=!0),p.getWorkersSnapshot()},p.getState=function(){return d},p.addWorker=function(e,r){var a=0===t("filter")(d.workers,{unitid:r}).length,o=[];a||(o=d.workers.filter(function(t){return t.unitid!==r||t.unitid===r&&t.jobType===e})),(a||o.length!=d.workers.length)&&(a||(d.workers=angular.copy(o)),d.workers.push({jid:e,unitid:r,stepsSinceWork:0}),i.setUnitJob(r,e,n[e].name),p.getWorkersSnapshot())},p.getWorkersSnapshot=function(){var r=[];for(var a in n)if(n.hasOwnProperty(a)){var i=t("filter")(d.workers,{jid:a}),o=n[a];r.push({jid:o.jid,resource:o.resource,name:o.name,description:o.description,count:i.length})}return angular.equals(u,r)||e.$emit("workersChangedEvent",angular.copy(r)),u=r,angular.copy(r)},p.SubscribeWorkersChangedEvent=function(t,n){var r=e.$on("workersChangedEvent",n.bind(this));t&&t.$on("$destroy",r),e.$emit("workersChangedEvent",p.getWorkersSnapshot())}}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"<"},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){var r=this;r.lastBreederID=0,r.newBreederGender="Male",r.killBreeder=function(e){r.units.splice(r.units.indexOf(e),1)},r.addNewBreeder=function(){for(var n=[],a=0;a<t.length;a++)n.push([0,0,0]);var i="Male"==r.newBreederGender?255:0;n[42]=[i,255-i,0];var o=new e({id:r.lastBreederID++,generation:0,scale:6,genes:n});o.update(),r.units.unshift(o)}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("configurationTab",{bindings:{},controller:["Breeder","geneDefinitions","traitDefinitions","resourceTypes","jobTypes","defaultBuildings",function(e,t,n,r,a,i){var o=this;o.$onInit=function(){o.snapshot={geneDefinitions:angular.copy(t),traitDefinitions:angular.copy(n),resourceTypes:angular.copy(r),jobTypes:angular.copy(a),defaultBuildings:angular.copy(i)}}}],templateUrl:"components/testInterface/configurationTab.html"}),app.component("genomeEditor",{bindings:{u:"=",resolve:"<"},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e,t.expando=!0,t.unit=t.u||t.resolve.unit||{}},t.randomizeName=function(){t.unit.name=t.unit.getRandomName()},t.randomize=function(e){t.unit.genes[e]=[randomIntFromInterval(0,255),randomIntFromInterval(0,255),randomIntFromInterval(0,255)]},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0===randomIntFromInterval(0,1)?255:0;t.unit.genes[42]=[n,255-n,0],t.unit.update()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,r,a,i){var o=this;o.$onInit=function(){o.geneDefinitions=a,o.traitDefinitions=i,o.units=[]}}]),app.component("fontTab",{templateUrl:"components/testInterface/fontTab.html",controller:"bloqhead.controllers.testInterface"});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadWorkerList",{templateUrl:"components/workerList/workerList.html",controller:"bloqhead.controllers.workerList"}),game.controller("bloqhead.controllers.workerList",["$scope","workerService",function(e,t){var n=this;n.$onInit=function(){n.workers=[],t.SubscribeWorkersChangedEvent(e,n.updateWorkers)},n.updateWorkers=function(e,t){n.workers=t}}]),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<div ng-init="$ctrl.hideme=false"><div class="nopadding col-xs-3" ng-class="$ctrl.hideme ? \'home-hide\' : \'\'"><div class="row topRow"><div class="col-xs-12 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-list"></i> Log</bloqhead-player-box-title><bloqhead-log></bloqhead-log></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-th"></i> Resources</bloqhead-player-box-title><div class="row"><bloqhead-resource-list></bloqhead-resource-list></div></bloqhead-player-box></div></div></div><div class="col-xs-9 fullH nopadding" ng-class="$ctrl.hideme ? \'home-hide\' : \'\'"><div ui-view="" class="animate-view"></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/achievements/achievements.html",'<div class="col-xs-12"><bloqhead-player-box box-title="Achievements"><div class="achievement-container"><div class="row" ng-repeat="ag in $ctrl.achievementSetup.achievementGroups"><div class="col-xs-12"><h6 ng-bind="ag.name"></h6><div class="row achievement-list" ng-repeat="aid in ag.aids"><div class="col-xs-12 col-md-2 col-sm-1"><div class="achievement-cell" ng-class="$ctrl.getAchievementClass($ctrl.achievementSetup.achievements[aid])" uib-tooltip-template="\'achievementTooltip.html\'" tooltip-class="achievement-tooltip"><p ng-bind="$ctrl.achievementSetup.achievements[aid].name"></div></div><div class="col-xs-12 col-md-10 col-sm-11"><div class="row achievement-rank-row"><div class="col-xs-6 col-sm-3 col-lg-1" ng-repeat="ar in $ctrl.achievementSetup.achievements[aid].ranks"><div class="achievement-rank-cell" ng-class="$ctrl.getAchievementRankClass($ctrl.achievementSetup.achievements[aid], ar)"><span ng-bind="ar[0]"></span><br><div ng-repeat="p in ar[1]" style="display: inline-block" uib-tooltip-template="\'perkTooltip.html\'" tooltip-class="perk-tooltip"><i class="fa fa-gift"></i>&nbsp;</div></div></div></div></div></div></div></div></div></bloqhead-player-box><script type="text/ng-template" id="achievementTooltip.html"><div data-attr="NONE">\n            <h5 ng-bind="$ctrl.achievementSetup.achievements[aid].desc"></h5>\n            <p ng-bind="\'Total Progress: \' + ($ctrl.achievementService.state.progress.achievements[aid].amount || 0)"></p>\n            <p ng-if="$ctrl.achievementService.state.progress.achievements[aid].nextRank != -1" ng-bind="\'Next Rank: \' + ($ctrl.achievementService.state.progress.achievements[aid].nextRank || 0)"></p>\n            <div class="progress progress-custom">\n                <div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.achievementService.state.progress.achievements[aid].amount}}" aria-valuemin="{{$ctrl.achievementService.state.progress.achievements[aid].lastRank}}" aria-valuemax="{{$ctrl.achievementService.state.progress.achievements[aid].nextRank}}"\n                    ng-style="{width: (100*(($ctrl.achievementService.state.progress.achievements[aid].amount - $ctrl.achievementService.state.progress.achievements[aid].lastRank) / ($ctrl.achievementService.state.progress.achievements[aid].nextRank-$ctrl.achievementService.state.progress.achievements[aid].lastRank))) + \'%\'}">\n\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="perkTooltip.html"><div>\n            <h5 ng-bind="$ctrl.achievementService.getPerkMessage(p, \'name\')"></h5>\n            <p ng-bind="$ctrl.achievementService.getPerkMessage(p, \'desc\')" />\n        </div></script></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/buildingList/buildingList.html",'<div class="row"><div class="col-xs-12"><div class="building-list-button" ng-repeat="building in $ctrl.buildings" ng-if="building.costToBuild.length > 0" tooltip-placement="bottom" uib-tooltip-template="\'resourceTooltip.html\'" tooltip-class="building-tooltip"><button type="button" ng-bind="(building.name + \' (\' + building.owned + \')\')" ng-disabled=" !building.canBuild " class="btn btn-xs btn-primary" ng-click="$ctrl.build(building.type)"></button></div></div></div><script type="text/ng-template" id="resourceTooltip.html"><div style="text-align: left;">\n        <h5>{{building.description}}</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in building.costToBuild">\n                <i class="fa" ng-class="$ctrl.resourceService.getWorkerIcon(cost.resourceType)" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"></i>\n                <span ng-bind="cost.amount"></span>&nbsp;\n            </span>\n        </p>\n        <!--\n        <p ng-repeat="cost in building.costToBuild" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></p>\n        -->\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class=""><div class="row topRow"><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="fa fa-building"></i> Buildings</bloqhead-player-box-title><bloqhead-building-list></bloqhead-building-list></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-5"><i class="fa fa-heart"></i> Breeders [{{$ctrl.breeders.length}} / {{$ctrl.breederLimit}}]</div><div class="col-xs-7"><div class="progress progress-custom progress-playerbox-title"><div class="progress-bar" role="progressbar" aria-valuenow="{{$ctrl.stepsSinceBreed}}" aria-valuemin="0" aria-valuemax="{{$ctrl.breedSteps}}}" ng-style="{width: (100*($ctrl.stepsSinceBreed/$ctrl.breedSteps)) + \'%\'}"><span class="breeders"><i class="fa fa-cog" ng-class="$ctrl.isBreeding == true ? \'fa-spin\' : \'\'"></i> </span><span class="amounts" ng-bind="$ctrl.stepsSinceBreed + \' / \' + $ctrl.breedSteps"></span></div></div></div></div></bloqhead-player-box-title><div id="breeder-target" class="row breeder-container fullH" lvl-drop-target="true" on-drop="$ctrl.dropped(dragId, dropId, relativePos)"><div ng-repeat="breederid in $ctrl.breeders" class="col-xs-12 col-lg-12"><button type="button" class="close" ng-click="$ctrl.removeBreeder(breederid)"><span>&times;</span></button><bloqhead-mortal unit="$ctrl.population[breederid]" mode="BREED"></bloqhead-mortal></div></div></bloqhead-player-box></div><div class="col-xs-4 fullH"><bloqhead-player-box><bloqhead-player-box-title><i class="icon-foot"></i> Nursery [{{$ctrl.newborns.length}} / {{$ctrl.newbornLimit}}]</bloqhead-player-box-title><div class="row breeder-container"><div ng-repeat="child in $ctrl.newborns" class="col-xs-12 col-lg-12"><bloqhead-mortal mode="NURSE" unit="child" assign="$ctrl.decideFate($id, $type)"></bloqhead-mortal></div></div></bloqhead-player-box></div></div><div class="row" id="bottomRow"><div class="col-xs-12 fullH"><bloqhead-population-list population="$ctrl.population" max-population="$ctrl.maxPopulation" breeder-assign="$ctrl.assign($id, $type)" can-breed="$ctrl.breeders.length < $ctrl.breederLimit"></bloqhead-population-list></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mortal/mortal.html",'<div class="bloqhead-component" ng-if="$ctrl.display === \'TILE\'" ng-init="unit = $ctrl.unit"><h5 ng-click="$ctrl.showDetails()"><div class="col-xs-12 mortal-name" ng-switch="$ctrl.unit.hasTrait(\'Male\')"><i class="fa fa-male male-color" ng-switch-when="true"></i> <i class="fa fa-female female-color" ng-switch-when="false"></i> <span>{{$ctrl.unit.name}}</span>&nbsp;<i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></div></h5><table class="genomeEditor" uib-tooltip-template="\'attrTooltip.html\'" tooltip-class="trait-tooltip"><tbody><tr><th colspan="5"><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-mousemove="$ctrl.imageHover($event)"></th></tr><tr><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'STR\'">{{$ctrl.unit.attributes.STR}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'INT\'">{{$ctrl.unit.attributes.INT}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'END\'">{{$ctrl.unit.attributes.END}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'CHR\'">{{$ctrl.unit.attributes.CHR}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'LCK\'">{{$ctrl.unit.attributes.LCK}}</td></tr></tbody></table><div ng-show="$ctrl.mode === \'POP\'"><button ng-disabled="!$ctrl.canBreed" class="btn btn-sm btn-primary" ng-click="$ctrl.assignMe()">Breed Me</button><div class="btn-group" uib-dropdown dropdown-append-to-body="true"><button type="button" class="btn btn-sm btn-primary" uib-dropdown-toggle>Work <span class="caret"></span></button><ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="single-button"><li ng-repeat="(key, job) in $ctrl.jobTypes"><a href="javascript:void(0);" ng-bind="job.name" ng-click="$ctrl.assignMe(key)"></a></li></ul></div><span class="pull-right" ng-bind="$ctrl.unit.currentJob"></span></div><div ng-show="$ctrl.mode === \'NURSE\'"><span uib-tooltip-template="\'banishTooltip.html\'" tooltip-class="trait-tooltip"><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'BANISH\')" ng-disabled="!$ctrl.canBanish()">Banish</button> </span><button class="btn btn-xs btn-primary" ng-click="$ctrl.assignMe(\'WORK\')">Work</button></div></div><script type="text/ng-template" id="banishTooltip.html"><div style="text-align: left;">\n        <h5>Cost to banish</h5>\n        <p style="white-space:nowrap">\n            <span>Requires: </span>\n            <span ng-repeat="cost in unit.banishCost">\n                <i class="fa" ng-class="$ctrl.resourceService.getWorkerIcon(cost.resourceType)" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"></i>\n                <span ng-bind="cost.amount"></span>&nbsp;\n            </span>\n        </p>\n        <!--\n        <p ng-repeat="cost in building.costToBuild" data-attr="{{$ctrl.resourceTypes[cost.resourceType].attr}}"><span ng-bind="cost.resource"></span>: <span ng-bind="cost.amount"></span></p>\n        -->\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="player-box"><h3 class="box-title" ng-transclude="boxTitleHtml">{{$ctrl.boxTitle}}</h3><div class="player-content"><ng-transclude></ng-transclude></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationList.html",'<bloqhead-player-box><bloqhead-player-box-title><div class="row"><div class="col-xs-4"><i class="fa fa-globe"></i> Population [{{$ctrl.population.length}} / {{$ctrl.maxPopulation}}]</div><div class="col-xs-8"><div class="pull-right"></div></div></div></bloqhead-player-box-title><div class="row population-container"><div class="col-xs-12"><uib-tabset type="pills"><div uib-tab class="panel-default" heading="Gender View"><div class="col-xs-6 col-lg-6"><h4>Males</h4><bloqhead-population-panel population="$ctrl.population" filter="{traits:[\'Male\']}"></bloqhead-population-panel></div><div class="col-xs-6 col-lg-6"><h4>Females</h4><bloqhead-population-panel population="$ctrl.population" filter="{traits:[\'Female\']}"></bloqhead-population-panel></div></div><div uib-tab class="panel-default" heading="Custom View"><div class="col-xs-12"><div class="btn btn-xs btn-primary trait-filter-item" ng-repeat="c in $ctrl.criteria" ng-click="$ctrl.deleteCriteria($index)"><div ng-if="c.type=\'trait\'"><span ng-bind="c.val.name"></span> <button type="button" class="close" ng-click="$ctrl.deleteCriteria($index)"><span>×</span></button></div></div><button class="btn btn-xs btn-primary" type="button" href="javascript:void(0);" ng-click="$ctrl.openTraitSelector()">Add Filter</button></div><bloqhead-population-panel population="$ctrl.population" filter="$ctrl.getCustomFilter()"></bloqhead-population-panel></div></uib-tabset></div></div></bloqhead-player-box>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/populationPanel.html",'<div class="population-panel"><table><tbody><tr ng-repeat="unit in $ctrl.population | applyPopulationFilter: $ctrl.filter | orderBy: $ctrl.orderBy" class="population-list"><td class="mortal-name" ng-switch="unit.hasTrait(\'Male\')" lvl-draggable="true" data-breederid="{{unit.id}}" ng-click="$ctrl.parent.showDetails(unit)"><i class="fa fa-male male-color" ng-switch-when="true"></i><i class="fa fa-female female-color" ng-switch-when="false"></i> <i class="fa" ng-class="$ctrl.getWorkerIcon($ctrl.parent.jobTypes[unit.currentJob].resource)" data-attr="{{$ctrl.resourceTypes[$ctrl.parent.jobTypes[unit.currentJob].resource].attr}}"></i> <span>{{unit.name}}</span></td><td class="mortal-genome" uib-tooltip-template="\'attrTooltip.html\'" tooltip-class="trait-tooltip"><table class="genomeEditor"><thead><tr><th colspan="5"><img class="img-responsive" ng-src="{{unit.redGreenImage}}" ng-mousemove="$ctrl.imageHover($event)"></th></tr></thead><tbody><tr><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'STR\'">{{unit.attributes.STR}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'INT\'">{{unit.attributes.INT}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'END\'">{{unit.attributes.END}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'CHR\'">{{unit.attributes.CHR}}</td><td style="width: 20%" ng-mouseover="$ctrl.hoverAttr = \'LCK\'">{{unit.attributes.LCK}}</td></tr></tbody></table></td><td><i ng-repeat="trait in unit.traits" class="fa fa-star" uib-tooltip-template="\'traitTooltip.html\'" tooltip-class="trait-tooltip"></i></td></tr></tbody></table></div><script type="text/ng-template" id="traitTooltip.html"><div class="text-center">\n        <h4>{{trait.name}}</h4>\n        <div class="genes-table">\n            <div class="genes-tr">\n                <div class="genes-th rec">Recessive</div>\n                <div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div>\n                <div class="genes-th dom ">Dominant</div>\n            </div>\n            <div class="genes-tr " ng-repeat="gene in trait.genes">\n                <div class="genes-td rec " ng-bind="$ctrl.geneDefinitions[gene[0]].rec "></div>\n                <div class="genes-td" data-attr="{{$ctrl.geneDefinitions[gene[0]].attr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[gene[0]]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneTraitRangeStyle($ctrl.geneDefinitions[gene[0]], trait)"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom" ng-bind="$ctrl.geneDefinitions[gene[0]].dom"></div>\n            </div>\n        </div>\n        <br />\n        <br />\n    </div></script><script type="text/ng-template" id="attrTooltip.html"><div class="text-center">\n        <h4>{{$ctrl.attributes[$ctrl.hoverAttr].name}}</h4>\n        <h5>{{$ctrl.attributes[$ctrl.hoverAttr].desc}}</h5>\n        <br />\n        <div class="genes-table">\n            <div class="genes-tr " ng-repeat="gene in $ctrl.geneDefinitions | filter:{attr: $ctrl.hoverAttr}" ng-if="unit.genesUnlocked.indexOf($ctrl.geneDefinitions.indexOf(gene)) >=0">\n                <div class="genes-td rec"><span ng-bind="gene.rec"></span>: -<span ng-bind="unit.genes[$ctrl.geneDefinitions.indexOf(gene)][0]"></span></div>\n                <div class="genes-td" data-attr="{{$ctrl.hoverAttr}}">\n                    <div class="progress progress-trait-selector" style="position:relative;">\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneValueStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)]) "></div>\n                        <div class="progress-bar " role="progressbar " aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(unit.genes[$ctrl.geneDefinitions.indexOf(gene)])"></div>\n                    </div>\n                </div>\n                <div class="genes-td dom"><span ng-bind="gene.dom"></span>: <span ng-bind="unit.genes[$ctrl.geneDefinitions.indexOf(gene)][1]"></span></div>\n            </div>\n        </div>\n        <br />\n        <br />\n    </div></script>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp");
}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/populationList/traitSelector.html",'<div class="modal-body" id="modal-body"><div class="row"><div class="col-xs-8"><div class="genes-table"><div class="genes-tr"><div class="genes-th rec">Recessive</div><div class="genes-th"><span class="pull-left">-255</span> 0 <span class="pull-right">+255</span></div><div class="genes-th dom">Dominant</div></div><div class="genes-tr" ng-repeat="g in $ctrl.geneDefinitions"><div class="genes-td rec" ng-bind="g.rec"></div><div class="genes-td" data-attr="{{g.attr}}"><div class="progress progress-trait-selector"><div class="progress-bar" role="progressbar" aria-valuemin="-255" aria-valuemax="255" ng-style="$ctrl.getGeneRangeStyle(g)"></div></div></div><div class="genes-td dom" ng-bind="g.dom"></div></div></div></div><div class="col-xs-4">Traits<div class="row"><div class="col-xs-12"><span class="trait-icon" ng-repeat="t in $ctrl.traitDefinitions"><button class="btn btn-sm btn-info" type="button" ng-click="$ctrl.select(t)" ng-bind="t.name" data-ng-mouseenter="$ctrl.traitEnter(t);" ng-mouseleave="$ctrl.traitLeave(t);"></button></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/resourceList/resourceList.html",'<div class="resource-list col-xs-12"><div class="row" ng-repeat="(key, value) in $ctrl.resources" ng-if="value[2] === true" data-attr="{{$ctrl.resourceTypes[key].attr}}" lvl-drop-target="true" on-drop="$ctrl.dropped(dragId, dropId, relativePos, key)"><div class="col-xs-12 col-sm-2"><h5 uib-tooltip="{{$ctrl.resourceTypes[key].desc}}">{{$ctrl.resourceTypes[key].name}}</h5></div><div class="col-xs-12 col-sm-10"><div class="progress progress-custom" ng-if="value[1] !== -1"><div class="progress-bar" role="progressbar" aria-valuenow="{{value[0]}}" aria-valuemin="0" aria-valuemax="{{value[1]}}" ng-style="{width: (100*(value[0]/value[1])) + \'%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerCount(key)"></span> </span><span class="amounts" ng-bind="value[0] + \' / \' + value[1]"></span></div></div><div class="progress progress-custom" ng-if="value[1] === -1"><div class="progress-bar" role="progressbar" aria-valuenow="1" aria-valuemin="0" aria-valuemax="1" ng-style="{width: \'100%\'}"><span class="workers"><i class="fa" ng-class="$ctrl.getWorkerIcon(key)"></i> <span ng-bind="$ctrl.getWorkerCount(key)"></span> </span><span class="amounts" ng-bind="value[0]"></span></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor u="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/configurationTab.html",'<div class="row"><div class="col-xs-12"><h5>Resources</h5><div class="row"><span ng-repeat="rt in $ctrl.snapshot.resourceTypes" ng-bind="rt.name"></span></div><h5>Buildings</h5><h5>Workers</h5><h5>Genetix</h5><h5>Achievements</h5></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/fontTab.html",'<style>#font-examples li {\n        font-size: 1vw;\n        color: gold;\n    }\n    \n    #font-examples input {\n        color: black;\n    }</style><div id="font-examples"><ul class="list-group"><li class="list-group-item"><i class="icon-trophy"></i> <input type="text" readonly="readonly" value="trophy"></li><li class="list-group-item"><i class="icon-hammer"></i> <input type="text" readonly="readonly" value="hammer"></li><li class="list-group-item"><i class="icon-mortar-board"></i> <input type="text" readonly="readonly" value="mortar-board"></li><li class="list-group-item"><i class="icon-skull"></i> <input type="text" readonly="readonly" value="skull"></li><li class="list-group-item"><i class="icon-foot"></i> <input type="text" readonly="readonly" value="foot"></li><li class="list-group-item"><i class="icon-shield"></i> <input type="text" readonly="readonly" value="shield"></li><li class="list-group-item"><i class="icon-tools"></i> <input type="text" readonly="readonly" value="tools"></li><li class="list-group-item"><i class="icon-broom"></i> <input type="text" readonly="readonly" value="broom"></li><li class="list-group-item"><i class="icon-coins"></i> <input type="text" readonly="readonly" value="coins"></li><li class="list-group-item"><i class="icon-flask"></i> <input type="text" readonly="readonly" value="flask"></li><li class="list-group-item"><i class="icon-bricks"></i> <input type="text" readonly="readonly" value="bricks"></li><li class="list-group-item"><i class="icon-i-beam"></i> <input type="text" readonly="readonly" value="i-beam"></li><li class="list-group-item"><i class="icon-happy"></i> <input type="text" readonly="readonly" value="happy"></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions" ng-if="$ctrl.unit.genes[$index][2] > 0"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div class="col-xs-12"><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li><li role="presentation"><a data-target="#configuration" role="tab" data-toggle="tab">Configuration</a></li><li role="presentation"><a data-target="#fonts" role="tab" data-toggle="tab">Fonts</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div><div role="tabpanel" class="tab-pane" id="configuration"><configuration-tab></configuration-tab></div><div role="tabpanel" class="tab-pane" id="fonts"><font-tab></font-tab></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/workerList/workerList.html",'<div class="col-xs-12" title=""><div class="row"><div class="col-xs-5">Job</div><div class="col-xs-2">Workers</div></div><div class="row" ng-repeat="worker in $ctrl.workers" style="padding-bottom: 5px"><div class="col-xs-5"><h5 uib-tooltip="{{worker.description}}">{{worker.name}}</h5></div><div class="col-xs-2"><h5 ng-bind="worker.count"></h5></div></div></div>')}])}(),angular.module("bloqhead.genetixApp").constant("geneDefinitions",[{dom:"Broad Shoulders",rec:"Slender Shoulders",attr:"STR"},{dom:"Thick Skull",rec:"Soft Skull",attr:"STR"},{dom:"Large Arms",rec:"Small Arms",attr:"STR"},{dom:"Large Legs",rec:"Small Legs",attr:"STR"},{dom:"Big Chest",rec:"Weak Chest",attr:"STR"},{dom:"Tough Jaw",rec:"Weak Jaw",attr:"STR"},{dom:"Oafish",rec:"Mousey",attr:"STR"},{dom:"STR7+",rec:"STR7-",attr:"STR"},{dom:"STR8+",rec:"STR8-",attr:"STR"},{dom:"STR9+",rec:"STR9-",attr:"STR"},{dom:"INT0+",rec:"INT0-",attr:"INT"},{dom:"INT1+",rec:"INT1-",attr:"INT"},{dom:"INT2+",rec:"INT2-",attr:"INT"},{dom:"INT3+",rec:"INT3-",attr:"INT"},{dom:"Calculated Decisions",rec:"Reckless",attr:"INT"},{dom:"Lateral Thinker",rec:"Single Minded",attr:"INT"},{dom:"Quick Learner",rec:"Forgetful",attr:"INT"},{dom:"INT7+",rec:"INT7-",attr:"INT"},{dom:"INT8+",rec:"INT8-",attr:"INT"},{dom:"INT9+",rec:"INT9-",attr:"INT"},{dom:"END0+",rec:"END0-",attr:"END"},{dom:"END1+",rec:"END1-",attr:"END"},{dom:"END2+",rec:"END2-",attr:"END"},{dom:"END3+",rec:"END3-",attr:"END"},{dom:"END4+",rec:"END4-",attr:"END"},{dom:"END5+",rec:"END5-",attr:"END"},{dom:"END6+",rec:"END6-",attr:"END"},{dom:"END7+",rec:"END7-",attr:"END"},{dom:"END8+",rec:"END8-",attr:"END"},{dom:"END9+",rec:"END9-",attr:"END"},{dom:"Eloquent",rec:"Catatonic",attr:"CHR"},{dom:"Powerful Voice",rec:"Quiet Voice",attr:"CHR"},{dom:"Full Lips",rec:"Thin Lips",attr:"CHR"},{dom:"Dark Skin",rec:"Fair Skin",attr:"CHR"},{dom:"CHR4+",rec:"CHR4-",attr:"CHR"},{dom:"CHR5+",rec:"CHR5-",attr:"CHR"},{dom:"CHR6+",rec:"CHR6-",attr:"CHR"},{dom:"CHR7+",rec:"CHR7-",attr:"CHR"},{dom:"CHR8+",rec:"CHR8-",attr:"CHR"},{dom:"CHR9+",rec:"CHR9-",attr:"CHR"},{dom:"LCK0+",rec:"LCK0-",attr:"LCK"},{dom:"LCK1+",rec:"LCK1-",attr:"LCK"},{dom:"LCK2+",rec:"LCK2-",attr:"LCK"},{dom:"LCK3+",rec:"LCK3-",attr:"LCK"},{dom:"LCK4+",rec:"LCK4-",attr:"LCK"},{dom:"LCK5+",rec:"LCK5-",attr:"LCK"},{dom:"LCK6+",rec:"LCK6-",attr:"LCK"},{dom:"LCK7+",rec:"LCK7-",attr:"LCK"},{dom:"LCK8+",rec:"LCK8-",attr:"LCK"},{dom:"LCK9+",rec:"LCK9-",attr:"LCK"},{dom:"Female",rec:"Male",attr:"NONE"}]).constant("traitDefinitions",[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Trait Selector Test",genes:[[0,0,255],[10,0,255],[20,0,255],[30,0,255],[40,0,255],[50,0,255]]},{name:"Female",genes:[[50,0,255]]},{name:"Male",genes:[[50,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}]).constant("attributes",{STR:{name:"Strength",desc:"Affects a mortals ability for physical labor such as digging."},INT:{name:"Intelligence",desc:"Affects a mortals ability for thoughtful endeavors such as researching."},END:{name:"Endurance",desc:"Affects a mortals ability for demanding tasks such as wood chopping."},CHR:{name:"Charisma",desc:"Affects a mortals ability for stuff."},LCK:{name:"Luck",desc:"Increases a mortals luck.  Useful for divining water."}}),angular.module("bloqhead.genetixApp").constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3,WORK:4}),angular.module("bloqhead.genetixApp").constant("achievementSetup",{achievementGroups:[{name:"Population",aids:["A_BIRTHS"]},{name:"Resources",aids:["A_DIRT_E","A_BRICKS_E","A_STEEL_E","A_WATER_E","A_WOOD_E","A_GOLD_E","A_SCIENCE_E","A_EVOCOIN_E","A_HAPPINESS_E"]},{name:"Buildings",aids:["A_SODHOUSE_B","A_DIRTPILE_B","A_WOODSHED_B","A_WATERHOLE_B"]}],achievements:{A_BIRTHS:{aid:"A_BIRTHS",name:"The Chosen One",desc:"Create a new unit",ranks:[[1,[["P_R_BONUS","DIRT",20]]],[3,[["P_R_BONUS","WOOD",20]]],[5,[["P_R_BONUS","EVOCOIN",1]]]]},A_DIRT_E:{aid:"A_DIRT_E",name:"Earn Dirt",desc:"Earn Dirt Desc",logmsg:"Earn Dirt Log",res:"DIRT",ranks:[[5,[["P_R_MULTIPLIER","DIRT",25]]],[25,[["P_R_UNLOCK","WOOD"],["P_B_UNLOCK","WOODSHED"],["P_B_BONUS","WOODSHED",1]]],[100,[["P_R_MULTIPLIER","DIRT",50]]],[1e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[2e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[3e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[4e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[5e3,[["P_B_MULTIPLIER","DIRTPILE",20]]],[7500,[["P_B_MULTIPLIER","DIRTPILE",50]]],[1e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[15e3,[["P_B_MULTIPLIER","DIRTPILE",75]]],[2e4,[["P_B_MULTIPLIER","DIRTPILE",100]]],[3e4,[["P_R_MULTIPLIER","DIRT",100]]],[5e4,[["P_B_MULTIPLIER","DIRTPILE",50]]],[8e4,[["P_B_MULTIPLIER","DIRTPILE",50]]]]},A_BRICKS_E:{aid:"A_BRICKS_E",name:"Earn Bricks",desc:"Earn Bricks Desc",logmsg:"Earn Bricks Log",res:"BRICKS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_STEEL_E:{aid:"A_STEEL_E",name:"Earn Steel",desc:"Earn Steel Desc",logmsg:"Earn Steel Log",res:"STEEL",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_WATER_E:{aid:"A_WATER_E",name:"Earn Water",desc:"Earn Water Desc",logmsg:"Earn Water Log",res:"WATER",ranks:[[50,[["P_R_MULTIPLIER","WATER",10]]],[75,[["P_B_MULTIPLIER","WATERHOLE",10]]],[500,[["P_R_MULTIPLIER","WATER",10]]],[750,[["P_B_MULTIPLIER","WATERHOLE",10]]],[2500,[["P_B_UNLOCK","LIBRARY"]]],[5e3,[["P_R_MULTIPLIER","WATER",10]]],[7500,[["P_B_MULTIPLIER","WATERHOLE",10]]],[5e4,[["P_R_MULTIPLIER","WATER",50]]],[75e3,[["P_B_MULTIPLIER","WATERHOLE",10]]]]},A_WOOD_E:{aid:"A_WOOD_E",name:"Earn Wood",desc:"Earn Wood Desc",logmsg:"Earn Wood Log",res:"WOOD",ranks:[[50,[["P_R_UNLOCK","WATER"],["P_B_UNLOCK","WATERHOLE"],["P_B_BONUS","WATERHOLE",1]]],[250,[["P_R_MULTIPLIER","WOOD",50]]],[500,[["P_B_MULTIPLIER","WOODSHED",100]]],[1e3,[["P_B_MULTIPLIER","WOODSHED",100]]],[2500,[["P_R_MULTIPLIER","WOOD",50]]],[5e3,[["P_R_MULTIPLIER","WOOD",50]]],[1e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]],[2e4,[["P_R_MULTIPLIER","WOOD",50],["P_B_MULTIPLIER","WOODSHED",100]]]]},A_GOLD_E:{aid:"A_GOLD_E",name:"Earn Gold",desc:"Earn Gold Desc",logmsg:"Earn Gold Log",res:"GOLD",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_SCIENCE_E:{aid:"A_SCIENCE_E",name:"Earn Science",desc:"Earn Science Desc",logmsg:"Earn Science Log",res:"SCIENCE",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_HAPPINESS_E:{aid:"A_HAPPINESS_E",name:"Earn Happiness",desc:"Earn Happiness Desc",logmsg:"Earn Happiness Log",res:"HAPPINESS",ranks:[[50,[["P_R_MULTIPLIER","HAPPINESS",10]]]]},A_EVOCOIN_E:{aid:"A_EVOCOIN_E",name:"Earn EVO-Coins",desc:"Earn EVO-Coins Desc",logmsg:"Earn EVO-Coins Log",res:"EVOCOIN",ranks:[[100,[["P_R_MULTIPLIER","HAPPINESS",20]]]]},A_SODHOUSE_B:{aid:"A_SODHOUSE_B",name:"Build a Sod House",desc:"Build a Sod House",logmsg:"Build a Sod House",res:"HAPPINESS",ranks:[[4,[["P_B_BONUS","DIRTPILE",4],["P_B_BONUS","WOODSHED",4],["P_B_BONUS","WATERHOLE",4]]]]},A_DIRTPILE_B:{aid:"A_DIRTPILE_B",name:"Build a Dirt Pile",desc:"Build a Dirt Pile",logmsg:"Build a Dirt Pile",res:"DIRT",ranks:[[25,[["P_R_MULTIPLIER","DIRT",250]]]]},A_WOODSHED_B:{aid:"A_WOODSHED_B",name:"Build a Woodshed",desc:"Build a Woodshed",logmsg:"Build a Woodshed",res:"WOOD",ranks:[[25,[["P_R_MULTIPLIER","WOOD",250]]]]},A_WATERHOLE_B:{aid:"A_WATERHOLE_B",name:"Build a Water Hole",desc:"Build a Water Hole",logmsg:"Build a Water Hole",res:"WATER",ranks:[[25,[["P_R_MULTIPLIER","WATER",250]]]]},A_LIBRARY_B:{aid:"A_LIBRARY_B",name:"Build a Library",desc:"Build a Library",logmsg:"Build a Library",res:"SCIENCE",ranks:[[1,[["P_R_UNLOCK","SCIENCE"]]]]}},perks:{P_R_UNLOCK:{pid:"P_R_UNLOCK",name:"New Resource: %(res)s",desc:"Unlocks the %(res)s resource.",logmsg:"The %(res)s resource has been unlocked.",once:!1},P_R_MULTIPLIER:{pid:"P_R_MULTIPLIER",name:"Resource Multiplier",desc:"Increases the rate at which you aquire %(res)s by %(amt)d%%.",logmsg:"Earned %(name)s - The rate that you aquire %(res)s has been increased by %(amt)d%%."},P_R_BONUS:{pid:"P_R_BONUS",name:"Bonus Resources",desc:"%(amt)d %(res)s will be added to your storage.",logmsg:"%(amt)d %(res)s has been added to your storage."},P_G_ENHANCED:{pid:"P_G_ENHANCED",name:"New Gene Enhancement",desc:"Will increase the boundary by %(amt)d for your %(attr)s %(dom)s/%(rec)s gene.",logmsg:"The boundary has been increased by %(amt)d for one of your %(attr)s genes. (%(dom)s/%(rec)s)"},P_B_UNLOCK:{pid:"P_B_UNLOCK",name:"New building: %(buildingType)s",desc:"Unlocks the %(buildingType)s building.",logmsg:"The %(buildingType)s building has been unlocked."},P_B_BONUS:{pid:"P_B_GIFT",name:"Bonus Buildings",desc:"%(amt)d free %(buildingType)s%(plural)s for you to use.",logmsg:"You have been given %(amt)d %(buildingType)s%(plural)s."},P_B_MULTIPLIER:{pid:"P_B_MULTIPLIER",name:"%(buildingType)s multiplier",desc:"Your %(buildingType)ss now hold %(amt)d%% more.",logmsg:"Your %(buildingType)ss just got %(amt)d%% bigger."}}}),angular.module("bloqhead.genetixApp").constant("defaultBuildings",{BUNGALOW:{name:"Breeding Bungalow",description:"A private bungalow for %(size)d where the magic happens. Due to the magic nature of this building, it cannot be built directly.",use:"breeding",size:2,baseCost:[],purchased:0,gifted:1,unlocked:!0,multiplier:1},NURSERY:{name:"Nursery",description:"A place for newborns. Maximum newborns %(size)d.",use:"newborn",size:1,baseCost:[],purchased:0,gifted:1,unlocked:!0,multiplier:1},SODHOUSE:{name:"Sod House",description:"Provides minimal shelter for %(size)d things.",use:"housing",size:5,baseCost:[{resource:"DIRT",amount:500,costMultiplier:2.5},{resource:"WOOD",amount:250,costMultiplier:2.5},{resource:"WATER",amount:125,costMultiplier:2.5}],purchased:0,gifted:1,unlocked:!0,multiplier:1},DIRTPILE:{name:"Dirt Pile",description:"Where else would you store dirt? Holds %(size)d.",use:"storage",stores:"DIRT",size:100,baseCost:[{resource:"DIRT",amount:50,costMultiplier:1.25}],purchased:0,gifted:1,unlocked:!0,multiplier:1},WOODSHED:{name:"Woodshed",description:"Holds %(size)d wood",use:"storage",stores:"WOOD",size:100,baseCost:[{resource:"WOOD",amount:50,costMultiplier:1.1},{resource:"DIRT",amount:25,costMultiplier:1.1}],purchased:0,gifted:0,unlocked:!1,multiplier:1},WATERHOLE:{name:"Water Hole",description:"A dirty place to hold water. Stores %(size)d.",use:"storage",stores:"WATER",size:100,baseCost:[{resource:"WOOD",amount:50,costMultiplier:1.1},{resource:"DIRT",amount:50,costMultiplier:1.05}],purchased:0,gifted:0,unlocked:!1,multiplier:1},WELL:{name:"Well",description:"Used for water production.",use:"production",produces:"WATER",size:5,baseCost:[{resource:"BRICKS",amount:100,costMultiplier:1.05}],purchased:0,gifted:0,unlocked:!1,multiplier:1},LIBRARY:{name:"Library",description:"A place for researchers, produces science.",use:"production",size:0,baseCost:[{resource:"DIRT",amount:5e3,costMultiplier:100},{resource:"WOOD",amount:2500,costMultiplier:100},{resource:"WATER",amount:1500,costMultiplier:100}],purchased:0,gifted:0,unlocked:!1,multiplier:1,stores:"",produces:"SCIENCE",maxcount:1}}),angular.module("bloqhead.genetixApp").constant("defaultState",{clearLog:!0,autoSaveSteps:30,gameLoopServiceState:{stepTimeMs:1e3},populationServiceState:{breedSteps:6,stepsSinceBreed:0,populationState:{initialSize:2,maxSize:5,breederGeneCap:90,breederGenesUnlocked:[0,10,20,30,40],breederMutationChance:10}},achievementServiceState:null,resourceServiceState:{resources:{}},buildingServiceState:{buildings:{}},workerServiceState:{workers:[]}}).constant("gameSaveKey","GENETIX_SAVE").constant("gameStates",{PAUSED:0,RUNNING:1}),angular.module("bloqhead.genetixApp").constant("resourceTypes",{HAPPINESS:{rid:"HAPPINESS",name:"Happiness",desc:"Good things happen to those that are happy...",attr:"CHR",jids:["IDLE"]},DIRT:{rid:"DIRT",name:"Dirt",desc:"Used in construction and mining.",attr:"STR",jids:["DIRT_GATHER"]},WOOD:{rid:"WOOD",name:"Wood",desc:"Used in construction and mining.",attr:"END",jids:["WOOD_GATHER"]},WATER:{rid:"WATER",name:"Water",desc:"Used in construction, mining and population expansion.",attr:"LCK",jids:["WATER_GATHER"]},SCIENCE:{rid:"SCIENCE",name:"Science",desc:"Used in genetic modification and advanced construction.",attr:"INT",jids:["RESEARCHER"]},BRICKS:{rid:"BRICKS",name:"Bricks",desc:"Used in construction and smelting.",attr:"STR"},STEEL:{rid:"STEEL",name:"Steel",desc:"Used in advanced construction.",attr:"STR"},GOLD:{rid:"GOLD",name:"Gold",desc:"Used for purchasing gene research technologies.",attr:"INT"},EVOCOIN:{rid:"EVOCOIN",name:"Evo-Coins",desc:"A rare commodity indeed. Used to discover traits.",attr:"LCK"}}),angular.module("bloqhead.genetixApp").constant("jobTypes",{IDLE:{jid:"IDLE",name:"Idle",description:"One who enjoys life",resource:"HAPPINESS",baseWorkerSteps:4,baseAmount:1,unlocked:1},DIRT_GATHER:{jid:"DIRT_GATHER",name:"Dirt Digger",description:"One who digs dirt",resource:"DIRT",baseWorkerSteps:4,baseAmount:1,unlocked:1},WOOD_GATHER:{jid:"WOOD_GATHER",name:"Wood Chopper",description:"One who chops wood",resource:"WOOD",baseWorkerSteps:4,baseAmount:1,unlocked:0},WATER_GATHER:{jid:"WATER_GATHER",name:"Water Diviner",description:"One who uses wooden sticks to find water",resource:"WATER",baseWorkerSteps:4,baseAmount:1,unlocked:0},RESEARCHER:{jid:"RESEARCHER",name:"Researcher",description:"One who learns",resource:"SCIENCE",baseWorkerSteps:4,baseAmount:1,unlocked:0}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2VydmljZXMvZ2FtZVNlcnZpY2UuanMiLCJjb21wb25lbnRzL2JpdG1hcC5qcyIsImNvbXBvbmVudHMvZ2VuZXRpeEFwcC5qcyIsImNvbXBvbmVudHMvYWNoaWV2ZW1lbnRzL2FjaGlldmVtZW50cy5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL2J1aWxkaW5nTGlzdC9idWlsZGluZ0xpc3QuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9jbGFzc2VzL2JyZWVkZXIuanMiLCJjb21wb25lbnRzL2NsYXNzZXMvcG9wdWxhdGlvbi5qcyIsImNvbXBvbmVudHMvY2xhc3Nlcy90cmFpdC5qcyIsImNvbXBvbmVudHMvZ2FtZUNvbnRyb2wvZ2FtZUNvbnRyb2wuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9sb2cvbG9nLmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvbWFpbkdhbWUvbWFpbkdhbWUuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9tb3J0YWwvbW9ydGFsLmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvcGxheWVyQm94L3BsYXllckJveC5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL3BvcHVsYXRpb25MaXN0L3BvcHVsYXRpb25MaXN0LmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvcmVzb3VyY2VMaXN0L3Jlc291cmNlTGlzdC5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL2FjaGlldmVtZW50U2VydmljZS5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvYnVpbGRpbmdTZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9wb3B1bGF0aW9uU2VydmljZS5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvcmVzb3VyY2VTZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy93b3JrZXJTZXJ2aWNlLmpzIiwiY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL3Rlc3RJbnRlcmZhY2UuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy93b3JrZXJMaXN0L3dvcmtlckxpc3QuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9ob21lLmpzIiwiY29tcG9uZW50cy9hY2hpZXZlbWVudHMvYWNoaWV2ZW1lbnRzLmpzIiwiY29tcG9uZW50cy9idWlsZGluZ0xpc3QvYnVpbGRpbmdMaXN0LmpzIiwiY29tcG9uZW50cy9sb2cvbG9nLmpzIiwiY29tcG9uZW50cy9tYWluR2FtZS9tYWluR2FtZS5qcyIsImNvbXBvbmVudHMvbW9ydGFsL21vcnRhbC5qcyIsImNvbXBvbmVudHMvcGxheWVyQm94L3BsYXllckJveC5qcyIsImNvbXBvbmVudHMvcG9wdWxhdGlvbkxpc3QvcG9wdWxhdGlvbkxpc3QuanMiLCJjb21wb25lbnRzL3BvcHVsYXRpb25MaXN0L3BvcHVsYXRpb25QYW5lbC5qcyIsImNvbXBvbmVudHMvcG9wdWxhdGlvbkxpc3QvdHJhaXRTZWxlY3Rvci5qcyIsImNvbXBvbmVudHMvcmVzb3VyY2VMaXN0L3Jlc291cmNlTGlzdC5qcyIsImNvbXBvbmVudHMvdGVzdEludGVyZmFjZS9icmVlZGVyVGFiLmpzIiwiY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL2NvbmZpZ3VyYXRpb25UYWIuanMiLCJjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvZm9udFRhYi5qcyIsImNvbXBvbmVudHMvdGVzdEludGVyZmFjZS9nZW5vbWVFZGl0b3IuanMiLCJjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvbWF0aW5nVGFiLmpzIiwiY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL3Rlc3RJbnRlcmZhY2UuanMiLCJjb21wb25lbnRzL3dvcmtlckxpc3Qvd29ya2VyTGlzdC5qcyIsImNvbXBvbmVudHMvY2xhc3Nlcy90cmFpdC5zZXR0aW5ncy5qcyIsImNvbXBvbmVudHMvbG9nL2xvZy5zZXR0aW5ncy5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvYWNoaWV2ZW1lbnRTZXJ2aWNlLnNldHRpbmdzLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9idWlsZGluZ1NlcnZpY2Uuc2V0dGluZ3MuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL2dhbWVTZXJ2aWNlLnNldHRpbmdzLmpzIiwiY29tcG9uZW50cy9zZXJ2aWNlcy9yZXNvdXJjZVNlcnZpY2Uuc2V0dGluZ3MuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL3dvcmtlclNlcnZpY2Uuc2V0dGluZ3MuanMiXSwibmFtZXMiOlsicmFuZG9tSW50RnJvbUludGVydmFsIiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiX2FzTGl0dGxlRW5kaWFuSGV4IiwidmFsdWUiLCJieXRlcyIsInJlc3VsdCIsInB1c2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiX2NvbGxhcHNlRGF0YSIsInJvd3MiLCJyb3dfcGFkZGluZyIsImkiLCJqIiwicGl4ZWwiLCJyb3dzX2xlbiIsImxlbmd0aCIsInBpeGVsc19sZW4iLCJwYWRkaW5nIiwiX3NjYWxlUm93cyIsInNjYWxlIiwibmV3X3JvdyIsIngiLCJ5IiwicmVhbF9oIiwic2NhbGVkX2giLCJwYXJzZUludCIsInJlYWxfdyIsInNjYWxlZF93IiwibmV3X3Jvd3MiLCJ3aW5kb3ciLCJnZW5lcmF0ZUJpdG1hcERhdGFVUkwiLCJidG9hIiwiYWxlcnQiLCJmaWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJudW1fZGF0YV9ieXRlcyIsIm51bV9maWxlX2J5dGVzIiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJfYXNzaWduX2JnX3RyYW5zZm9ybSIsImJnIiwidGVzdCIsIiRiZ190cmFuc2Zvcm0iLCJzcGxpdCIsInN1YnN0ciIsInN1YnN0cmluZyIsImxlbiIsIiRiZ0FzUkdCIiwiaWQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiZ2VuZXJhdGVMb3dSZXNCaXRtYXAiLCJyb3ciLCJpbWdfcGFyZW50IiwiaW1nIiwic3JjIiwieF9sZW4iLCJjcmVhdGVFbGVtZW50IiwiYWx0IiwidGl0bGUiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwib25jbGljayIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImFza1RvU2NhbGUiLCJwcm9tcHQiLCJwYXJzZUZsb2F0IiwiTmFOIiwiaXNOYU4iLCJ0aGlzIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkdWliVG9vbHRpcFByb3ZpZGVyIiwiJGFuaW1hdGVQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlcyIsIm5hbWUiLCJ1cmwiLCJjb21wb25lbnQiLCJmb3JFYWNoIiwic3RhdGUiLCJvcHRpb25zIiwiYXBwZW5kVG9Cb2R5IiwicGxhY2VtZW50IiwicG9wdXBDbG9zZURlbGF5IiwicG9wdXBEZWxheSIsInJ1biIsImdhbWVTZXJ2aWNlIiwiaW5pdCIsImdhbWUiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJiaW5kaW5ncyIsImZvb3RlciIsIiRyb290U2NvcGUiLCJhY2hpZXZlbWVudFNldHVwIiwicmVzb3VyY2VUeXBlcyIsImFjaGlldmVtZW50U2VydmljZSIsInNlbGYiLCIkb25Jbml0IiwiYWNoaWV2ZW1lbnRQcm9ncmVzcyIsImdldFByb2dyZXNzU25hcHNob3QiLCJjb25zb2xlIiwibG9nIiwiZ2V0QWNoaWV2ZW1lbnRDbGFzcyIsImFjaFNldHVwIiwicmV0IiwiZ2V0QWNoaWV2ZW1lbnRSYW5rQ2xhc3MiLCJhciIsInJlcyIsInByb2dyZXNzIiwiYWNoaWV2ZW1lbnRzIiwiYWlkIiwibGFzdFJhbmsiLCJhdHRyIiwiJHNjb3BlIiwiYnVpbGRpbmdTZXJ2aWNlIiwicmVzb3VyY2VTZXJ2aWNlIiwiYnVpbGRpbmdzIiwiU3Vic2NyaWJlQnVpbGRpbmdzQ2hhbmdlZEV2ZW50IiwidXBkYXRlQnVpbGRpbmdzIiwiZXZlbnQiLCJidWlsZCIsInR5cGUiLCJmaWx0ZXIiLCJ1bml0cyIsInRyYWl0TmFtZSIsImhhc1RyYWl0IiwiZmFjdG9yeSIsIiRmaWx0ZXIiLCJUcmFpdEluc3BlY3RvciIsImdlbmVEZWZpbml0aW9ucyIsImpvYlR5cGVzIiwiYXR0cmlidXRlcyIsImNyb3Nzb3ZlciIsImcxIiwiZzIiLCJnZW5lQ2FwIiwiZ2VuZVJhdGlvIiwiZyIsImNvcHkiLCJnZW5ldGljT3B0aW9ucyIsImNyb3Nzb3ZlcnJhdGUiLCJtdXRhdGlvblJhdGUiLCJiaXRTdHJpbmdSIiwiYml0U3RyaW5nRyIsInJvdW5kIiwiZ2NkIiwiYSIsImIiLCJsY20iLCJnZXRSZWRHcmVlbkltYWdlIiwiZ2VuZXMiLCJnZW5lc1VubG9ja2VkIiwiYnJlZWRlckdlbmVDYXAiLCJ1bmxvY2tlZCIsIlNUUiIsIklOVCIsIkVORCIsIkNIUiIsIkxDSyIsImdlbmVzVG9Vc2UiLCJ1IiwiYXJyIiwibXVsdGlwbGUiLCJuIiwia2V5IiwiZ2VuZVNpemUiLCJzIiwiYWRkUm93cyIsImNvbnZlcnRSZWRHcmVlbk1hcCIsIm1pbkNvbG9yUmF0aW8iLCJjb2xvclJhdGlvIiwiciIsImJyaWdodCIsImFicyIsImNvbHMiLCJnZXRCYW5pc2hDb3N0IiwiY29zdHMiLCJ0b3RhbCIsInBvdyIsInJlc291cmNlIiwiSEFQUElORVNTIiwicmVzb3VyY2VUeXBlIiwiYW1vdW50IiwiQnJlZWRlciIsInRyYWl0SW5zcGVjdG9yIiwidXBkYXRlIiwicHJvdG90eXBlIiwiZHQiLCJEYXRlIiwiZ2V0VGltZSIsIm1vdGhlciIsImZhdGhlciIsImdlbmVyYXRpb24iLCJjdXJyZW50Sm9iIiwicmVkR3JlZW5JbWFnZSIsInRyYWl0cyIsImdldFRyYWl0cyIsImdldEF0dHJpYnV0ZXMiLCJiYW5pc2hDb3N0IiwiZ2V0UmFuZG9tTmFtZSIsImJyZWVkIiwicGFydG5lciIsIm5ld0lkIiwicDEiLCJwMiIsIm15R2VuZGVyIiwiY2hpbGQiLCJkb20iLCJwMWciLCJwMmciLCJ0cmFpdCIsIm15VHJhaXQiLCJmaXJzdE5hbWUiLCJuYW1lTGlzdDEiLCJuYW1lTGlzdDIiLCJsYXN0TmFtZSIsIm5hbWVMaXN0MyIsIm5hbWVMaXN0NCIsIm5hbWVMaXN0NSIsImdldEF0dHJpYnV0ZSIsImxvZ1NlcnZpY2UiLCJQb3B1bGF0aW9uIiwiY3VycmVudEdlbmVyYXRpb24iLCJicmVlZGVycyIsImJyZWVkZXJMaW1pdCIsIm5ld2Jvcm5MaW1pdCIsIm1heFNpemUiLCJicmVlZGVyTXV0YXRpb25DaGFuY2UiLCJicmVlZGVyR2VuZXNVbmxvY2tlZCIsImluaXRpYWxTaXplIiwibWVtYmVycyIsIm0iLCJtZW1iZXIiLCJ1bml0IiwiY3JlYXRlSW5pdGlhbFBvcHVsYXRpb24iLCJuZXdib3JucyIsIm5ld2Jvcm4iLCJuYiIsImdldFN0YXRlIiwiY291bnQiLCJwb3B1bGF0aW9uIiwiZ24iLCJpbmRleE9mIiwicmVjIiwiaXNCcmVlZGluZyIsImhhc01hbGUiLCJoYXNGZW1hbGUiLCJnZXRCeUlkIiwiZ2V0QnlHZW5lcmF0aW9uIiwicHJvY2Vzc05ld2Jvcm5GYXRlIiwiZmF0ZSIsImluZGV4IiwibXNnIiwic3BsaWNlIiwiZXJyb3IiLCJsb2dCcmVlZE1lc3NhZ2UiLCJ0cmFpdERlZmluaXRpb25zIiwiYnVpbGRUcmFpdHMiLCJ0ZCIsIm1ldCIsInVuc2hpZnQiLCJoIiwidGRnIiwidiIsInN0ckJhc2UiLCJpbnRCYXNlIiwiZW5kQmFzZSIsImNockJhc2UiLCJsY2tCYXNlIiwiYXR0cmlidXRlIiwic3FydCIsImNoZWNrZWQiLCJnZXRUcmFpdEJ5TmFtZSIsInQiLCJnZXRSZXF1aXJlZEdlbmVzUmVjdXJzaXZlIiwiaXNEZWZpbmVkIiwicmVxdWlyZWRUcmFpdHMiLCJyZXF1aXJlZFRyYWl0IiwicmVxIiwiYXBwIiwidGVtcGxhdGUiLCJnYW1lTG9vcFNlcnZpY2UiLCJnYW1lU3RhdGVzIiwiY3VycmVudFN0YXRlIiwidG9nZ2xlU3RhdGUiLCJSVU5OSU5HIiwiUEFVU0VEIiwic2V0U3RhdGUiLCJnZXRJY29uIiwicmVzZXRTYXZlIiwiaGFyZFJlc2V0Iiwic2F2ZUdhbWUiLCJsb2dUeXBlcyIsIm1lc3NhZ2VzIiwiU3Vic2NyaWJlTmV3TWVzc2FnZUV2ZW50IiwicmVjZWl2ZU1lc3NhZ2VzIiwiZ2V0TG9nQ2xhc3MiLCJwcmVmaXgiLCJHRU5FUkFMIiwiQUNISUVWRU1FTlQiLCJCUkVFRCIsIldPUksiLCIkIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0Iiwic2VydmljZSIsIm1heE1lc3NhZ2VzIiwiY2xlYXJMb2ciLCJsb2dHZW5lcmFsTWVzc2FnZSIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJub3ciLCIkZW1pdCIsImxvZ0FjaGlldmVtZW50TWVzc2FnZSIsImxvZ1dvcmtNZXNzYWdlIiwic2NvcGUiLCJjYWxsYmFjayIsImhhbmRsZXIiLCIkb24iLCJiaW5kIiwicG9wdWxhdGlvblNlcnZpY2UiLCJ3b3JrZXJTZXJ2aWNlIiwibWF4UG9wdWxhdGlvbiIsIm1heEJyZWVkZXJzIiwiU3Vic2NyaWJlUG9wdWxhdGlvblVwZGF0ZUV2ZW50IiwidXBkYXRlUG9wdWxhdGlvbiIsIlN1YnNjcmliZUJyZWVkZXJVcGRhdGVFdmVudCIsInVwZGF0ZUJyZWVkZXJzIiwiU3Vic2NyaWJlTmV3UmV3YXJkRXZlbnQiLCJyZXdhcmRFYXJuZWQiLCJyZXdhcmQiLCJ1cGRhdGVHZW5lIiwiZ2VuZUluZGV4IiwiZ2VuZVZhbHVlcyIsInVwZGF0ZU1lbWJlciIsImFzc2lnbiIsInVuaXRpZCIsImpvYlR5cGUiLCJhZGRXb3JrZXIiLCJhZGRCcmVlZGVyIiwiZHJvcHBlZCIsImRyYWdJZCIsImRyb3BJZCIsInJlbGF0aXZlUG9zIiwiZHJhZyIsImVsZW1lbnQiLCJkYXRhIiwicmVtb3ZlQnJlZWRlciIsInN0ZXBzU2luY2VCcmVlZCIsImJyZWVkU3RlcHMiLCJkZWNpZGVGYXRlIiwiY2FuQnJlZWQiLCJtb2RlIiwiZGlzcGxheSIsIiR1aWJNb2RhbCIsImJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUiLCJjYW5CYW5pc2giLCJjb3N0IiwiZ2V0UmVzb3VyY2UiLCJhc3NpZ25NZSIsImRvQXNzaWduIiwic3BlbnQiLCJjaGFuZ2VSZXNvdXJjZSIsIiRpZCIsIiR0eXBlIiwiZ2V0R2VuZVRyYWl0UmFuZ2VTdHlsZSIsInRyYWl0UmFuZ2UiLCJnZXRHZW5lUmFuZ2VTdHlsZSIsImdlbmUiLCJyYW5nZSIsImdldEdlbmVWYWx1ZVN0eWxlIiwiaW1hZ2VIb3ZlciIsImhvdmVyRXZlbnQiLCJhdHRycyIsImltZ1dpZHRoIiwidGFyZ2V0IiwiY2xpZW50V2lkdGgiLCJvZmZzZXRYIiwiYXR0clNpemUiLCJob3ZlckF0dHIiLCJzaG93RGV0YWlscyIsIm9wZW4iLCJyZXNvbHZlIiwidHJhbnNjbHVkZSIsImJveFRpdGxlSHRtbCIsInJlcXVpcmUiLCJtYWluQ3RybCIsImJveFRpdGxlIiwibWF4SGVpZ2h0IiwibWF4SGVpZ2h0T3ZlcmlkZSIsInBsYXllckJveEN0cmwiLCJpbnB1dCIsIm1hdGNoZXMiLCJub25tYXRjaGVzIiwiSlNPTiIsInBhcnNlIiwiY3JpdGVyaWFNZXQiLCJzbGljZSIsIm1hcCIsIk9sZFZhbHVlIiwiT2xkTWluIiwiT2xkTWF4IiwiTmV3TWluIiwiTmV3TWF4Iiwib3MiLCJ3IiwibWFyZ2luTGVmdCIsInRnIiwibCIsInBvc2l0aW9uIiwidG9wIiwiYm90dG9tIiwiYm9yZGVyIiwiYnJlZWRlckFzc2lnbiIsImNyaXRlcmlhIiwiZ2V0Q3VzdG9tRmlsdGVyIiwiYyIsInZhbCIsInN0cmluZ2lmeSIsImRlbGV0ZUNyaXRlcmlhIiwib3BlblRyYWl0U2VsZWN0b3IiLCJtb2RhbEluc3RhbmNlIiwiYW5pbWF0aW9uIiwic2l6ZSIsInRoZW4iLCJwYXJlbnQiLCJvcmRlckJ5IiwiZ2V0V29ya2VySWNvbiIsImNsb3NlIiwiZGlzbWlzcyIsInRyYWl0RW50ZXIiLCJ0cmFpdExlYXZlIiwic2VsZWN0IiwiJHZhbHVlIiwib2siLCJjYW5jZWwiLCJyZXNvdXJjZXMiLCJTdWJzY3JpYmVSZXNvdXJjZUNoYW5nZWRFdmVudCIsInJlc291cmNlQ2hhbmdlZCIsIlN1YnNjcmliZVJlc291cmNlTGltaXRDaGFuZ2VkRXZlbnQiLCJyZXNvdXJjZUxpbWl0Q2hhbmdlZCIsIlN1YnNjcmliZVJlc291cmNlRW5hYmxlZEV2ZW50IiwicmVzb3VyY2VFbmFibGVkIiwiZ2V0UmVzb3VyY2VzU25hcHNob3QiLCJ3b3JrZXJzIiwiU3Vic2NyaWJlV29ya2Vyc0NoYW5nZWRFdmVudCIsInVwZGF0ZVdvcmtlcnMiLCJnZXRVbmxvY2tlZFJlc291cmNlcyIsImhhc093blByb3BlcnR5IiwiZ2V0V29ya2VyQ291bnQiLCJyZXNvdXJjZUtleSIsImppZHMiLCJiaXQiLCJkZWZhdWx0QnVpbGRpbmdzIiwicGVya3MiLCJ1cGRhdGVQcm9ncmVzcyIsImFjaFByb2dyZXNzIiwibmV4dFJhbmsiLCJnZXROZXh0UmFua0Ftb3VudCIsIm9sZHZhbCIsIm5ld3ZhbCIsImN1bXVsYXRpdmUiLCJyYyIsInJhbmtzIiwiYW1vdW50UmVxdWlyZWQiLCJnZXRBY2hpZXZlbWVudE1lc3NhZ2UiLCJhY2hpZXZlbWVudCIsInBjIiwicCIsImFwcGx5UGVyayIsInBpZCIsInBlcmtTZXR1cCIsIm9uY2UiLCJwZXJrU2VhcmNoIiwiZ2V0UGVya01lc3NhZ2UiLCJ0b1VUQ1N0cmluZyIsImN1cnJlbnRBbW91bnQiLCJwcm9wIiwibG9nbXNnIiwiZGVzYyIsInBhcmFtcyIsImFtdCIsImJ1aWxkaW5nVHlwZSIsInBsdXJhbCIsImxhc3RTbmFwc2hvdCIsImluaXRpYWxpemVkIiwibG9hZFN0YXRlIiwibWVyZ2UiLCJoYW5kbGVSZXNvdXJjZUNoYW5nZSIsInNhdmVTdGF0ZSIsImJ1aWxkaW5nIiwicHVyY2hhc2VkIiwiZ2lmdGVkIiwibXVsdGlwbGllciIsImdldEJ1aWxkaW5nU25hcHNob3QiLCJzbmFwc2hvdCIsIm5leHRDb3N0IiwiY2FsY3VsYXRlTmV4dENvc3QiLCJnZXRTaXplIiwiZGVzY3JpcHRpb24iLCJmb3JtYXREZXNjcmlwdGlvbiIsIm93bmVkIiwiY29zdFRvQnVpbGQiLCJjYW5CdWlsZCIsImVxdWFscyIsInVzZSIsInVwZGF0ZVN0b3JhZ2UiLCJ1cGRhdGVIb3VzaW5nIiwidXBkYXRlTnVyc2VyeSIsIm5vb3AiLCJ0eXBlTXVsdCIsImJyZWVkaW5nU2l6ZU11bHRpcGxpZXIiLCJzZXRCcmVlZGVyTGltaXQiLCJuZXdib3JuU2l6ZU11bHRpcGxpZXIiLCJzZXROdXJzZXJ5TGltaXQiLCJzdG9yYWdlU2l6ZU11bHRpcGxpZXIiLCJydCIsInN0b3JlcyIsIm5ld0Ftb3VudCIsInNldFJlc291cmNlTGltaXQiLCJob3VzaW5nU2l6ZU11bHRpcGxpZXIiLCJzZXRQb3B1bGF0aW9uTGltaXQiLCJidWlsdCIsInBlcmsiLCJmb3JtYXQiLCJiYXNlQ29zdCIsIm5leHRBbW91bnQiLCJjb3N0TXVsdGlwbGllciIsIiR3aW5kb3ciLCJzYXZlVGltZSIsInN0ZXBUaW1lTXMiLCJsYXN0VGltZSIsImdhbWVMb29wIiwibmV3U3RhdGUiLCJzdGVwIiwic3RlcHMiLCIkYXBwbHkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJTdWJzY3JpYmVHYW1lTG9vcEV2ZW50IiwiZ2FtZVNhdmVLZXkiLCJkZWZhdWx0U3RhdGUiLCJMWlN0cmluZyIsImhhbmRsZUxvb3AiLCJzdGVwc1NpbmNlU2F2ZSIsImF1dG9TYXZlU3RlcHMiLCJqc29uIiwiZGVjb21wcmVzc0Zyb21CYXNlNjQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2F2ZWRTdGF0ZSIsImZyb21Kc29uIiwiZ2FtZVN0YXRlIiwic3RhcnRHYW1lIiwicG9wdWxhdGlvblNlcnZpY2VTdGF0ZSIsInJlc291cmNlU2VydmljZVN0YXRlIiwiYWNoaWV2ZW1lbnRTZXJ2aWNlU3RhdGUiLCJidWlsZGluZ1NlcnZpY2VTdGF0ZSIsIndvcmtlclNlcnZpY2VTdGF0ZSIsImdhbWVMb29wU2VydmljZVN0YXRlIiwicmVtb3ZlSXRlbSIsImF1dG9zYXZlIiwic2F2ZSIsImNvbXByZXNzVG9CYXNlNjQiLCJ0b0pzb24iLCJzZXRJdGVtIiwicG9wdWxhdGlvblN0YXRlIiwic2VuZEJyZWVkZXJVcGRhdGVFdmVudCIsInNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQiLCJoYW5kbGVHYW1lTG9vcCIsInBvcFVwZGF0ZWQiLCJvZmZzcHJpbmciLCJnZW5kZXJUb0FkZCIsInNldFVuaXRKb2IiLCJqb2IiLCJqb2JOYW1lIiwibmV3TGltaXQiLCJvdmVycmlkZUFsbE9uIiwiZGVmYXVsdExpbWl0cyIsIkRJUlQiLCJCUklDS1MiLCJXQVRFUiIsIldPT0QiLCJHT0xEIiwiU0NJRU5DRSIsIlNURUVMIiwiRVZPQ09JTiIsImFkZFJlc291cmNlTXVsdGlwbGllciIsImFjdHVhbEFtb3VudCIsIndvcmtlciIsImppZCIsImVsYXBzZWQiLCJzdGVwc1NpbmNlV29yayIsImJhc2VXb3JrZXJTdGVwcyIsImdhdGhlckFtb3VudCIsImJhc2VBbW91bnQiLCJnZXRXb3JrZXJzU25hcHNob3QiLCJub3RXb3JraW5nIiwidG1wV29ya2VycyIsImdyb3VwIiwianQiLCJsYXN0QnJlZWRlcklEIiwibmV3QnJlZWRlckdlbmRlciIsImtpbGxCcmVlZGVyIiwiYWRkTmV3QnJlZWRlciIsImdlbmRlciIsImV4cGFuZG8iLCJyYW5kb21pemVOYW1lIiwicmFuZG9taXplIiwicmFuZG9taXplQWxsIiwiJHRpbWVvdXQiLCJlIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiLCJjb25zdGFudCIsImFjaGlldmVtZW50R3JvdXBzIiwiYWlkcyIsIkFfQklSVEhTIiwiQV9ESVJUX0UiLCJBX0JSSUNLU19FIiwiQV9TVEVFTF9FIiwiQV9XQVRFUl9FIiwiQV9XT09EX0UiLCJBX0dPTERfRSIsIkFfU0NJRU5DRV9FIiwiQV9IQVBQSU5FU1NfRSIsIkFfRVZPQ09JTl9FIiwiQV9TT0RIT1VTRV9CIiwiQV9ESVJUUElMRV9CIiwiQV9XT09EU0hFRF9CIiwiQV9XQVRFUkhPTEVfQiIsIkFfTElCUkFSWV9CIiwiUF9SX1VOTE9DSyIsIlBfUl9NVUxUSVBMSUVSIiwiUF9SX0JPTlVTIiwiUF9HX0VOSEFOQ0VEIiwiUF9CX1VOTE9DSyIsIlBfQl9CT05VUyIsIlBfQl9NVUxUSVBMSUVSIiwiQlVOR0FMT1ciLCJOVVJTRVJZIiwiU09ESE9VU0UiLCJESVJUUElMRSIsIldPT0RTSEVEIiwiV0FURVJIT0xFIiwiV0VMTCIsInByb2R1Y2VzIiwiTElCUkFSWSIsIm1heGNvdW50IiwicmlkIiwiSURMRSIsIkRJUlRfR0FUSEVSIiwiV09PRF9HQVRIRVIiLCJXQVRFUl9HQVRIRVIiLCJSRVNFQVJDSEVSIl0sIm1hcHBpbmdzIjoiQUFFQSxRQUFBQSx1QkFBQUMsRUFBQUMsR0FDQSxNQUFBQyxNQUFBQyxNQUFBRCxLQUFBRSxVQUFBSCxFQUFBRCxFQUFBLEdBQUFBLElDNEJBLFdBRUEsUUFBQUssR0FBQUMsRUFBQUMsR0FXQSxJQUZBLEdBQUFDLE1BRUFELEVBQUEsRUFBQUEsSUFDQUMsRUFBQUMsS0FBQUMsT0FBQUMsYUFBQSxJQUFBTCxJQUNBQSxJQUFBLENBR0EsT0FBQUUsR0FBQUksS0FBQSxJQUdBLFFBQUFDLEdBQUFDLEVBQUFDLEdBVUEsSUFSQSxHQUFBQyxHQUVBQyxFQUVBQyxFQUhBQyxFQUFBTCxFQUFBTSxPQUVBQyxFQUFBRixFQUFBTCxFQUFBLEdBQUFNLE9BQUEsRUFFQUUsRUFBQSxHQUNBZCxLQUVBTyxFQUFBLEVBQUFBLElBQ0FPLEdBQUEsSUFHQSxLQUFBTixFQUFBLEVBQUFBLEVBQUFHLEVBQUFILElBQUEsQ0FDQSxJQUFBQyxFQUFBLEVBQUFBLEVBQUFJLEVBQUFKLElBQ0FDLEVBQUFKLEVBQUFFLEdBQUFDLEdBQ0FULEVBQUFDLEtBQUFDLE9BQUFDLGFBQUFPLEVBQUEsSUFDQVIsT0FBQUMsYUFBQU8sRUFBQSxJQUNBUixPQUFBQyxhQUFBTyxFQUFBLElBRUFWLEdBQUFDLEtBQUFhLEdBR0EsTUFBQWQsR0FBQUksS0FBQSxJQUdBLFFBQUFXLEdBQUFULEVBQUFVLEdBRUEsR0FLQUMsR0FBQUMsRUFBQUMsRUFMQUMsRUFBQWQsRUFBQU0sT0FDQVMsRUFBQUMsU0FBQUYsRUFBQUosR0FDQU8sRUFBQUgsRUFBQWQsRUFBQSxHQUFBTSxPQUFBLEVBQ0FZLEVB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QUFBbkksS0FBQSxRQUFBK0YsSUFBQSxRQUFBb0MsSUFBQSxRQUFBbkksS0FBQSxRQUFBK0YsSUFBQSxRQUFBb0MsSUFBQSxRQUFBbkksS0FBQSxRQUFBK0YsSUFBQSxRQUFBb0MsSUFBQSxRQUFBbkksS0FBQSxRQUFBK0YsSUFBQSxRQUFBb0MsSUFBQSxRQUFBbkksS0FBQSxRQUFBK0YsSUFBQSx1QkFBQW9DLElBQUEsV0FBQW5JLEtBQUEsUUFBQStGLElBQUEsa0JBQUFvQyxJQUFBLGdCQUFBbkksS0FBQSxRQUFBK0YsSUFBQSxnQkFBQW9DLElBQUEsWUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsUUFBQW9DLElBQUEsUUFBQW5JLEtBQUEsUUFBQStGLElBQUEsV0FBQW9DLElBQUEsWUFBQW5JLEtBQUEsUUFBQStGLElBQUEsaUJBQUFvQyxJQUFBLGNBQUFuSSxLQUFBLFFBQUErRixJQUFBLFlBQUFvQyxJQUFBLFlBQUFuSSxLQUFBLFFBQUErRixJQUFBLFlBQUFvQyxJQUFBLFlBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFFBQUFvQyxJQUFBLFFBQUFuSSxLQUFBLFFBQUErRixJQUFBLFNBQUFvQyxJQUFBLE9BQUFuSSxLQUFBLFVBQ0FxZixTQUFBLHFCQUFBM2hCLEtBQUEsV0FBQTRFLFFBQUEsR0FBQSxJQUFBLE1BQUEsRUFBQSxHQUFBLE1BQUE4SCxnQkFBQSxVQUFBMU0sS0FBQSxTQUFBNEUsUUFBQSxHQUFBLEtBQUEsTUFBQSxFQUFBLEdBQUEsTUFBQThILGdCQUFBLFlBQUExTSxLQUFBLGFBQUE0RSxRQUFBLEVBQUEsSUFBQSxNQUFBLEVBQUEsSUFBQSxNQUFBLEVBQUEsSUFBQSxNQUFBLEVBQUEsSUFBQSxNQUFBLElBQUEsS0FBQSxRQUFBNUUsS0FBQSxzQkFBQTRFLFFBQUEsRUFBQSxFQUFBLE1BQUEsR0FBQSxFQUFBLE1BQUEsR0FBQSxFQUFBLE1BQUEsR0FBQSxF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TUFBQWtFLElBQUEsT0FBQTlqQixLQUFBLE9BQUFxWixLQUFBLGtEQUFBL1csS0FBQSxPQUFBeWQsU0FBQStELElBQUEsVUFBQTlqQixLQUFBLFlBQUFxWixLQUFBLG9EQUFBL1csS0FBQSxTQ0RBaEQsUUFBQUMsT0FBQSx1QkFDQW9pQixTQUFBLFlBQUFvQyxNQUFBNUQsSUFBQSxPQUFBbmdCLEtBQUEsT0FBQXlhLFlBQUEsc0JBQUFoVSxTQUFBLFlBQUE2WixnQkFBQSxFQUFBRSxXQUFBLEVBQUF6YixTQUFBLEdBQUFpZixhQUFBN0QsSUFBQSxjQUFBbmdCLEtBQUEsY0FBQXlhLFlBQUEsb0JBQUFoVSxTQUFBLE9BQUE2WixnQkFBQSxFQUFBRSxXQUFBLEVBQUF6YixTQUFBLEdBQUFrZixhQUFBOUQsSUFBQSxjQUFBbmdCLEtBQUEsZUFBQXlhLFlBQUEscUJBQUFoVSxTQUFBLE9BQUE2WixnQkFBQSxFQUFBRSxXQUFBLEVBQUF6YixTQUFBLEdBQUFtZixjQUFBL0QsSUFBQSxlQUFBbmdCLEtBQUEsZ0JBQUF5YSxZQUFBLDJDQUFBaFUsU0FBQSxRQUFBNlosZ0JBQUEsRUFBQUUsV0FBQSxFQUFBemIsU0FBQSxHQUFBb2YsWUFBQWhFLElBQUEsYUFBQW5nQixLQUFBLGFBQUF5YSxZQUFBLGlCQUFBaFUsU0FBQSxVQUFBNlosZ0JBQUEsRUFBQUUsV0FBQSxFQUFBemIsU0FBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZnVuY3Rpb24gcmFuZG9tSW50RnJvbUludGVydmFsKG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTtcclxufVxyXG5cclxuZ2FtZS5zZXJ2aWNlKCdnYW1lTG9vcFNlcnZpY2UnLCBbJyR3aW5kb3cnLCAnJHJvb3RTY29wZScsICdnYW1lU3RhdGVzJywgJ2xvZ1NlcnZpY2UnLFxyXG4gICAgZnVuY3Rpb24oJHdpbmRvdywgJHJvb3RTY29wZSwgZ2FtZVN0YXRlcywgbG9nU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICAgICAgc2VsZi5zYXZlVGltZSA9IHN0YXRlLnNhdmVUaW1lIHx8IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHNlbGYuc3RlcFRpbWVNcyA9IHN0YXRlLnN0ZXBUaW1lTXMgfHwgc2VsZi5zdGVwVGltZU1zIHx8IDEwMDA7XHJcbiAgICAgICAgICAgIHNlbGYubGFzdFRpbWUgPSBzZWxmLnNhdmVUaW1lIC0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBzdGF0ZS5jdXJyZW50U3RhdGUgfHwgc2VsZi5jdXJyZW50U3RhdGUgfHwgZ2FtZVN0YXRlcy5SVU5OSU5HO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5nYW1lTG9vcCgwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3RlcFRpbWVNczogc2VsZi5zdGVwVGltZU1zLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlOiBzZWxmLmN1cnJlbnRTdGF0ZSxcclxuICAgICAgICAgICAgICAgIHNhdmVUaW1lOiBzZWxmLnNhdmVUaW1lXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNldFN0YXRlID0gZnVuY3Rpb24obmV3U3RhdGUpIHtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBuZXdTdGF0ZTtcclxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlID09PSBnYW1lU3RhdGVzLlBBVVNFRCkgbG9nU2VydmljZS5sb2dHZW5lcmFsTWVzc2FnZShcIkdhbWUgcGF1c2VkLlwiKTtcclxuICAgICAgICAgICAgZWxzZSBsb2dTZXJ2aWNlLmxvZ0dlbmVyYWxNZXNzYWdlKFwiR2FtZSByZXN1bWVkLlwiKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdhbWVMb29wID0gZnVuY3Rpb24oc3RlcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuc2F2ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB2YXIgc3RlcHMgPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoc3RlcCAtIHNlbGYubGFzdFRpbWUgPj0gKHNlbGYuc3RlcFRpbWVNcyAqIChzdGVwcyArIDEpKSkge1xyXG4gICAgICAgICAgICAgICAgc3RlcHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmxhc3RUaW1lICs9IChzZWxmLnN0ZXBUaW1lTXMgKiBzdGVwcyk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRTdGF0ZSA9PSBnYW1lU3RhdGVzLlJVTk5JTkcgJiYgc3RlcHMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgkcm9vdFNjb3BlLiRlbWl0KCdnYW1lTG9vcEV2ZW50Jywgc3RlcHMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmdhbWVMb29wLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuU3Vic2NyaWJlR2FtZUxvb3BFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdnYW1lTG9vcEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7XHJcblxyXG5nYW1lLnNlcnZpY2UoJ2dhbWVTZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnZ2FtZVNhdmVLZXknLCAnZGVmYXVsdFN0YXRlJywgJ2xvZ1NlcnZpY2UnLCAnZ2FtZUxvb3BTZXJ2aWNlJywgJ3BvcHVsYXRpb25TZXJ2aWNlJywgJ2FjaGlldmVtZW50U2VydmljZScsXHJcbiAgICAncmVzb3VyY2VTZXJ2aWNlJywgJ2J1aWxkaW5nU2VydmljZScsICdMWlN0cmluZycsICd0cmFpdERlZmluaXRpb25zJywgJ3dvcmtlclNlcnZpY2UnLFxyXG4gICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgZ2FtZVNhdmVLZXksIGRlZmF1bHRTdGF0ZSwgbG9nU2VydmljZSwgZ2FtZUxvb3BTZXJ2aWNlLCBwb3B1bGF0aW9uU2VydmljZSwgYWNoaWV2ZW1lbnRTZXJ2aWNlLFxyXG4gICAgICAgIHJlc291cmNlU2VydmljZSwgYnVpbGRpbmdTZXJ2aWNlLCBMWlN0cmluZywgdHJhaXREZWZpbml0aW9ucywgd29ya2VyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIganNvbiA9IExaU3RyaW5nLmRlY29tcHJlc3NGcm9tQmFzZTY0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKGdhbWVTYXZlS2V5KSk7XHJcbiAgICAgICAgICAgIHZhciBzYXZlZFN0YXRlID0gKGpzb24pID8gYW5ndWxhci5mcm9tSnNvbihqc29uKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgc2VsZi5nYW1lU3RhdGUgPSBzdGF0ZSB8fCBzYXZlZFN0YXRlIHx8IGRlZmF1bHRTdGF0ZTtcclxuICAgICAgICAgICAgc2VsZi5hdXRvU2F2ZVN0ZXBzID0gc2VsZi5nYW1lU3RhdGUuYXV0b1NhdmVTdGVwcyB8fCBzZWxmLmF1dG9TYXZlU3RlcHMgfHwgMTA7XHJcbiAgICAgICAgICAgIHNlbGYuc3RhcnRHYW1lKCk7XHJcbiAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZVNhdmUgPSAwO1xyXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lTG9vcFNlcnZpY2UuU3Vic2NyaWJlR2FtZUxvb3BFdmVudCgkcm9vdFNjb3BlLCBoYW5kbGVMb29wKTtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zdGFydEdhbWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbG9nU2VydmljZS5pbml0KHNlbGYuZ2FtZVN0YXRlLmNsZWFyTG9nKTtcclxuXHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLmluaXQoXHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLm1lcmdlKHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTdGF0ZS5wb3B1bGF0aW9uU2VydmljZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2FtZVN0YXRlLnBvcHVsYXRpb25TZXJ2aWNlU3RhdGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUucmVzb3VyY2VTZXJ2aWNlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nYW1lU3RhdGUucmVzb3VyY2VTZXJ2aWNlU3RhdGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFjaGlldmVtZW50U2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUuYWNoaWV2ZW1lbnRTZXJ2aWNlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nYW1lU3RhdGUuYWNoaWV2ZW1lbnRTZXJ2aWNlU3RhdGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGJ1aWxkaW5nU2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUuYnVpbGRpbmdTZXJ2aWNlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nYW1lU3RhdGUuYnVpbGRpbmdTZXJ2aWNlU3RhdGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgd29ya2VyU2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUud29ya2VyU2VydmljZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2FtZVN0YXRlLndvcmtlclNlcnZpY2VTdGF0ZSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGdhbWVMb29wU2VydmljZS5pbml0KFxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZSh7fSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3RhdGUuZ2FtZUxvb3BTZXJ2aWNlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nYW1lU3RhdGUuZ2FtZUxvb3BTZXJ2aWNlU3RhdGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuXHJcblxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuaGFyZFJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGdhbWVTYXZlS2V5KTtcclxuICAgICAgICAgICAgc2VsZi5pbml0KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5zYXZlR2FtZSA9IGZ1bmN0aW9uKGF1dG9zYXZlKSB7XHJcbiAgICAgICAgICAgIHZhciBzYXZlU3RhdGUgPSBhbmd1bGFyLmNvcHkoc2VsZi5nYW1lU3RhdGUpO1xyXG4gICAgICAgICAgICBzYXZlU3RhdGUucG9wdWxhdGlvblNlcnZpY2VTdGF0ZSA9IGFuZ3VsYXIuY29weShwb3B1bGF0aW9uU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlLnJlc291cmNlU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KHJlc291cmNlU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlLmFjaGlldmVtZW50U2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KGFjaGlldmVtZW50U2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlLmJ1aWxkaW5nU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KGJ1aWxkaW5nU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlLmdhbWVMb29wU2VydmljZVN0YXRlID0gYW5ndWxhci5jb3B5KGdhbWVMb29wU2VydmljZS5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgc2F2ZVN0YXRlLndvcmtlclNlcnZpY2VTdGF0ZSA9IGFuZ3VsYXIuY29weSh3b3JrZXJTZXJ2aWNlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgICAgICB2YXIgc2F2ZSA9IExaU3RyaW5nLmNvbXByZXNzVG9CYXNlNjQoYW5ndWxhci50b0pzb24oYW5ndWxhci5jb3B5KHNhdmVTdGF0ZSkpKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZ2FtZVNhdmVLZXksIHNhdmUpO1xyXG4gICAgICAgICAgICBpZiAoYXV0b3NhdmUpXHJcbiAgICAgICAgICAgICAgICBsb2dTZXJ2aWNlLmxvZ0dlbmVyYWxNZXNzYWdlKCdHYW1lIGF1dG9zYXZlZC4nKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgbG9nU2VydmljZS5sb2dHZW5lcmFsTWVzc2FnZSgnR2FtZSBzYXZlZC4nKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTG9vcChldmVudCwgc3RlcHMpIHtcclxuICAgICAgICAgICAgc2VsZi5zdGVwc1NpbmNlU2F2ZSArPSBzdGVwcztcclxuXHJcbiAgICAgICAgICAgIC8vIHRlc3RpbmdcclxuICAgICAgICAgICAgdmFyIGQgPSByZXNvdXJjZVNlcnZpY2UuZ2V0UmVzb3VyY2UoJ0RJUlQnKTtcclxuICAgICAgICAgICAgLy8gaWYgKGQgPj0gMjUpXHJcbiAgICAgICAgICAgIC8vICAgICByZXNvdXJjZVNlcnZpY2UuY2hhbmdlUmVzb3VyY2UoXCJESVJUXCIsIC1kKTtcclxuICAgICAgICAgICAgLy8gZWxzZVxyXG4gICAgICAgICAgICAvLyAgICAgcmVzb3VyY2VTZXJ2aWNlLmNoYW5nZVJlc291cmNlKFwiRElSVFwiLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLnN0ZXBzU2luY2VTYXZlID49IHNlbGYuYXV0b1NhdmVTdGVwcykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlR2FtZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZVNhdmUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXSk7IiwiLyohXHJcbiAqIEdlbmVyYXRlIEJpdG1hcCBEYXRhIFVSTFxyXG4gKiBodHRwOi8vbXJjb2xlcy5jb20vbG93LXJlcy1wYWludC9cclxuICpcclxuICogQ29weXJpZ2h0IDIwMTAsIFBldGVyIENvbGVzXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZXMuXHJcbiAqIGh0dHA6Ly9tcmNvbGVzLmNvbS9tZWRpYS9taXQtbGljZW5zZS50eHRcclxuICpcclxuICogRGF0ZTogVHVlIE9jdCAyNiAwMDowMDowMCAyMDEwIC0wNTAwXHJcbiAqL1xyXG5cclxuLypcclxuICogQ29kZSB0byBnZW5lcmF0ZSBCaXRtYXAgaW1hZ2VzICh1c2luZyBkYXRhIHVybHMpIGZyb20gcm93cyBvZiBSR0IgYXJyYXlzLlxyXG4gKiBTcGVjaWZpY2FsbHkgZm9yIHVzZSB3aXRoIGh0dHA6Ly9tcmNvbGVzLmNvbS9sb3ctcmVzdC1wYWludC9cclxuICpcclxuICogUmVzZWFyY2g6XHJcbiAqXHJcbiAqIFJGQyAyMzk3IGRhdGEgVVJMXHJcbiAqIGh0dHA6Ly93d3cueHM0YWxsLm5sL353cmIvQXJ0aWNsZXMvQXJ0aWNsZV9JTUdfUkZDMjM5N19QMV8wMS5odG1cclxuICpcclxuICogQk1QIGZpbGUgRm9ybWF0XHJcbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQk1QX2ZpbGVfZm9ybWF0I0V4YW1wbGVfb2ZfYV8yLkMzLjk3Ml9QaXhlbC4yQ18yNC1CaXRfQml0bWFwXy4yOFdpbmRvd3NfVjNfRElCLjI5XHJcbiAqXHJcbiAqIEJNUCBOb3Rlc1xyXG4gKlxyXG4gKiAtIEludGVnZXIgdmFsdWVzIGFyZSBsaXR0bGUtZW5kaWFuLCBpbmNsdWRpbmcgUkdCIHBpeGVscywgZS5nLiwgKDI1NSwgMCwgMCkgLT4gXFx4MDBcXHgwMFxceEZGXHJcbiAqIC0gQml0bWFwIGRhdGEgc3RhcnRzIGF0IGxvd2VyIGxlZnQgKGFuZCByZWFkcyBhY3Jvc3Mgcm93cylcclxuICogLSBJbiB0aGUgQk1QIGRhdGEsIHBhZGRpbmcgYnl0ZXMgYXJlIGluc2VydGVkIGluIG9yZGVyIHRvIGtlZXAgdGhlIGxpbmVzIG9mIGRhdGEgaW4gbXVsdGlwbGVzIG9mIGZvdXIsXHJcbiAqICAgZS5nLiwgYSAyNC1iaXQgYml0bWFwIHdpdGggd2lkdGggMSB3b3VsZCBoYXZlIDMgYnl0ZXMgb2YgZGF0YSBwZXIgcm93IChSLCBHLCBCKSArIDEgYnl0ZSBvZiBwYWRkaW5nXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGZ1bmN0aW9uIF9hc0xpdHRsZUVuZGlhbkhleCh2YWx1ZSwgYnl0ZXMpIHtcclxuICAgICAgICAvLyBDb252ZXJ0IHZhbHVlIGludG8gbGl0dGxlIGVuZGlhbiBoZXggYnl0ZXNcclxuICAgICAgICAvLyB2YWx1ZSAtIHRoZSBudW1iZXIgYXMgYSBkZWNpbWFsIGludGVnZXIgKHJlcHJlc2VudGluZyBieXRlcylcclxuICAgICAgICAvLyBieXRlcyAtIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCB0aGlzIHZhbHVlIHRha2VzIHVwIGluIGEgc3RyaW5nXHJcblxyXG4gICAgICAgIC8vIEV4YW1wbGU6XHJcbiAgICAgICAgLy8gX2FzTGl0dGxlRW5kaWFuSGV4KDI4MzUsIDQpXHJcbiAgICAgICAgLy8gPiAnXFx4MTNcXHgwYlxceDAwXFx4MDAnXHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICg7IGJ5dGVzID4gMDsgYnl0ZXMtLSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbHVlICYgMjU1KSk7XHJcbiAgICAgICAgICAgIHZhbHVlID4+PSA4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfY29sbGFwc2VEYXRhKHJvd3MsIHJvd19wYWRkaW5nKSB7XHJcbiAgICAgICAgLy8gQ29udmVydCByb3dzIG9mIFJHQiBhcnJheXMgaW50byBCTVAgZGF0YVxyXG4gICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICByb3dzX2xlbiA9IHJvd3MubGVuZ3RoLFxyXG4gICAgICAgICAgICBqLFxyXG4gICAgICAgICAgICBwaXhlbHNfbGVuID0gcm93c19sZW4gPyByb3dzWzBdLmxlbmd0aCA6IDAsXHJcbiAgICAgICAgICAgIHBpeGVsLFxyXG4gICAgICAgICAgICBwYWRkaW5nID0gJycsXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKDsgcm93X3BhZGRpbmcgPiAwOyByb3dfcGFkZGluZy0tKSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmcgKz0gJ1xceDAwJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzX2xlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwaXhlbHNfbGVuOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHBpeGVsID0gcm93c1tpXVtqXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocGl4ZWxbMl0pICtcclxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKHBpeGVsWzFdKSArXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShwaXhlbFswXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhZGRpbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfc2NhbGVSb3dzKHJvd3MsIHNjYWxlKSB7XHJcbiAgICAgICAgLy8gU2ltcGxlc3Qgc2NhbGluZyBwb3NzaWJsZVxyXG4gICAgICAgIHZhciByZWFsX2ggPSByb3dzLmxlbmd0aCxcclxuICAgICAgICAgICAgc2NhbGVkX2ggPSBwYXJzZUludChyZWFsX2ggKiBzY2FsZSksXHJcbiAgICAgICAgICAgIHJlYWxfdyA9IHJlYWxfaCA/IHJvd3NbMF0ubGVuZ3RoIDogMCxcclxuICAgICAgICAgICAgc2NhbGVkX3cgPSBwYXJzZUludChyZWFsX3cgKiBzY2FsZSksXHJcbiAgICAgICAgICAgIG5ld19yb3dzID0gW10sXHJcbiAgICAgICAgICAgIG5ld19yb3csIHgsIHk7XHJcblxyXG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCBzY2FsZWRfaDsgeSsrKSB7XHJcbiAgICAgICAgICAgIG5ld19yb3dzLnB1c2gobmV3X3JvdyA9IFtdKTtcclxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHNjYWxlZF93OyB4KyspIHtcclxuICAgICAgICAgICAgICAgIG5ld19yb3cucHVzaChyb3dzW3BhcnNlSW50KHkgLyBzY2FsZSldW3BhcnNlSW50KHggLyBzY2FsZSldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3X3Jvd3M7XHJcbiAgICB9XHJcblxyXG4gICAgd2luZG93LmdlbmVyYXRlQml0bWFwRGF0YVVSTCA9IGZ1bmN0aW9uKHJvd3MsIHNjYWxlKSB7XHJcbiAgICAgICAgLy8gRXhwZWN0cyByb3dzIHN0YXJ0aW5nIGluIGJvdHRvbSBsZWZ0XHJcbiAgICAgICAgLy8gZm9ybWF0dGVkIGxpa2UgdGhpczogW1tbMjU1LCAwLCAwXSwgWzI1NSwgMjU1LCAwXSwgLi4uXSwgLi4uXVxyXG4gICAgICAgIC8vIHdoaWNoIHJlcHJlc2VudHM6IFtbcmVkLCB5ZWxsb3csIC4uLl0sIC4uLl1cclxuXHJcbiAgICAgICAgaWYgKCF3aW5kb3cuYnRvYSkge1xyXG4gICAgICAgICAgICBhbGVydCgnT2ggbm8sIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGJhc2U2NCBlbmNvZGluZyAtIHdpbmRvdy5idG9hKCkhIScpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY2FsZSA9IHNjYWxlIHx8IDE7XHJcbiAgICAgICAgaWYgKHNjYWxlICE9IDEpIHtcclxuICAgICAgICAgICAgcm93cyA9IF9zY2FsZVJvd3Mocm93cywgc2NhbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHJvd3MubGVuZ3RoLCAvLyB0aGUgbnVtYmVyIG9mIHJvd3NcclxuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgPyByb3dzWzBdLmxlbmd0aCA6IDAsIC8vIHRoZSBudW1iZXIgb2YgY29sdW1ucyBwZXIgcm93XHJcbiAgICAgICAgICAgIHJvd19wYWRkaW5nID0gKDQgLSAod2lkdGggKiAzKSAlIDQpICUgNCwgLy8gcGFkIGVhY2ggcm93IHRvIGEgbXVsdGlwbGUgb2YgNCBieXRlc1xyXG4gICAgICAgICAgICBudW1fZGF0YV9ieXRlcyA9ICh3aWR0aCAqIDMgKyByb3dfcGFkZGluZykgKiBoZWlnaHQsIC8vIHNpemUgaW4gYnl0ZXMgb2YgQk1QIGRhdGFcclxuICAgICAgICAgICAgbnVtX2ZpbGVfYnl0ZXMgPSA1NCArIG51bV9kYXRhX2J5dGVzLCAvLyBmdWxsIGhlYWRlciBzaXplIChvZmZzZXQpICsgc2l6ZSBvZiBkYXRhXHJcbiAgICAgICAgICAgIGZpbGU7XHJcblxyXG4gICAgICAgIGhlaWdodCA9IF9hc0xpdHRsZUVuZGlhbkhleChoZWlnaHQsIDQpO1xyXG4gICAgICAgIHdpZHRoID0gX2FzTGl0dGxlRW5kaWFuSGV4KHdpZHRoLCA0KTtcclxuICAgICAgICBudW1fZGF0YV9ieXRlcyA9IF9hc0xpdHRsZUVuZGlhbkhleChudW1fZGF0YV9ieXRlcywgNCk7XHJcbiAgICAgICAgbnVtX2ZpbGVfYnl0ZXMgPSBfYXNMaXR0bGVFbmRpYW5IZXgobnVtX2ZpbGVfYnl0ZXMsIDQpO1xyXG5cclxuICAgICAgICAvLyB0aGVzZSBhcmUgdGhlIGFjdHVhbCBieXRlcyBvZiB0aGUgZmlsZS4uLlxyXG5cclxuICAgICAgICBmaWxlID0gKCdCTScgKyAvLyBcIk1hZ2ljIE51bWJlclwiXHJcbiAgICAgICAgICAgIG51bV9maWxlX2J5dGVzICsgLy8gc2l6ZSBvZiB0aGUgZmlsZSAoYnl0ZXMpKlxyXG4gICAgICAgICAgICAnXFx4MDBcXHgwMCcgKyAvLyByZXNlcnZlZFxyXG4gICAgICAgICAgICAnXFx4MDBcXHgwMCcgKyAvLyByZXNlcnZlZFxyXG4gICAgICAgICAgICAnXFx4MzZcXHgwMFxceDAwXFx4MDAnICsgLy8gb2Zmc2V0IG9mIHdoZXJlIEJNUCBkYXRhIGxpdmVzICg1NCBieXRlcylcclxuICAgICAgICAgICAgJ1xceDI4XFx4MDBcXHgwMFxceDAwJyArIC8vIG51bWJlciBvZiByZW1haW5pbmcgYnl0ZXMgaW4gaGVhZGVyIGZyb20gaGVyZSAoNDAgYnl0ZXMpXHJcbiAgICAgICAgICAgIHdpZHRoICsgLy8gdGhlIHdpZHRoIG9mIHRoZSBiaXRtYXAgaW4gcGl4ZWxzKlxyXG4gICAgICAgICAgICBoZWlnaHQgKyAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBiaXRtYXAgaW4gcGl4ZWxzKlxyXG4gICAgICAgICAgICAnXFx4MDFcXHgwMCcgKyAvLyB0aGUgbnVtYmVyIG9mIGNvbG9yIHBsYW5lcyAoMSlcclxuICAgICAgICAgICAgJ1xceDE4XFx4MDAnICsgLy8gMjQgYml0cyAvIHBpeGVsXHJcbiAgICAgICAgICAgICdcXHgwMFxceDAwXFx4MDBcXHgwMCcgKyAvLyBObyBjb21wcmVzc2lvbiAoMClcclxuICAgICAgICAgICAgbnVtX2RhdGFfYnl0ZXMgKyAvLyBzaXplIG9mIHRoZSBCTVAgZGF0YSAoYnl0ZXMpKlxyXG4gICAgICAgICAgICAnXFx4MTNcXHgwQlxceDAwXFx4MDAnICsgLy8gMjgzNSBwaXhlbHMvbWV0ZXIgLSBob3Jpem9udGFsIHJlc29sdXRpb25cclxuICAgICAgICAgICAgJ1xceDEzXFx4MEJcXHgwMFxceDAwJyArIC8vIDI4MzUgcGl4ZWxzL21ldGVyIC0gdGhlIHZlcnRpY2FsIHJlc29sdXRpb25cclxuICAgICAgICAgICAgJ1xceDAwXFx4MDBcXHgwMFxceDAwJyArIC8vIE51bWJlciBvZiBjb2xvcnMgaW4gdGhlIHBhbGV0dGUgKGtlZXAgMCBmb3IgMjQtYml0KVxyXG4gICAgICAgICAgICAnXFx4MDBcXHgwMFxceDAwXFx4MDAnICsgLy8gMCBpbXBvcnRhbnQgY29sb3JzIChtZWFucyBhbGwgY29sb3JzIGFyZSBpbXBvcnRhbnQpXHJcbiAgICAgICAgICAgIF9jb2xsYXBzZURhdGEocm93cywgcm93X3BhZGRpbmcpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICdkYXRhOmltYWdlL2JtcDtiYXNlNjQsJyArIGJ0b2EoZmlsZSk7XHJcbiAgICB9O1xyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuLy9cclxuLy8gQ29kZSBzcGVjaWZpYyB0byBsb3cgcmVzIHBhaW50XHJcbi8vXHJcblxyXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgdmFyICRiZ190cmFuc2Zvcm07XHJcblxyXG4gICAgZnVuY3Rpb24gX2Fzc2lnbl9iZ190cmFuc2Zvcm0oYmcpIHtcclxuICAgICAgICAvLyBkaWZmZXJlbnQgYnJvd3NlcnMgcmV0dXJuIHRoZSBjb2xvciBkaWZmZXJlbnRseVxyXG4gICAgICAgIC8vIGxldCdzIHN1cHBvcnQgXCJyZ2IoMTIzLCAwLCA1KVwiLCBcIiNmZmZcIiwgYW5kIFwiI2ZmMDA5OVwiXHJcbiAgICAgICAgaWYgKC9ecmdiXFwoXFxkKywgXFxkKywgXFxkK1xcKSQvLnRlc3QoYmcpKSB7XHJcbiAgICAgICAgICAgICRiZ190cmFuc2Zvcm0gPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgICAgICB4ID0geC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgeFswXSA9IHhbMF0uc3Vic3RyKDQpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHQ7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB4W2ldID0gcGFyc2VJbnQoeFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2UgaWYgKGJnLnN1YnN0cmluZygwLCAxKSA9PSAnIycpIHtcclxuICAgICAgICAgICAgJGJnX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgICAgIHggPSB4LnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBsZW4gPSB4Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoJzB4JyArIHguc3Vic3RyaW5nKGksIGkgKyAxKSArIHguc3Vic3RyaW5nKGksIGkgKyAxKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBsZW47IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludCgnMHgnICsgeC5zdWJzdHJpbmcoaSwgaSArIDIpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhbGVydCgnVW5wYXJzZWFibGUgY29sb3I6ICcgKyBiZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uICRiZ0FzUkdCKGlkKSB7XHJcbiAgICAgICAgdmFyIGJnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICBpZiAoYmcgPT09ICcnKSByZXR1cm4gWzI1NSwgMjU1LCAyNTVdO1xyXG4gICAgICAgIGlmICgkYmdfdHJhbnNmb3JtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgX2Fzc2lnbl9iZ190cmFuc2Zvcm0oYmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJGJnX3RyYW5zZm9ybShiZyk7XHJcbiAgICB9XHJcblxyXG4gICAgd2luZG93LmdlbmVyYXRlTG93UmVzQml0bWFwID0gZnVuY3Rpb24oc2NhbGUpIHtcclxuICAgICAgICAvLyBwaXhlbHMgYXJlIHhfeSBzdGFydGluZyBpbiB0b3AgbGVmdCwgd2UgbmVlZCB0byBpdGVyYXRlIGZyb20gYm90dG9tIGxlZnRcclxuICAgICAgICAvLyBkaW1lbnNpb25zIGFyZSBhIDUweDUwIHNxdWFyZSAoMCwgMCwgNDksIDQ5KVxyXG5cclxuICAgICAgICBzY2FsZSA9IHNjYWxlIHx8IDEwO1xyXG5cclxuICAgICAgICB2YXIgeCxcclxuICAgICAgICAgICAgeF9sZW4gPSA1MCxcclxuICAgICAgICAgICAgeSA9IDQ5LFxyXG4gICAgICAgICAgICByb3dzID0gW10sXHJcbiAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgaW1nX3BhcmVudCxcclxuICAgICAgICAgICAgaW1nLFxyXG4gICAgICAgICAgICBzcmM7XHJcblxyXG4gICAgICAgIGZvciAoOyB5ID49IDA7IHktLSkge1xyXG4gICAgICAgICAgICByb3dzLnB1c2gocm93ID0gW10pO1xyXG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgeF9sZW47IHgrKykge1xyXG4gICAgICAgICAgICAgICAgcm93LnB1c2goJGJnQXNSR0IoeCArICdfJyArIHkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogdGVzdCBpbWFnZSAqIC9cclxuICAgICAgICByb3dzID0gW1xyXG4gICAgICAgICAgICBbWzI1NSwgMCwgMF0sIFsyNTUsIDI1NSwgMjU1XV0sXHJcbiAgICAgICAgICAgIFtbMCwgMCwgMjU1XSwgWzAsIDI1NSwwXV1cclxuICAgICAgICBdO1xyXG4gICAgICAgIC8qICovXHJcblxyXG4gICAgICAgIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIHNyYyA9IHdpbmRvdy5nZW5lcmF0ZUJpdG1hcERhdGFVUkwocm93cywgc2NhbGUpO1xyXG4gICAgICAgIGltZy5zcmMgPSBzcmM7XHJcbiAgICAgICAgaW1nLmFsdCA9ICdJZiB5b3UgY2FuIHJlYWQgdGhpcywgeW91ciBicm93c2VyIHByb2JhYmx5IGRvZXNuXFwndCBzdXBwb3J0IHRoZSBkYXRhIFVSTCBzY2hlbWUgZm9ybWF0ISBPaCBubyEnO1xyXG4gICAgICAgIGltZy50aXRsZSA9ICdZb3UgZ2VuZXJhdGVkIGFuIGltYWdlLCBncmVhdCBqb2IhIFRvIHNhdmUgaXQsIGRyYWcgaXQgdG8geW91ciBEZXNrdG9wIG9yIHJpZ2h0IGNsaWNrIGFuZCBzZWxlY3Qgc2F2ZSBhcy4nO1xyXG4gICAgICAgIGltZ19wYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nJyk7XHJcbiAgICAgICAgaWYgKGltZ19wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaW1nX3BhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBpbWdfcGFyZW50LmlkID0gJ2ltZyc7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwJykuYXBwZW5kQ2hpbGQoaW1nX3BhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGltZ19wYXJlbnQuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJpbWctaGVhZGVyXCI+R2VuZXJhdGVkIEltYWdlICZuYnNwOzxhIHRpdGxlPVwiaGlkZSBpbWFnZVwiIGhyZWY9XCIjXCI+eDwvYT48L2Rpdj4nO1xyXG4gICAgICAgIGltZ19wYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBpbWdfcGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZycpO1xyXG4gICAgICAgICAgICBpbWdfcGFyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaW1nX3BhcmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGltZ19wYXJlbnQuYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5nZW5lcmF0ZUxvd1Jlc0JpdG1hcC5hc2tUb1NjYWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNjYWxlID0gcHJvbXB0KCdQaWNrIGEgc2NhbGluZyBmYWN0b3IuLi5cXG4xID0gYWN0dWFsIHNpemUsIC41ID0gaGFsZiwgMiA9IGRvdWJsZVxcbihub3RlOiBsYXJnZSBudW1iZXJzIG1pZ2h0IGNyYXNoIHlvdXIgYnJvd3NlciknKTtcclxuICAgICAgICBpZiAoc2NhbGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gcGFyc2VGbG9hdChzY2FsZSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gTmFOO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc05hTihzY2FsZSkpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGF0IGlzIG5vdCBhIG51bWJlciEnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gc2NhbGUgKiAxMDsgLy8gc2luY2UgYWN0dWFsIHNpemUgaXMgYWN0dWFsbHkgMTB4IVxyXG4gICAgICAgICAgICAgICAgd2luZG93LmdlbmVyYXRlTG93UmVzQml0bWFwKHNjYWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG59KSh0aGlzLCB0aGlzLmRvY3VtZW50KTsiLCIvKlxyXG4gKGZ1bmN0aW9uKCQpIHtcclxuICAgICAkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAkKCdib2R5JykudG9vbHRpcCh7XHJcbiAgICAgICAgICAgICBzZWxlY3RvcjogJ1tyZWw9dG9vbHRpcF0nXHJcbiAgICAgICAgIH0pO1xyXG4gICAgIH0pO1xyXG4gfSkoalF1ZXJ5KTtcclxuKi9cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgWyd1aS5yb3V0ZXInLCAnbHotc3RyaW5nJywgJ3VpLmJvb3RzdHJhcCcsICdzcHJpbnRmJywgJ25nQW5pbWF0ZScsICdsdmwuZGlyZWN0aXZlcy5kcmFnZHJvcCddKVxyXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsICckdWliVG9vbHRpcFByb3ZpZGVyJywgJyRhbmltYXRlUHJvdmlkZXInLFxyXG4gICAgICAgIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkdWliVG9vbHRpcFByb3ZpZGVyLCAkYW5pbWF0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9tYWluJyk7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgc3RhdGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hvbWUnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdibG9xaGVhZC5jb21wb25lbnRzLmhvbWUnXHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3RhdGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hvbWUubWFpbicsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICdtYWluJyxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2Jsb3FoZWFkLmNvbXBvbmVudHMubWFpbkdhbWUnXHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3RhdGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hvbWUuYWNoaWV2ZW1lbnRzJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ2FjaGlldmVtZW50cycsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdibG9xaGVhZC5jb21wb25lbnRzLmFjaGlldmVtZW50c1VJJ1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHN0YXRlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdob21lLnRlc3QnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAndGVzdCcsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdibG9xaGVhZC5jb21wb25lbnRzLnRlc3RJbnRlcmZhY2UnXHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZShzdGF0ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAkdWliVG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kVG9Cb2R5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiAnYXV0byB0b3AnLFxyXG4gICAgICAgICAgICAgICAgcG9wdXBDbG9zZURlbGF5OiAyNTAsXHJcbiAgICAgICAgICAgICAgICBwb3B1cERlbGF5OiAyNTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXSkucnVuKFsnZ2FtZVNlcnZpY2UnLCBmdW5jdGlvbihnYW1lU2VydmljZSkge1xyXG4gICAgICAgIGdhbWVTZXJ2aWNlLmluaXQoKTtcclxuICAgIH1dKTsiLCJ2YXIgZ2FtZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWQuY29tcG9uZW50cy5hY2hpZXZlbWVudHNVSScsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hY2hpZXZlbWVudHMvYWNoaWV2ZW1lbnRzLmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmFjaGlldmVtZW50c1VJJyxcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdGl0bGU6ICdAJyxcclxuICAgICAgICBmb290ZXI6ICdAJ1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmFjaGlldmVtZW50c1VJJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnYWNoaWV2ZW1lbnRTZXR1cCcsICdyZXNvdXJjZVR5cGVzJywgJ2FjaGlldmVtZW50U2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCBhY2hpZXZlbWVudFNldHVwLCByZXNvdXJjZVR5cGVzLCBhY2hpZXZlbWVudFNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5hY2hpZXZlbWVudFNlcnZpY2UgPSBhY2hpZXZlbWVudFNlcnZpY2U7XHJcbiAgICAgICAgc2VsZi5hY2hpZXZlbWVudFNldHVwID0gYWNoaWV2ZW1lbnRTZXR1cDtcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuYWNoaWV2ZW1lbnRQcm9ncmVzcyA9IGFjaGlldmVtZW50U2VydmljZS5nZXRQcm9ncmVzc1NuYXBzaG90KCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGYuYWNoaWV2ZW1lbnRQcm9ncmVzcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRBY2hpZXZlbWVudENsYXNzID0gZnVuY3Rpb24oYWNoU2V0dXApIHtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgICAgICAvL2lmIChhY2hTZXR1cC5yZXMpIHtcclxuICAgICAgICAgICAgLy8gICAgcmV0WydhY2hpZXZlbWVudC1yYW5rLScgKyByZXNvdXJjZVR5cGVzW2FjaFNldHVwLnJlc10uYXR0cl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldEFjaGlldmVtZW50UmFua0NsYXNzID0gZnVuY3Rpb24oYWNoU2V0dXAsIGFyKSB7XHJcbiAgICAgICAgICAgIHZhciByZXQgPSB7fTtcclxuICAgICAgICAgICAgaWYgKGFjaFNldHVwLnJlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gc2VsZi5hY2hpZXZlbWVudFNlcnZpY2Uuc3RhdGUucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FjaFNldHVwLmFpZF0gfHwge307XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MubGFzdFJhbmsgPj0gYXJbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0WydhY2hpZXZlbWVudC1yYW5rLScgKyByZXNvdXJjZVR5cGVzW2FjaFNldHVwLnJlc10uYXR0cl0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgfVxyXG5dKTsiLCJ2YXIgZ2FtZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWRCdWlsZGluZ0xpc3QnLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYnVpbGRpbmdMaXN0L2J1aWxkaW5nTGlzdC5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdibG9xaGVhZC5jb250cm9sbGVycy5idWlsZGluZ0xpc3QnXHJcbn0pO1xyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMuYnVpbGRpbmdMaXN0JywgW1xyXG4gICAgJyRzY29wZScsICdidWlsZGluZ1NlcnZpY2UnLCAncmVzb3VyY2VTZXJ2aWNlJywgJ3Jlc291cmNlVHlwZXMnLFxyXG4gICAgZnVuY3Rpb24oJHNjb3BlLCBidWlsZGluZ1NlcnZpY2UsIHJlc291cmNlU2VydmljZSwgcmVzb3VyY2VUeXBlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5idWlsZGluZ3MgPSBbXTsgLy9idWlsZGluZ1NlcnZpY2UuZ2V0QnVpbGRpbmdTbmFwc2hvdCgpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlVHlwZXMgPSByZXNvdXJjZVR5cGVzO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlU2VydmljZSA9IHJlc291cmNlU2VydmljZTtcclxuICAgICAgICAgICAgYnVpbGRpbmdTZXJ2aWNlLlN1YnNjcmliZUJ1aWxkaW5nc0NoYW5nZWRFdmVudCgkc2NvcGUsIHNlbGYudXBkYXRlQnVpbGRpbmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudXBkYXRlQnVpbGRpbmdzID0gZnVuY3Rpb24oZXZlbnQsIGJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICBzZWxmLmJ1aWxkaW5ncyA9IGJ1aWxkaW5ncztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuYnVpbGQgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIGJ1aWxkaW5nU2VydmljZS5idWlsZCh0eXBlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5maWx0ZXIoJ2hhc1RyYWl0JywgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odW5pdHMsIHRyYWl0TmFtZSkge1xyXG4gICAgICAgIHZhciByZXQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAodW5pdHNbaV0uaGFzVHJhaXQodHJhaXROYW1lKSlcclxuICAgICAgICAgICAgICAgIHJldC5wdXNoKHVuaXRzW2ldKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxufSk7XHJcblxyXG5cclxuZ2FtZS5mYWN0b3J5KCdCcmVlZGVyJywgW1xyXG4gICAgJyRmaWx0ZXInLCAnVHJhaXRJbnNwZWN0b3InLCAnZ2VuZURlZmluaXRpb25zJywgJ2pvYlR5cGVzJywgJ2F0dHJpYnV0ZXMnLCAncmVzb3VyY2VUeXBlcycsXHJcbiAgICBmdW5jdGlvbigkZmlsdGVyLCBUcmFpdEluc3BlY3RvciwgZ2VuZURlZmluaXRpb25zLCBqb2JUeXBlcywgYXR0cmlidXRlcywgcmVzb3VyY2VUeXBlcykge1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8qIGNvbnN0cnVjdG9yICovXHJcbiAgICAgICAgdmFyIEJyZWVkZXIgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICAgICAgdGhpcy50cmFpdEluc3BlY3RvciA9IG5ldyBUcmFpdEluc3BlY3RvcigpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShjb25maWcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyogcHVibGljIGZ1bmN0aW9ucyAqL1xyXG4gICAgICAgIEJyZWVkZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNvbmZpZykgPT0gJ3VuZGVmaW5lZCcpIGNvbmZpZyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gY29uZmlnLmlkIHx8IHRoaXMuaWQgfHwgMDtcclxuICAgICAgICAgICAgdGhpcy5kdCA9IGNvbmZpZy5kdCB8fCB0aGlzLmR0IHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdGhlciA9IGNvbmZpZy5tb3RoZXIgfHwgdGhpcy5tb3RoZXIgfHwgbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5mYXRoZXIgPSBjb25maWcuZmF0aGVyIHx8IHRoaXMuZmF0aGVyIHx8IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGlvbiA9IGNvbmZpZy5nZW5lcmF0aW9uIHx8IHRoaXMuZ2VuZXJhdGlvbiB8fCAwO1xyXG4gICAgICAgICAgICB0aGlzLmdlbmVzID0gY29uZmlnLmdlbmVzIHx8IHRoaXMuZ2VuZXMgfHwgW107XHJcbiAgICAgICAgICAgIHRoaXMuYnJlZWRlckdlbmVDYXAgPSBjb25maWcuYnJlZWRlckdlbmVDYXAgfHwgdGhpcy5icmVlZGVyR2VuZUNhcCB8fCAyNTtcclxuICAgICAgICAgICAgdGhpcy5nZW5lc1VubG9ja2VkID0gY29uZmlnLmdlbmVzVW5sb2NrZWQgfHwgdGhpcy5nZW5lc1VubG9ja2VkIHx8IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRKb2IgPSBjb25maWcuY3VycmVudEpvYiB8fCB0aGlzLmN1cnJlbnRKb2IgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVkR3JlZW5JbWFnZSA9IGdldFJlZEdyZWVuSW1hZ2UodGhpcy5nZW5lcywgdGhpcy5nZW5lc1VubG9ja2VkLCB0aGlzLmJyZWVkZXJHZW5lQ2FwKTtcclxuICAgICAgICAgICAgLy90aGlzLmJsdWVJbWFnZSA9IGdldEJsdWVJbWFnZSh0aGlzLmdlbmVzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhaXRzID0gdGhpcy50cmFpdEluc3BlY3Rvci5nZXRUcmFpdHModGhpcy5nZW5lcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHRoaXMudHJhaXRJbnNwZWN0b3IuZ2V0QXR0cmlidXRlcyh0aGlzLmdlbmVzKTtcclxuICAgICAgICAgICAgdGhpcy5iYW5pc2hDb3N0ID0gZ2V0QmFuaXNoQ29zdCh0aGlzLmF0dHJpYnV0ZXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gKHRoaXMubmFtZSAmJiB0aGlzLm5hbWUgIT09ICdVbmtub3duIEdlbmRlcicpID8gdGhpcy5uYW1lIDogY29uZmlnLm5hbWUgfHwgdGhpcy5nZXRSYW5kb21OYW1lKCk7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQnJlZWRlci5wcm90b3R5cGUuYnJlZWQgPSBmdW5jdGlvbihwYXJ0bmVyLCBuZXdJZCkge1xyXG4gICAgICAgICAgICB2YXIgcDEgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgcDIgPSBwYXJ0bmVyO1xyXG5cclxuICAgICAgICAgICAgdmFyIG15R2VuZGVyID0gdGhpcy5oYXNUcmFpdCgnTWFsZScpID8gJ01hbGUnIDogJ0ZlbWFsZSc7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBuZXcgQnJlZWRlcih7XHJcbiAgICAgICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgICAgICBkdDogbmV3IERhdGUoKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiBwMS5nZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXNVbmxvY2tlZDogcDEuZ2VuZXNVbmxvY2tlZCxcclxuICAgICAgICAgICAgICAgIGJyZWVkZXJHZW5lQ2FwOiBwMS5icmVlZGVyR2VuZUNhcCxcclxuICAgICAgICAgICAgICAgIG1vdGhlcjogbXlHZW5kZXIgPT0gJ0ZlbWFsZScgPyBwMSA6IHAyLFxyXG4gICAgICAgICAgICAgICAgZmF0aGVyOiBteUdlbmRlciA9PSAnTWFsZScgPyBwMSA6IHAyXHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBwMS5nZW5lcy5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdlbmVEZWZpbml0aW9uc1tnXS5kb20gPT09IFwiRmVtYWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5nZW5lcy5wdXNoKHJhbmRvbUludEZyb21JbnRlcnZhbCgwLCAxKSA+IDAgPyBwMS5nZW5lc1tnXSA6IHAyLmdlbmVzW2ddKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAxZyA9IHAxLmdlbmVzW2ddO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwMmcgPSBwMi5nZW5lc1tnXTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5nZW5lcy5wdXNoKGNyb3Nzb3ZlcihwMWcsIHAyZywgdGhpcy5icmVlZGVyR2VuZUNhcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoaWxkLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCcmVlZGVyLnByb3RvdHlwZS5nZXRUcmFpdHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhaXRzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQnJlZWRlci5wcm90b3R5cGUuaGFzVHJhaXQgPSBmdW5jdGlvbih0cmFpdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy50cmFpdHMuZmlsdGVyKGZ1bmN0aW9uKG15VHJhaXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBteVRyYWl0Lm5hbWUgPT09IHRyYWl0O1xyXG4gICAgICAgICAgICB9KS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQnJlZWRlci5wcm90b3R5cGUuZ2V0UmFuZG9tTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2VuZXMgfHwgdGhpcy5nZW5lcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnVW5rbm93biBHZW5kZXInO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlyc3ROYW1lID0gKHRoaXMuaGFzVHJhaXQoJ01hbGUnKSkgPyBuYW1lTGlzdDFbcmFuZG9tSW50RnJvbUludGVydmFsKDAsIG5hbWVMaXN0MS5sZW5ndGggLSAxKV0gOiBuYW1lTGlzdDJbcmFuZG9tSW50RnJvbUludGVydmFsKDAsIG5hbWVMaXN0Mi5sZW5ndGggLSAxKV07XHJcbiAgICAgICAgICAgIHZhciBsYXN0TmFtZSA9IG5hbWVMaXN0M1tyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3QzLmxlbmd0aCAtIDEpXSArIG5hbWVMaXN0NFtyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3Q0Lmxlbmd0aCAtIDEpXSArIG5hbWVMaXN0NVtyYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgbmFtZUxpc3Q1Lmxlbmd0aCAtIDEpXTtcclxuICAgICAgICAgICAgcmV0dXJuIGZpcnN0TmFtZSArIGxhc3ROYW1lO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQnJlZWRlci5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24oYXR0cikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYWxsIHJlbGF0aW9ucyB0byBhY2NvdW50IGZvciBpbmJyZWVkaW5nIChha2EgdW5jbGUgYnJvdGhlcilcclxuICAgICAgICAvKiB0aGlzIGlzIHdheSB3cm9uZy4uLi5cclxuICAgICAgICBCcmVlZGVyLnByb3RvdHlwZS5nZXRSZWxhdGlvbnMgPSBmdW5jdGlvbih0aGV5KSB7XHJcbiAgICAgICAgICAgIHZhciBteXBhdGVybmFsID0gW107XHJcbiAgICAgICAgICAgIHZhciBteW1hdGVybmFsID0gW107XHJcbiAgICAgICAgICAgIHZhciBteUdlbmRlciA9IHRoaXMuaGFzVHJhaXQoJ01hbGUnKSA/ICdNYWxlJyA6ICdGZW1hbGUnO1xyXG4gICAgICAgICAgICB2YXIgdGhleXBhdGVybmFsID0gW107XHJcbiAgICAgICAgICAgIHZhciB0aGV5bWF0ZXJuYWwgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRoZXlHZW5kZXIgPSB0aGV5Lmhhc1RyYWl0KCdNYWxlJykgPyAnTWFsZScgOiAnRmVtYWxlJztcclxuXHJcbiAgICAgICAgICAgIHZhciB1O1xyXG4gICAgICAgICAgICAvLyBidWlsZCAnbXknIGxpc3Qgb2YgbW90aGVycyBhbmQgZmF0aGVyc1xyXG4gICAgICAgICAgICB1ID0gdGhpcztcclxuICAgICAgICAgICAgd2hpbGUgKHUubW90aGVyICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG15bWF0ZXJuYWwucHVzaCh1Lm1vdGhlcik7XHJcbiAgICAgICAgICAgICAgICB1ID0gdS5tb3RoZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHdoaWxlICh1LmZhdGhlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBteXBhdGVybmFsLnB1c2godS5mYXRoZXIpO1xyXG4gICAgICAgICAgICAgICAgdSA9IHUuZmF0aGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGJ1aWxkICd0aGV5JyBsaXN0IG9mIG1vdGhlcnMgYW5kIGZhdGhlcnNcclxuICAgICAgICAgICAgdSA9IHRoZXk7XHJcbiAgICAgICAgICAgIHdoaWxlICh1Lm1vdGhlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGV5bWF0ZXJuYWwucHVzaCh1Lm1vdGhlcik7XHJcbiAgICAgICAgICAgICAgICB1ID0gdS5tb3RoZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IHRoZXk7XHJcbiAgICAgICAgICAgIHdoaWxlICh1LmZhdGhlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGV5cGF0ZXJuYWwucHVzaCh1LmZhdGhlcik7XHJcbiAgICAgICAgICAgICAgICB1ID0gdS5mYXRoZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgcmV0ID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgbWF0ZXJuYWwgcmVsYXRpb25zaGlwc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IG15bWF0ZXJuYWwubGVuZ3RoOyBoKyspXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoZXltYXRlcm5hbC5sZW5ndGg7IGsrKylcclxuICAgICAgICAgICAgICAgICAgICBpZiAobXltYXRlcm5hbFtoXS5pZCA9PSB0aGV5bWF0ZXJuYWwuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBzYW1lIG1vdGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaCA9PSAwICYmIGtrID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaCgoKHRoaXMuZmF0aGVyLmlkICE9IHRoZXkuZmF0aGVyLmlkKSA/ICdIYWxmICcgOiAnJykgKyAoKHRoZXlHZW5kZXIgPT0gJ0ZlbWFsZScpID8gJ1Npc3RlcicgOiAnQnJvdGhlcicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaCA+IGspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaCgnR3JhbmQgJy5yZXBlYXQoKGgtaykgLSAxKSArICAoKHRoZXlHZW5kZXIgPT0gJ0ZlbWFsZScpID8gJ05laWNlJyA6ICdOZXBoZXcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoID4gaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCdHcmFuZCAnLnJlcGVhdCgoaC1rKSAtIDEpICsgICgodGhleUdlbmRlciA9PSAnRmVtYWxlJykgPyAnTmVpY2UnIDogJ05lcGhldycpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAqL1xyXG5cclxuXHJcbiAgICAgICAgLyogcHJpdmF0ZSBtZW1iZXJzICovXHJcbiAgICAgICAgdmFyIGdlbmV0aWNPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBjcm9zc292ZXJyYXRlOiAwLjVcclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBtYWxlIGZpcnN0IG5hbWVzXHJcbiAgICAgICAgdmFyIG5hbWVMaXN0MSA9IFsnRGlnZ3kgJywgJ0RlYW4gJywgJ0R1a2UgJywgJ0RveWxlICcsICdEaXJrICcsICdEYWcgJywgJ0RpbWl0cmkgJywgJ0RydSAnXTtcclxuICAgICAgICAvLyBmZW1hbGUgZmlyc3QgbmFtZXNcclxuICAgICAgICB2YXIgbmFtZUxpc3QyID0gWydEYWdneSAnLCAnRGFpc3kgJywgJ0RpbmFoICcsICdEaGFybWEgJywgJ0RlZSAnLCAnRGFwaG5lICcsICdEaXhpZSAnLCAnRGFyY3kgJ107XHJcbiAgICAgICAgLy8gbGFzdCBuYW1lIHByZWZpeGVzIChlbXB0eSBzdHJpbmdzIGFuZCBkdXBlcyBhcmUgZm9yIGNvbnRyb2xsaW5nIHRoZSBvZGRzKVxyXG4gICAgICAgIHZhciBuYW1lTGlzdDMgPSBbJycsICcnLCAnJywgJycsICcnLCAnVmFuICcsICdWb24gJywgJ09cXCcnLCAnTWMnLCAnTWMnXTtcclxuICAgICAgICAvLyBsYXN0IG5hbWVzXHJcbiAgICAgICAgdmFyIG5hbWVMaXN0NCA9IFsnRG9vZycsICdEaWJiJywgJ0RhYmInLCAnRGlnJywgJ0RhbmcnLCAnRHVnZyddO1xyXG4gICAgICAgIC8vIGxhc3QgbmFtZSBzdWZmaXhlcyAoZW1wdHkgc3RyaW5ncyBhbmQgZHVwZXMgYXJlIGZvciBjb250cm9sbGluZyB0aGUgb2RkcylcclxuICAgICAgICB2YXIgbmFtZUxpc3Q1ID0gWycnLCAnJywgJycsICdsZXInLCAnbGVyJywgJ2VyJywgJ2VyJywgJ2VyJywgJ3d1ZXJzdCcsICdlcnd1ZXJzdCcsICdlcnRvbicsICdlcnRvbicsICdza2knXTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgLyogcHJpdmF0ZSBmdW5jdGlvbnMgKi9cclxuICAgICAgICBmdW5jdGlvbiBjcm9zc292ZXIoZzEsIGcyLCBnZW5lQ2FwKSB7XHJcbiAgICAgICAgICAgIHZhciBjcm9zc292ZXIgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICB2YXIgZ2VuZVJhdGlvID0gZ2VuZUNhcCAvIDI1NS4wO1xyXG4gICAgICAgICAgICB2YXIgZyA9IGFuZ3VsYXIuY29weShnMSk7XHJcbiAgICAgICAgICAgIGdbMF0gPSAoY3Jvc3NvdmVyIDw9IGdlbmV0aWNPcHRpb25zLmNyb3Nzb3ZlcnJhdGUgPyBnMVswXSA6IGcyWzBdKTtcclxuICAgICAgICAgICAgZ1sxXSA9IChjcm9zc292ZXIgPD0gZ2VuZXRpY09wdGlvbnMuY3Jvc3NvdmVycmF0ZSA/IGcyWzFdIDogZzFbMV0pO1xyXG4gICAgICAgICAgICBnWzBdIC89IGdlbmVSYXRpbztcclxuICAgICAgICAgICAgZ1sxXSAvPSBnZW5lUmF0aW87XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvblJhdGUgPSBnWzJdIC8gMjU1LjA7XHJcbiAgICAgICAgICAgIHZhciBiaXRTdHJpbmdSID0gJyc7XHJcbiAgICAgICAgICAgIHZhciBiaXRTdHJpbmdHID0gJyc7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCBtdXRhdGlvblJhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBiaXRTdHJpbmdSICs9ICcxJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYml0U3RyaW5nUiArPSAnMCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IG11dGF0aW9uUmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJpdFN0cmluZ0cgKz0gJzEnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBiaXRTdHJpbmdHICs9ICcwJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb2xkUiA9IGdbMF07XHJcbiAgICAgICAgICAgIHZhciBvbGRHID0gZ1sxXTtcclxuXHJcbiAgICAgICAgICAgIGdbMF0gXj0gcGFyc2VJbnQoYml0U3RyaW5nUiwgMik7XHJcbiAgICAgICAgICAgIGdbMV0gXj0gcGFyc2VJbnQoYml0U3RyaW5nRywgMik7XHJcbiAgICAgICAgICAgIHZhciBuZXdSID0gZ1swXTtcclxuICAgICAgICAgICAgZ1swXSA9IE1hdGgucm91bmQoZ1swXSAqIGdlbmVSYXRpbyk7XHJcbiAgICAgICAgICAgIGdbMV0gPSBNYXRoLnJvdW5kKGdbMV0gKiBnZW5lUmF0aW8pO1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkZmlsdGVyKCdmbXQnKSgnbXV0YXRlICVkIC0+ICVkIC0+ICVkIC0gc3RyaW5nOiAlcyBnZW5lQ2FwOiAlZCcsIG9sZFIsIG5ld1IsIGdbMF0sIGJpdFN0cmluZ1IsIGdlbmVDYXApKTtcclxuICAgICAgICAgICAgcmV0dXJuIGc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnY2QoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gIWIgPyBhIDogZ2NkKGIsIGEgJSBiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxjbShhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoYSAqIGIpIC8gZ2NkKGEsIGIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UmVkR3JlZW5JbWFnZShnZW5lcywgZ2VuZXNVbmxvY2tlZCwgYnJlZWRlckdlbmVDYXApIHtcclxuICAgICAgICAgICAgaWYgKGdlbmVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgdW5sb2NrZWQgPSB7XHJcbiAgICAgICAgICAgICAgICBcIlNUUlwiOiBbXSxcclxuICAgICAgICAgICAgICAgIFwiSU5UXCI6IFtdLFxyXG4gICAgICAgICAgICAgICAgXCJFTkRcIjogW10sXHJcbiAgICAgICAgICAgICAgICBcIkNIUlwiOiBbXSxcclxuICAgICAgICAgICAgICAgIFwiTENLXCI6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBnZW5lc1RvVXNlID0gW107XHJcbiAgICAgICAgICAgIC8vIHNvcnQgdGhlIHVubG9ja2VkIGdlbmVzIGludG8gYXJyYXlzLlxyXG4gICAgICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGdlbmVzVW5sb2NrZWQubGVuZ3RoOyB1KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhdHRyID0gZ2VuZURlZmluaXRpb25zW2dlbmVzVW5sb2NrZWRbdV1dLmF0dHI7XHJcbiAgICAgICAgICAgICAgICB1bmxvY2tlZFthdHRyXS5wdXNoKGdlbmVzW2dlbmVzVW5sb2NrZWRbdV1dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGxlYXN0IGNvbW1vbiBtdWx0aXBsZSBmb3IgdGhhdCBsZW5ndGhzIG9mIGVhY2ggYXJyYXkgdG8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgcGl4ZWxzIG5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAvLyB0aGlzIGFzc3VtZXMgZWFjaCBhdHRyaWJ1dGUgaGFzIGF0IGxlYXN0IDEgZ2VuZSB1bmxvY2tlZC5cclxuICAgICAgICAgICAgdmFyIGFyciA9IFt1bmxvY2tlZC5TVFIubGVuZ3RoLCB1bmxvY2tlZC5JTlQubGVuZ3RoLCB1bmxvY2tlZC5FTkQubGVuZ3RoLCB1bmxvY2tlZC5DSFIubGVuZ3RoLCB1bmxvY2tlZC5MQ0subGVuZ3RoXTtcclxuICAgICAgICAgICAgdmFyIG11bHRpcGxlID0gTWF0aC5taW4odW5sb2NrZWQuU1RSLmxlbmd0aCwgdW5sb2NrZWQuSU5ULmxlbmd0aCwgdW5sb2NrZWQuRU5ELmxlbmd0aCwgdW5sb2NrZWQuQ0hSLmxlbmd0aCwgdW5sb2NrZWQuTENLLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAgICAgICAgIG11bHRpcGxlID0gbGNtKG11bHRpcGxlLCBuKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChtdWx0aXBsZSA8IDUpIHsgbXVsdGlwbGUgKj0gMjsgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdW5sb2NrZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBnZW5lU2l6ZSA9IG11bHRpcGxlIC8gdW5sb2NrZWRba2V5XS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IHVubG9ja2VkW2tleV0ubGVuZ3RoOyBnKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IGdlbmVTaXplOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXNUb1VzZS5wdXNoKHVubG9ja2VkW2tleV1bZ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVCaXRtYXBEYXRhVVJMKGFkZFJvd3MoY29udmVydFJlZEdyZWVuTWFwKGdlbmVzVG9Vc2UsIGJyZWVkZXJHZW5lQ2FwKSwgZ2VuZXNUb1VzZS5sZW5ndGgpLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEJsdWVJbWFnZShnZW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVCaXRtYXBEYXRhVVJMKGFkZFJvd3MoY29udmVydEJsdWVNYXAoZ2VuZXMpLCBnZW5lcy5sZW5ndGgpLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRSZWRHcmVlbk1hcChnZW5lcywgYnJlZWRlckdlbmVDYXApIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgbWluQ29sb3JSYXRpbyA9IDEgKyBicmVlZGVyR2VuZUNhcCAvIDUwLjA7XHJcbiAgICAgICAgICAgIHZhciBjb2xvclJhdGlvID0gMjA1LjAgLyBicmVlZGVyR2VuZUNhcDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBnZW5lc1tpXVswXTtcclxuICAgICAgICAgICAgICAgIHZhciBnID0gZ2VuZXNbaV1bMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgYnJpZ2h0ID0gTWF0aC5hYnMociAtIGcpICogY29sb3JSYXRpbztcclxuICAgICAgICAgICAgICAgIGlmIChyID4gZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBicmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgciAqPSBtaW5Db2xvclJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIGcgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBnID0gYnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGcgKj0gbWluQ29sb3JSYXRpbztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vaWYgKHIgPiAwKSByICs9IG1pbkNvbG9yO1xyXG4gICAgICAgICAgICAgICAgLy9pZiAoZyA+IDApIGcgKz0gbWluQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBpZiAociA+IDI1NSkgciA9IDI1NTtcclxuICAgICAgICAgICAgICAgIGlmIChnID4gMjU1KSBnID0gMjU1O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtyLCBnLCAwXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRCbHVlTWFwKGdlbmVzKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goWzAsIDAsIGdlbmVzW2ldWzJdXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFJvd3MoZ2VuZXMsIGNvbHMpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IChnZW5lcy5sZW5ndGggLyBjb2xzKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbHM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKGdlbmVzW2kgKyAoaiAqIGNvbHMpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRCYW5pc2hDb3N0KGF0dHIpIHtcclxuICAgICAgICAgICAgdmFyIGNvc3RzID0gW107XHJcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGF0dHJba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChhIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsIC09IE1hdGgucG93KDEwLCAoLTEgKiBhKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IE1hdGgucG93KDEwLCBhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvdGFsIDwgMCkgdG90YWwgPSAwO1xyXG5cclxuICAgICAgICAgICAgY29zdHMucHVzaCh7IHJlc291cmNlOiByZXNvdXJjZVR5cGVzLkhBUFBJTkVTUy5uYW1lLCByZXNvdXJjZVR5cGU6ICdIQVBQSU5FU1MnLCBhbW91bnQ6IHRvdGFsIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gY29zdHM7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIEJyZWVkZXI7XHJcbiAgICB9XHJcbl0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuZmFjdG9yeSgnUG9wdWxhdGlvbicsIFsnJGZpbHRlcicsICdCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICdsb2dTZXJ2aWNlJywgZnVuY3Rpb24oJGZpbHRlciwgQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCBsb2dTZXJ2aWNlKSB7XHJcblxyXG5cclxuICAgIC8qIGNvbnN0cnVjdG9yICovXHJcbiAgICB2YXIgUG9wdWxhdGlvbiA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoc3RhdGUpO1xyXG4gICAgfTtcclxuICAgIC8qIHB1YmxpYyBmdW5jdGlvbnMgKi9cclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICB0aGlzLmdlbmVEZWZpbml0aW9ucyA9IGdlbmVEZWZpbml0aW9ucztcclxuICAgICAgICB0aGlzLmN1cnJlbnRHZW5lcmF0aW9uID0gc3RhdGUuY3VycmVudEdlbmVyYXRpb24gfHwgdGhpcy5jdXJyZW50R2VuZXJhdGlvbiB8fCAwO1xyXG4gICAgICAgIHRoaXMuYnJlZWRlcnMgPSBzdGF0ZS5icmVlZGVycyB8fCB0aGlzLmJyZWVkZXJzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuYnJlZWRlckxpbWl0ID0gc3RhdGUuYnJlZWRlckxpbWl0IHx8IHRoaXMuYnJlZWRlckxpbWl0IHx8IDA7XHJcbiAgICAgICAgdGhpcy5uZXdib3JuTGltaXQgPSBzdGF0ZS5uZXdib3JuTGltaXQgfHwgdGhpcy5uZXdib3JuTGltaXQgfHwgMDtcclxuICAgICAgICB0aGlzLm1heFNpemUgPSBzdGF0ZS5tYXhTaXplIHx8IHRoaXMubWF4U2l6ZSB8fCAxMDtcclxuICAgICAgICB0aGlzLmJyZWVkZXJHZW5lQ2FwID0gc3RhdGUuYnJlZWRlckdlbmVDYXAgfHwgdGhpcy5icmVlZGVyR2VuZUNhcCB8fCAyNTtcclxuICAgICAgICB0aGlzLmJyZWVkZXJNdXRhdGlvbkNoYW5jZSA9IHN0YXRlLmJyZWVkZXJNdXRhdGlvbkNoYW5jZSB8fCB0aGlzLmJyZWVkZXJNdXRhdGlvbkNoYW5jZSB8fCA1O1xyXG4gICAgICAgIHRoaXMuYnJlZWRlckdlbmVzVW5sb2NrZWQgPSBzdGF0ZS5icmVlZGVyR2VuZXNVbmxvY2tlZCB8fCB0aGlzLmJyZWVkZXJHZW5lc1VubG9ja2VkIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbFNpemUgPSBzdGF0ZS5pbml0aWFsU2l6ZSB8fCB0aGlzLmluaXRpYWxTaXplIHx8IDI7XHJcbiAgICAgICAgaWYgKHN0YXRlLm1lbWJlcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgc3RhdGUubWVtYmVycy5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lbWJlciA9IHN0YXRlLm1lbWJlcnNbbV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IG5ldyBCcmVlZGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbWVtYmVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGR0OiBtZW1iZXIuZHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlZWRlckdlbmVDYXA6IG1lbWJlci5icmVlZGVyR2VuZUNhcCxcclxuICAgICAgICAgICAgICAgICAgICBtb3RoZXI6IG1lbWJlci5tb3RoZXIgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBmYXRoZXI6IG1lbWJlci5mYXRoZXIgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiBtZW1iZXIuZ2VuZXJhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBnZW5lczogbWVtYmVyLmdlbmVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVzVW5sb2NrZWQ6IG1lbWJlci5nZW5lc1VubG9ja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1lbWJlci5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRKb2I6IG1lbWJlci5jdXJyZW50Sm9iXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHVuaXQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbWJlcnMucHVzaCh1bml0KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgdGhpcy5tZW1iZXJzID0gdGhpcy5tZW1iZXJzIHx8IHRoaXMuY3JlYXRlSW5pdGlhbFBvcHVsYXRpb24odGhpcy5pbml0aWFsU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5uZXdib3JucyA9IFtdO1xyXG4gICAgICAgIGlmIChzdGF0ZS5uZXdib3Jucykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHN0YXRlLm5ld2Jvcm5zLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Ym9ybiA9IHN0YXRlLm5ld2Jvcm5zW25dO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5iID0gbmV3IEJyZWVkZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBuZXdib3JuLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGR0OiBuZXdib3JuLmR0LFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWVkZXJHZW5lQ2FwOiBuZXdib3JuLmJyZWVkZXJHZW5lQ2FwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vdGhlcjogbmV3Ym9ybi5tb3RoZXIgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBmYXRoZXI6IG5ld2Jvcm4uZmF0aGVyIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbjogbmV3Ym9ybi5nZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVzOiBuZXdib3JuLmdlbmVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVzVW5sb2NrZWQ6IG5ld2Jvcm4uZ2VuZXNVbmxvY2tlZCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuZXdib3JuLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEpvYjogbmV3Ym9ybi5jdXJyZW50Sm9iXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG5iLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZXdib3Jucy5wdXNoKG5iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG4gICAgUG9wdWxhdGlvbi5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRHZW5lcmF0aW9uOiB0aGlzLmN1cnJlbnRHZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICBicmVlZGVyczogdGhpcy5icmVlZGVycyxcclxuICAgICAgICAgICAgYnJlZWRlckxpbWl0OiB0aGlzLmJyZWVkZXJMaW1pdCxcclxuICAgICAgICAgICAgbWF4U2l6ZTogdGhpcy5tYXhTaXplLFxyXG4gICAgICAgICAgICBicmVlZGVyR2VuZUNhcDogdGhpcy5icmVlZGVyR2VuZUNhcCxcclxuICAgICAgICAgICAgYnJlZWRlck11dGF0aW9uQ2hhbmNlOiB0aGlzLmJyZWVkZXJNdXRhdGlvbkNoYW5jZSxcclxuICAgICAgICAgICAgYnJlZWRlckdlbmVzVW5sb2NrZWQ6IHRoaXMuYnJlZWRlckdlbmVzVW5sb2NrZWQsXHJcbiAgICAgICAgICAgIGluaXRpYWxTaXplOiB0aGlzLmluaXRpYWxTaXplLFxyXG4gICAgICAgICAgICBtZW1iZXJzOiBbXSxcclxuICAgICAgICAgICAgbmV3Ym9ybnM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHRoaXMubWVtYmVycy5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICB2YXIgbWVtYmVyID0gdGhpcy5tZW1iZXJzW21dO1xyXG4gICAgICAgICAgICBzdGF0ZS5tZW1iZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IG1lbWJlci5pZCxcclxuICAgICAgICAgICAgICAgIGR0OiBtZW1iZXIuZHQsXHJcbiAgICAgICAgICAgICAgICBicmVlZGVyR2VuZUNhcDogbWVtYmVyLmJyZWVkZXJHZW5lQ2FwLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbjogbWVtYmVyLmdlbmVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICBnZW5lczogbWVtYmVyLmdlbmVzLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXNVbmxvY2tlZDogbWVtYmVyLmdlbmVzVW5sb2NrZWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBtZW1iZXIubmFtZSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRKb2I6IG1lbWJlci5jdXJyZW50Sm9iXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMubmV3Ym9ybnMubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgdmFyIG5iID0gdGhpcy5uZXdib3Juc1tuXTtcclxuICAgICAgICAgICAgc3RhdGUubmV3Ym9ybnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogbmIuaWQsXHJcbiAgICAgICAgICAgICAgICBkdDogbmIuZHQsXHJcbiAgICAgICAgICAgICAgICBicmVlZGVyR2VuZUNhcDogbmIuYnJlZWRlckdlbmVDYXAsXHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiBuYi5nZW5lcmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXM6IG5iLmdlbmVzLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXNVbmxvY2tlZDogbmIuZ2VuZXNVbmxvY2tlZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5iLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Sm9iOiBuYi5jdXJyZW50Sm9iXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIFBvcHVsYXRpb24ucHJvdG90eXBlLmNyZWF0ZUluaXRpYWxQb3B1bGF0aW9uID0gZnVuY3Rpb24oY291bnQpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBvcHVsYXRpb24gPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGdlbmVzID0gW107XHJcbiAgICAgICAgICAgIHZhciByID0gaSAlIDIgPT09IDAgPyAyNTUgOiAwO1xyXG4gICAgICAgICAgICB2YXIgZyA9IGkgJSAyID09PSAwID8gMCA6IDI1NTtcclxuICAgICAgICAgICAgZm9yICh2YXIgZ24gPSAwOyBnbiA8IHNlbGYuZ2VuZURlZmluaXRpb25zLmxlbmd0aDsgZ24rKykge1xyXG4gICAgICAgICAgICAgICAgZ2VuZXMucHVzaChbMCwgMCwgMF0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYnJlZWRlckdlbmVzVW5sb2NrZWQuaW5kZXhPZihnbikgIT09IC0xKSBnZW5lc1tnbl1bMl0gPSBzZWxmLmJyZWVkZXJNdXRhdGlvbkNoYW5jZTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmdlbmVEZWZpbml0aW9uc1tnbl0ucmVjID09PSBcIk1hbGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVzW2duXVswXSA9IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXNbZ25dWzFdID0gZztcclxuICAgICAgICAgICAgICAgICAgICBnZW5lc1tnbl1bMl0gPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB1bml0ID0gbmV3IEJyZWVkZXIoe1xyXG4gICAgICAgICAgICAgICAgaWQ6IGksXHJcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXM6IGFuZ3VsYXIuY29weShnZW5lcyksXHJcbiAgICAgICAgICAgICAgICBnZW5lc1VubG9ja2VkOiBzZWxmLmJyZWVkZXJHZW5lc1VubG9ja2VkLFxyXG4gICAgICAgICAgICAgICAgYnJlZWRlckdlbmVDYXA6IHNlbGYuYnJlZWRlckdlbmVDYXAsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB1bml0LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uLnB1c2godW5pdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwb3B1bGF0aW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICBQb3B1bGF0aW9uLnByb3RvdHlwZS5pc0JyZWVkaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubWVtYmVycy5sZW5ndGggPj0gdGhpcy5tYXhTaXplKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMubmV3Ym9ybnMubGVuZ3RoID49IHRoaXMubmV3Ym9ybkxpbWl0KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXJlIGFyZSBhdCBsZWFzdCAxIG1hbGUgYW5kIDEgZmVtYWxlIGluIHRoZSBicmVlZGVyc1xyXG4gICAgICAgIHZhciBoYXNNYWxlID0gZmFsc2UsXHJcbiAgICAgICAgICAgIGhhc0ZlbWFsZSA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5icmVlZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgdW5pdCA9IHRoaXMuZ2V0QnlJZCh0aGlzLmJyZWVkZXJzW2ldKTtcclxuICAgICAgICAgICAgaWYgKHVuaXQuaGFzVHJhaXQoJ01hbGUnKSkgaGFzTWFsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGVsc2UgaGFzRmVtYWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGhhc01hbGUgJiYgaGFzRmVtYWxlKSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc01hbGUgJiYgaGFzRmVtYWxlO1xyXG4gICAgfTtcclxuXHJcbiAgICBQb3B1bGF0aW9uLnByb3RvdHlwZS5nZXRCeUlkID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbih1bml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bml0LmlkID09PSBpZDtcclxuICAgICAgICB9KVswXTtcclxuICAgIH07XHJcblxyXG4gICAgUG9wdWxhdGlvbi5wcm90b3R5cGUuZ2V0QnlHZW5lcmF0aW9uID0gZnVuY3Rpb24oZ2VuZXJhdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uKHVuaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuaXQuZ2VuZXJhdGlvbiA9PT0gZ2VuZXJhdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgUG9wdWxhdGlvbi5wcm90b3R5cGUuYnJlZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCFzZWxmLmlzQnJlZWRpbmcoKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIHAxID0gc2VsZi5nZXRCeUlkKHNlbGYuYnJlZWRlcnNbMF0pO1xyXG4gICAgICAgIHZhciBwMiA9IHNlbGYuZ2V0QnlJZChzZWxmLmJyZWVkZXJzWzFdKTtcclxuICAgICAgICB2YXIgY2hpbGQgPSBwMS5icmVlZChwMiwgc2VsZi5tZW1iZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgc2VsZi5uZXdib3Jucy5wdXNoKGNoaWxkKTtcclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9O1xyXG4gICAgUG9wdWxhdGlvbi5wcm90b3R5cGUucHJvY2Vzc05ld2Jvcm5GYXRlID0gZnVuY3Rpb24oaWQsIGZhdGUpIHtcclxuICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgdmFyIG5ld2Jvcm4gPSB0aGlzLm5ld2Jvcm5zLmZpbHRlcihmdW5jdGlvbih1bml0LCBpKSB7XHJcbiAgICAgICAgICAgIGlmICh1bml0LmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVswXTtcclxuICAgICAgICB2YXIgbXNnID0gXCJcIjtcclxuICAgICAgICBzd2l0Y2ggKGZhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcIldPUktcIjpcclxuICAgICAgICAgICAgICAgIG5ld2Jvcm4uY3VycmVudEpvYiA9ICdJRExFJztcclxuICAgICAgICAgICAgICAgIHRoaXMubWVtYmVycy5wdXNoKG5ld2Jvcm4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZXdib3Jucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgbXNnID0gJGZpbHRlcignZm10JykoXCIlKG5hbWUpcyBoYXMgam9pbmVkIHRoZSB3b3JrZm9yY2VcIiwgbmV3Ym9ybik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkJBTklTSFwiOlxyXG4gICAgICAgICAgICAgICAgbXNnID0gJGZpbHRlcignZm10JykoXCIlKG5hbWUpcyBoYXMgYmVlbiBiYW5pc2hlZFwiLCBuZXdib3JuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV3Ym9ybnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbXNnID0gbXNnID0gJGZpbHRlcignZm10JykoXCJJbnZhbGlkICUoZmF0ZSlzXCIsIHsgZmF0ZTogZmF0ZSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGZhdGU6IFwiICsgZmF0ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nU2VydmljZS5sb2dCcmVlZE1lc3NhZ2UobXNnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUG9wdWxhdGlvbjtcclxufV0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuZmFjdG9yeSgnVHJhaXRJbnNwZWN0b3InLCBbJyRmaWx0ZXInLCAnZ2VuZURlZmluaXRpb25zJywgJ3RyYWl0RGVmaW5pdGlvbnMnLCBmdW5jdGlvbigkZmlsdGVyLCBnZW5lRGVmaW5pdGlvbnMsIHRyYWl0RGVmaW5pdGlvbnMpIHtcclxuICAgIC8qIGNvbnN0cnVjdG9yICovXHJcbiAgICB2YXIgVHJhaXRJbnNwZWN0b3IgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZShjb25maWcpO1xyXG4gICAgfTtcclxuXHJcblxyXG5cclxuICAgIC8qIHB1YmxpYyBmdW5jdGlvbnMgKi9cclxuICAgIFRyYWl0SW5zcGVjdG9yLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICBpZiAodHlwZW9mKGNvbmZpZykgPT0gJ3VuZGVmaW5lZCcpIGNvbmZpZyA9IHt9O1xyXG4gICAgICAgIC8vdGhpcy5pZCA9IGNvbmZpZy5pZCB8fCB0aGlzLmlkIHx8IDA7ICAgICAgICBcclxuICAgIH07XHJcblxyXG4gICAgVHJhaXRJbnNwZWN0b3IucHJvdG90eXBlLmdldFRyYWl0cyA9IGZ1bmN0aW9uKGdlbmVzKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IFtdO1xyXG4gICAgICAgIHZhciB0cmFpdHMgPSBidWlsZFRyYWl0cyh0cmFpdERlZmluaXRpb25zKTtcclxuICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGQgPSB0cmFpdHNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbWV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChnZW5lcy5sZW5ndGggPT0gNTApXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXMudW5zaGlmdChbMjU1LCAwLCAwXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IHRkLmdlbmVzLmxlbmd0aCAmJiBtZXQgPT09IHRydWU7IGgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZGcgPSB0ZC5nZW5lc1toXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IGdlbmVzW3RkZ1swXV1bMV0gLSBnZW5lc1t0ZGdbMF1dWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2IDwgdGRnWzFdIHx8IHYgPiB0ZGdbMl0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQucHVzaCh0ZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxuXHJcbiAgICBUcmFpdEluc3BlY3Rvci5wcm90b3R5cGUuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uKGdlbmVzKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IHtcclxuICAgICAgICAgICAgXCJTVFJcIjogMCxcclxuICAgICAgICAgICAgXCJJTlRcIjogMCxcclxuICAgICAgICAgICAgXCJFTkRcIjogMCxcclxuICAgICAgICAgICAgXCJDSFJcIjogMCxcclxuICAgICAgICAgICAgXCJMQ0tcIjogMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGdlbmVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgc3RyQmFzZSA9IDAsXHJcbiAgICAgICAgICAgICAgICBpbnRCYXNlID0gMCxcclxuICAgICAgICAgICAgICAgIGVuZEJhc2UgPSAwLFxyXG4gICAgICAgICAgICAgICAgY2hyQmFzZSA9IDAsXHJcbiAgICAgICAgICAgICAgICBsY2tCYXNlID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBnZW5lcy5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGdlbmVEZWZpbml0aW9uc1tnXS5hdHRyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gXCJTVFJcIilcclxuICAgICAgICAgICAgICAgICAgICBzdHJCYXNlICs9IGdlbmVzW2ddWzFdIC0gZ2VuZXNbZ11bMF07XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhdHRyaWJ1dGUgPT09IFwiSU5UXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgaW50QmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXR0cmlidXRlID09PSBcIkVORFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGVuZEJhc2UgKz0gZ2VuZXNbZ11bMV0gLSBnZW5lc1tnXVswXTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF0dHJpYnV0ZSA9PT0gXCJDSFJcIilcclxuICAgICAgICAgICAgICAgICAgICBjaHJCYXNlICs9IGdlbmVzW2ddWzFdIC0gZ2VuZXNbZ11bMF07XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhdHRyaWJ1dGUgPT09IFwiTENLXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgbGNrQmFzZSArPSBnZW5lc1tnXVsxXSAtIGdlbmVzW2ddWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldC5TVFIgPSBNYXRoLmZsb29yKE1hdGguc3FydCgoTWF0aC5hYnMoc3RyQmFzZSkgKyAyMCkgLyAyNSkpICogKHN0ckJhc2UgPCAwID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgcmV0LklOVCA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KChNYXRoLmFicyhpbnRCYXNlKSArIDIwKSAvIDI1KSkgKiAoaW50QmFzZSA8IDAgPyAtMSA6IDEpO1xyXG4gICAgICAgICAgICByZXQuRU5EID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoKE1hdGguYWJzKGVuZEJhc2UpICsgMjApIC8gMjUpKSAqIChlbmRCYXNlIDwgMCA/IC0xIDogMSk7XHJcbiAgICAgICAgICAgIHJldC5DSFIgPSBNYXRoLmZsb29yKE1hdGguc3FydCgoTWF0aC5hYnMoY2hyQmFzZSkgKyAyMCkgLyAyNSkpICogKGNockJhc2UgPCAwID8gLTEgOiAxKTtcclxuICAgICAgICAgICAgcmV0LkxDSyA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KChNYXRoLmFicyhsY2tCYXNlKSArIDIwKSAvIDI1KSkgKiAobGNrQmFzZSA8IDAgPyAtMSA6IDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBwcml2YXRlIG1lbWJlcnMgKi9cclxuICAgIHZhciBjaGVja2VkID0gW107XHJcbiAgICB0cmFpdHMgPSBbXTtcclxuICAgIHZhciBnZXRUcmFpdEJ5TmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdHJhaXRzLmZpbHRlcihmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lID09PSB0Lm5hbWU7XHJcbiAgICAgICAgfSlbMF07XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldFJlcXVpcmVkR2VuZXNSZWN1cnNpdmUgPSBmdW5jdGlvbih0cmFpdCkge1xyXG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCh0cmFpdC5yZXF1aXJlZFRyYWl0cykpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0cmFpdC5yZXF1aXJlZFRyYWl0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkVHJhaXQgPSB0cmFpdC5yZXF1aXJlZFRyYWl0c1tqXTtcclxuICAgICAgICAgICAgICAgIHZhciByZXEgPSBnZXRUcmFpdEJ5TmFtZShyZXF1aXJlZFRyYWl0KTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkLmluZGV4T2YocmVxLm5hbWUpID09PSAtMSlcclxuICAgICAgICAgICAgICAgICAgICBnZXRSZXF1aXJlZEdlbmVzUmVjdXJzaXZlKHJlcSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IHJlcS5nZW5lcy5sZW5ndGg7IGcrKylcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdC5nZW5lcy5wdXNoKHJlcS5nZW5lc1tnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2hlY2tlZC5wdXNoKHRyYWl0Lm5hbWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgYnVpbGRUcmFpdHMgPSBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgY2hlY2tlZCA9IFtdO1xyXG4gICAgICAgIHRyYWl0cyA9IHQ7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFpdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRyYWl0ID0gdHJhaXRzW2ldO1xyXG4gICAgICAgICAgICBnZXRSZXF1aXJlZEdlbmVzUmVjdXJzaXZlKHRyYWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRyYWl0cztcclxuICAgIH07XHJcblxyXG5cclxuICAgIHJldHVybiBUcmFpdEluc3BlY3RvcjtcclxufV0pOyIsInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuYXBwLmNvbXBvbmVudCgnYmxvcWhlYWRHYW1lQ29udHJvbCcsIHtcclxuICAgIHRlbXBsYXRlOiAnPGRpdj4nICtcclxuICAgICAgICAnPGJ1dHRvbiB0aXRsZT1cIlNhdmUgR2FtZVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4teHMgYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIiRjdHJsLnNhdmVHYW1lKCk7XCI+PGkgY2xhc3M9XCJmYSBmYS1mbG9wcHktb1wiPjwvaT48L2J1dHRvbj4nICtcclxuICAgICAgICAnPGJ1dHRvbiB0aXRsZT1cIkhhcmQgUmVzZXRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCIkY3RybC5yZXNldFNhdmUoKTtcIj48aSBjbGFzcz1cImZhIGZhLXJlY3ljbGVcIj48L2k+PC9idXR0b24+JyArXHJcbiAgICAgICAgJzxidXR0b24gdGl0bGU9XCJQbGF5L1BhdXNlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi14cyBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiJGN0cmwudG9nZ2xlU3RhdGUoKTtcIj48aSBjbGFzcz1cImZhXCIgbmctY2xhc3M9XCIkY3RybC5nZXRJY29uKClcIj48L2k+PC9idXR0b24+JyArXHJcbiAgICAgICAgJzwvZGl2PicsXHJcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICdnYW1lU2VydmljZScsICdnYW1lTG9vcFNlcnZpY2UnLCAnZ2FtZVN0YXRlcycsIGZ1bmN0aW9uKCRzY29wZSwgZ2FtZVNlcnZpY2UsIGdhbWVMb29wU2VydmljZSwgZ2FtZVN0YXRlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBnYW1lTG9vcFNlcnZpY2UuZ2V0U3RhdGUoKS5jdXJyZW50U3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnRvZ2dsZVN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gKHNlbGYuY3VycmVudFN0YXRlID09PSBnYW1lU3RhdGVzLlJVTk5JTkcgPyBnYW1lU3RhdGVzLlBBVVNFRCA6IGdhbWVTdGF0ZXMuUlVOTklORyk7XHJcbiAgICAgICAgICAgIGdhbWVMb29wU2VydmljZS5zZXRTdGF0ZShzZWxmLmN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldEljb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY3VycmVudFN0YXRlID09PSBnYW1lU3RhdGVzLlJVTk5JTkcgPyAnZmEtcGF1c2UnIDogJ2ZhLXBsYXknO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yZXNldFNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZ2FtZVNlcnZpY2UuaGFyZFJlc2V0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNhdmVHYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGdhbWVTZXJ2aWNlLnNhdmVHYW1lKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1dXHJcbn0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuY29tcG9uZW50KCdibG9xaGVhZExvZycsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9sb2cvbG9nLmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmxvZydcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmxvZycsIFtcclxuICAgICckc2NvcGUnLCAnbG9nU2VydmljZScsICdsb2dUeXBlcycsXHJcbiAgICBmdW5jdGlvbigkc2NvcGUsIGxvZ1NlcnZpY2UsIGxvZ1R5cGVzKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgICAgIGxvZ1NlcnZpY2UuU3Vic2NyaWJlTmV3TWVzc2FnZUV2ZW50KCRzY29wZSwgc2VsZi5yZWNlaXZlTWVzc2FnZXMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0TG9nQ2xhc3MgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSAnbGlzdC1ncm91cC1pdGVtLSc7XHJcbiAgICAgICAgICAgIHZhciBhID0gJyc7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBsb2dUeXBlcy5HRU5FUkFMOlxyXG4gICAgICAgICAgICAgICAgICAgIGEgPSAnY29sb3ItZ2VuZXJhbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGxvZ1R5cGVzLkFDSElFVkVNRU5UOlxyXG4gICAgICAgICAgICAgICAgICAgIGEgPSAnY29sb3ItYWNoaWV2ZW1lbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBsb2dUeXBlcy5CUkVFRDpcclxuICAgICAgICAgICAgICAgICAgICBhID0gJ2NvbG9yLWJyZWVkJztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgbG9nVHlwZXMuV09SSzpcclxuICAgICAgICAgICAgICAgICAgICBhID0gJ2NvbG9yLXdvcmsnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBhID0gcHJlZml4ICsgJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYucmVjZWl2ZU1lc3NhZ2VzID0gZnVuY3Rpb24oZXZlbnQsIG1lc3NhZ2VzKSB7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMgPSBtZXNzYWdlcztcclxuICAgICAgICAgICAgJCgnLmxvZy1jb21wb25lbnQnKVswXS5zY3JvbGxUb3AgPSAkKCcubG9nLWNvbXBvbmVudCcpWzBdLnNjcm9sbEhlaWdodDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTtcclxuXHJcbmdhbWUuc2VydmljZSgnbG9nU2VydmljZScsIFsnJHJvb3RTY29wZScsICdsb2dUeXBlcycsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGxvZ1R5cGVzKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgbWF4TWVzc2FnZXMgPSA1MDA7XHJcbiAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihjbGVhckxvZykge1xyXG4gICAgICAgIGlmIChjbGVhckxvZykge1xyXG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgICAgIHNlbGYubG9nR2VuZXJhbE1lc3NhZ2UoXCJXZWxjb21lIHRvIEdlbmV0aXghXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZWxmLmxvZ0dlbmVyYWxNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgICAgIHNlbGYubWVzc2FnZXMucHVzaCh7IHR5cGU6IGxvZ1R5cGVzLkdFTkVSQUwsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgICAgICBpZiAoc2VsZi5tZXNzYWdlcy5sZW5ndGggPiBtYXhNZXNzYWdlcylcclxuICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnbmV3TWVzc2FnZUV2ZW50Jywgc2VsZi5tZXNzYWdlcyk7XHJcbiAgICB9O1xyXG4gICAgc2VsZi5sb2dCcmVlZE1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcbiAgICAgICAgc2VsZi5tZXNzYWdlcy5wdXNoKHsgdHlwZTogbG9nVHlwZXMuQlJFRUQsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgICAgICBpZiAoc2VsZi5tZXNzYWdlcy5sZW5ndGggPiBtYXhNZXNzYWdlcylcclxuICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnbmV3TWVzc2FnZUV2ZW50Jywgc2VsZi5tZXNzYWdlcyk7XHJcbiAgICB9O1xyXG4gICAgc2VsZi5sb2dBY2hpZXZlbWVudE1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcbiAgICAgICAgc2VsZi5tZXNzYWdlcy5wdXNoKHsgdHlwZTogbG9nVHlwZXMuQUNISUVWRU1FTlQsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwgbWVzc2FnZTogbWVzc2FnZSB9KTtcclxuICAgICAgICBpZiAoc2VsZi5tZXNzYWdlcy5sZW5ndGggPiBtYXhNZXNzYWdlcylcclxuICAgICAgICAgICAgc2VsZi5tZXNzYWdlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnbmV3TWVzc2FnZUV2ZW50Jywgc2VsZi5tZXNzYWdlcyk7XHJcbiAgICB9O1xyXG4gICAgc2VsZi5sb2dXb3JrTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICBzZWxmLm1lc3NhZ2VzLnB1c2goeyB0eXBlOiBsb2dUeXBlcy5XT1JLLCB0aW1lc3RhbXA6IERhdGUubm93KCksIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgaWYgKHNlbGYubWVzc2FnZXMubGVuZ3RoID4gbWF4TWVzc2FnZXMpXHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZXMuc3BsaWNlKDAsIDEpO1xyXG4gICAgICAgICRyb290U2NvcGUuJGVtaXQoJ25ld01lc3NhZ2VFdmVudCcsIHNlbGYubWVzc2FnZXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZWxmLlN1YnNjcmliZU5ld01lc3NhZ2VFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ25ld01lc3NhZ2VFdmVudCcsIGNhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCduZXdNZXNzYWdlRXZlbnQnLCBzZWxmLm1lc3NhZ2VzKTtcclxuICAgIH07XHJcblxyXG59XSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkLmNvbXBvbmVudHMuaG9tZScsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9ob21lLmh0bWwnLFxyXG4gICAgY29udHJvbGxlcjogJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmhvbWUnXHJcbn0pO1xyXG5nYW1lLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLmhvbWUnLCBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIH07XHJcbn0pO1xyXG5cclxuXHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWQuY29tcG9uZW50cy5tYWluR2FtZScsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9tYWluR2FtZS9tYWluR2FtZS5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdibG9xaGVhZC5jb250cm9sbGVycy5tYWluR2FtZSdcclxufSk7XHJcblxyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMubWFpbkdhbWUnLCBbXHJcbiAgICAnJHNjb3BlJywgJ3BvcHVsYXRpb25TZXJ2aWNlJywgJ2FjaGlldmVtZW50U2VydmljZScsICdyZXNvdXJjZVNlcnZpY2UnLCAnd29ya2VyU2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkc2NvcGUsIHBvcHVsYXRpb25TZXJ2aWNlLCBhY2hpZXZlbWVudFNlcnZpY2UsIHJlc291cmNlU2VydmljZSwgd29ya2VyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5icmVlZGVycyA9IFtdO1xyXG4gICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24gPSBbXTtcclxuICAgICAgICAgICAgc2VsZi5tYXhQb3B1bGF0aW9uID0gMDtcclxuICAgICAgICAgICAgc2VsZi5tYXhCcmVlZGVycyA9IDA7XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLlN1YnNjcmliZVBvcHVsYXRpb25VcGRhdGVFdmVudCgkc2NvcGUsIHNlbGYudXBkYXRlUG9wdWxhdGlvbik7XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLlN1YnNjcmliZUJyZWVkZXJVcGRhdGVFdmVudCgkc2NvcGUsIHNlbGYudXBkYXRlQnJlZWRlcnMpO1xyXG4gICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UuU3Vic2NyaWJlTmV3UmV3YXJkRXZlbnQoJHNjb3BlLCBzZWxmLnJld2FyZEVhcm5lZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5yZXdhcmRFYXJuZWQgPSBmdW5jdGlvbihldmVudCwgcmV3YXJkKSB7XHJcbiAgICAgICAgICAgIC8vIGV2ZW50dWFsbHkgdGhpcyB3aWxsIHNob3cgYSBwb3B1cFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXdhcmQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlR2VuZSA9IGZ1bmN0aW9uKGlkLCBnZW5lSW5kZXgsIGdlbmVWYWx1ZXMpIHtcclxuICAgICAgICAgICAgcG9wdWxhdGlvblNlcnZpY2UudXBkYXRlTWVtYmVyKGlkLCBnZW5lSW5kZXgsIGdlbmVWYWx1ZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5hc3NpZ24gPSBmdW5jdGlvbih1bml0aWQsIGpvYlR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChqb2JUeXBlKSlcclxuICAgICAgICAgICAgICAgIHNlbGYuYWRkQnJlZWRlcih1bml0aWQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB3b3JrZXJTZXJ2aWNlLmFkZFdvcmtlcihqb2JUeXBlLCB1bml0aWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5kcm9wcGVkID0gZnVuY3Rpb24oZHJhZ0lkLCBkcm9wSWQsIHJlbGF0aXZlUG9zKSB7XHJcbiAgICAgICAgICAgIGlmIChkcm9wSWQgPT09IFwiYnJlZWRlci10YXJnZXRcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRyYWcgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJhZ0lkKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEJyZWVkZXIoZHJhZy5kYXRhKCdicmVlZGVyaWQnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuYWRkQnJlZWRlciA9IGZ1bmN0aW9uKHVuaXRpZCkge1xyXG5cclxuICAgICAgICAgICAgcG9wdWxhdGlvblNlcnZpY2UuYWRkQnJlZWRlcih1bml0aWQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYucmVtb3ZlQnJlZWRlciA9IGZ1bmN0aW9uKHVuaXRpZCkge1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5yZW1vdmVCcmVlZGVyKHVuaXRpZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVCcmVlZGVycyA9IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHNlbGYuYnJlZWRlcnMgPSBkYXRhLmJyZWVkZXJzO1xyXG4gICAgICAgICAgICBzZWxmLmlzQnJlZWRpbmcgPSBkYXRhLmlzQnJlZWRpbmc7XHJcbiAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZUJyZWVkID0gZGF0YS5zdGVwc1NpbmNlQnJlZWQ7XHJcbiAgICAgICAgICAgIHNlbGYuYnJlZWRTdGVwcyA9IGRhdGEuYnJlZWRTdGVwcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudXBkYXRlUG9wdWxhdGlvbiA9IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbiA9IGRhdGEucG9wdWxhdGlvbjtcclxuICAgICAgICAgICAgc2VsZi5uZXdib3JucyA9IGRhdGEubmV3Ym9ybnM7XHJcbiAgICAgICAgICAgIHNlbGYubWF4UG9wdWxhdGlvbiA9IGRhdGEubWF4U2l6ZTtcclxuICAgICAgICAgICAgc2VsZi5icmVlZGVyTGltaXQgPSBkYXRhLmJyZWVkZXJMaW1pdDtcclxuICAgICAgICAgICAgc2VsZi5uZXdib3JuTGltaXQgPSBkYXRhLm5ld2Jvcm5MaW1pdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZGVjaWRlRmF0ZSA9IGZ1bmN0aW9uKHVuaXRpZCwgZmF0ZSkge1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5wcm9jZXNzTmV3Ym9ybkZhdGUodW5pdGlkLCBmYXRlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuXHJcbmdhbWUuY29tcG9uZW50KFwiYmxvcWhlYWRNb3J0YWxcIiwge1xyXG4gICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50cy9tb3J0YWwvbW9ydGFsLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiYmxvcWhlYWRlci5jb250cm9sbGVycy5tb3J0YWxcIixcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgdW5pdDogXCI8XCIsXHJcbiAgICAgICAgY2FuQnJlZWQ6IFwiPFwiLFxyXG4gICAgICAgIGFzc2lnbjogXCImXCIsXHJcbiAgICAgICAgbW9kZTogXCJAXCIsXHJcbiAgICAgICAgZGlzcGxheTogXCJAXCJcclxuICAgIH1cclxufSk7XHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoXCJibG9xaGVhZGVyLmNvbnRyb2xsZXJzLm1vcnRhbFwiLCBbXHJcbiAgICBcIiR1aWJNb2RhbFwiLCBcImpvYlR5cGVzXCIsIFwiYmxvcWhlYWRHZXRHZW5lUHJvZ3Jlc3NTdHlsZVwiLCBcImdlbmVEZWZpbml0aW9uc1wiLCBcImF0dHJpYnV0ZXNcIiwgJ3Jlc291cmNlVHlwZXMnLCAncmVzb3VyY2VTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCR1aWJNb2RhbCwgam9iVHlwZXMsIGJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUsIGdlbmVEZWZpbml0aW9ucywgYXR0cmlidXRlcywgcmVzb3VyY2VUeXBlcywgcmVzb3VyY2VTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmRpc3BsYXkgPSBzZWxmLmRpc3BsYXkgfHwgJ1RJTEUnO1xyXG4gICAgICAgICAgICBzZWxmLmpvYlR5cGVzID0gam9iVHlwZXM7XHJcbiAgICAgICAgICAgIHNlbGYuZ2VuZURlZmluaXRpb25zID0gZ2VuZURlZmluaXRpb25zO1xyXG4gICAgICAgICAgICBzZWxmLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlVHlwZXMgPSByZXNvdXJjZVR5cGVzO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlU2VydmljZSA9IHJlc291cmNlU2VydmljZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuY2FuQmFuaXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzZWxmLnVuaXQuYmFuaXNoQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvc3QgPSBzZWxmLnVuaXQuYmFuaXNoQ29zdFtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlU2VydmljZS5nZXRSZXNvdXJjZShjb3N0LnJlc291cmNlVHlwZSkgPCBjb3N0LmFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFzc2lnbk1lID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgZG9Bc3NpZ24gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJCQU5JU0hcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwZW50ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VsZi51bml0LmJhbmlzaENvc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29zdCA9IHNlbGYudW5pdC5iYW5pc2hDb3N0W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc291cmNlU2VydmljZS5jaGFuZ2VSZXNvdXJjZShjb3N0LnJlc291cmNlVHlwZSwgKC0xICogY29zdC5hbW91bnQpKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9Bc3NpZ24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VTZXJ2aWNlLmNoYW5nZVJlc291cmNlKHNwZW50LnR5cGUsIHNwZW50LmFtb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlbnQucHVzaCh7IHR5cGU6IGNvc3QucmVzb3VyY2VUeXBlLCBhbW91bnQ6IGNvc3QuYW1vdW50IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZG9Bc3NpZ24pXHJcbiAgICAgICAgICAgICAgICBzZWxmLmFzc2lnbih7ICRpZDogc2VsZi51bml0LmlkLCAkdHlwZTogdHlwZSB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0R2VuZVRyYWl0UmFuZ2VTdHlsZSA9IGZ1bmN0aW9uKGcsIHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUudHJhaXRSYW5nZShnLCB0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0R2VuZVJhbmdlU3R5bGUgPSBmdW5jdGlvbihnZW5lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBibG9xaGVhZEdldEdlbmVQcm9ncmVzc1N0eWxlLnJhbmdlKGdlbmVbMF0sIGdlbmVbMV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5nZXRHZW5lVmFsdWVTdHlsZSA9IGZ1bmN0aW9uKGcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUudmFsdWUoZ1sxXSAtIGdbMF0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5pbWFnZUhvdmVyID0gZnVuY3Rpb24oaG92ZXJFdmVudCkge1xyXG4gICAgICAgICAgICB2YXIgYXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNlbGYuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgYXR0cnMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbWdXaWR0aCA9IGhvdmVyRXZlbnQudGFyZ2V0LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0WCA9IGhvdmVyRXZlbnQub2Zmc2V0WDtcclxuICAgICAgICAgICAgdmFyIGF0dHJTaXplID0gaW1nV2lkdGggLyA1O1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKG9mZnNldFggLyBhdHRyU2l6ZSk7XHJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5taW4oYXR0cnMubGVuZ3RoIC0gMSwgaW5kZXgpO1xyXG4gICAgICAgICAgICBzZWxmLmhvdmVyQXR0ciA9IGF0dHJzW2luZGV4XTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2hvd0RldGFpbHMgPSBmdW5jdGlvbih1bml0KSB7XHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2dlbm9tZUVkaXRvcicsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTsiLCJ2YXIgZ2FtZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWRQbGF5ZXJCb3gnLCB7XHJcbiAgICB0cmFuc2NsdWRlOiB7XHJcbiAgICAgICAgJ2JveFRpdGxlSHRtbCc6ICc/YmxvcWhlYWRQbGF5ZXJCb3hUaXRsZSdcclxuICAgIH0sXHJcbiAgICByZXF1aXJlOiB7XHJcbiAgICAgICAgbWFpbkN0cmw6IFwiXmJsb3FoZWFkLmNvbXBvbmVudHMuaG9tZVwiXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3BsYXllckJveC9wbGF5ZXJCb3guaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMucGxheWVyQm94JyxcclxuICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgYm94VGl0bGU6ICdAJyxcclxuICAgICAgICBmb290ZXI6ICdAJyxcclxuICAgICAgICBtYXhIZWlnaHQ6ICdAJ1xyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG5nYW1lLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLnBsYXllckJveCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2VsZi51bml0ID0gc2VsZi5tYWluQ3RybC51bml0O1xyXG4gICAgfTtcclxuICAgIHNlbGYubWF4SGVpZ2h0T3ZlcmlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByZXQgPSB7fTtcclxuICAgICAgICBpZiAodHlwZW9mKHNlbGYubWF4SGVpZ2h0KSAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXQubWF4SGVpZ2h0ID0gc2VsZi5tYXhIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG59KTtcclxuXHJcbmdhbWUuY29tcG9uZW50KCdibG9xaGVhZFBsYXllckJveFRpdGxlJywge1xyXG4gICAgcmVxdWlyZToge1xyXG4gICAgICAgIHBsYXllckJveEN0cmw6IFwiXmJsb3FoZWFkUGxheWVyQm94XCJcclxuICAgIH0sXHJcbn0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuZmlsdGVyKCdhcHBseVBvcHVsYXRpb25GaWx0ZXInLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCwgZmlsdGVyKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcclxuICAgICAgICB2YXIgbm9ubWF0Y2hlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgICBmaWx0ZXIgPSBKU09OLnBhcnNlKGZpbHRlcik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY3JpdGVyaWFNZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyICYmIGZpbHRlci50cmFpdHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgZmlsdGVyLnRyYWl0cy5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFpdCA9IGZpbHRlci50cmFpdHNbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFpdFswXSA9PSAnLScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaXQgPSB0cmFpdC5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYiAhPT0gaW5wdXRbaV0uaGFzVHJhaXQodHJhaXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyaXRlcmlhTWV0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3JpdGVyaWFNZXQpXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goaW5wdXRbaV0pO1xyXG4gICAgICAgICAgICBpZiAoIWNyaXRlcmlhTWV0KVxyXG4gICAgICAgICAgICAgICAgbm9ubWF0Y2hlcy5wdXNoKGlucHV0W2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXRjaGVzO1xyXG4gICAgfTtcclxufSk7XHJcblxyXG5nYW1lLnNlcnZpY2UoXCJibG9xaGVhZEdldEdlbmVQcm9ncmVzc1N0eWxlXCIsIFsnZ2VuZURlZmluaXRpb25zJywgZnVuY3Rpb24oZ2VuZURlZmluaXRpb25zKSB7XHJcbiAgICBmdW5jdGlvbiBtYXAoT2xkVmFsdWUsIE9sZE1pbiwgT2xkTWF4LCBOZXdNaW4sIE5ld01heCkge1xyXG4gICAgICAgIHJldHVybiAoKChPbGRWYWx1ZSAtIE9sZE1pbikgKiAoTmV3TWF4IC0gTmV3TWluKSkgLyAoT2xkTWF4IC0gT2xkTWluKSkgKyBOZXdNaW47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByYW5nZTogZnVuY3Rpb24ocmVjLCBkb20pIHtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgb3MgPSBtYXAoLTEgKiByZWMsIC0yNTUsIDI1NSwgMCwgMTAwKTtcclxuICAgICAgICAgICAgdmFyIHcgPSBtYXAoZG9tLCAtMjU1LCAyNTUsIDAsIDEwMCk7XHJcbiAgICAgICAgICAgIHJldC5tYXJnaW5MZWZ0ID0gb3MgKyAnJSc7XHJcbiAgICAgICAgICAgIHJldC53aWR0aCA9ICh3IC0gb3MpICsgJyUnO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHJhaXRSYW5nZTogZnVuY3Rpb24oZywgdHJhaXQpIHtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgICAgICBpZiAodHJhaXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gZ2VuZURlZmluaXRpb25zLmluZGV4T2YoZyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRyYWl0LmdlbmVzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRnID0gdHJhaXQuZ2VuZXNbeF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRnWzBdID09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9zID0gbWFwKHRnWzFdLCAtMjU1LCAyNTUsIDAsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ID0gbWFwKHRnWzJdLCAtMjU1LCAyNTUsIDAsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5tYXJnaW5MZWZ0ID0gb3MgKyAnJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC53aWR0aCA9ICh3IC0gb3MpICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICB2YXIgbCA9IG1hcCh2LCAtMjU1LCAyNTUsIDAsIDEwMCk7XHJcbiAgICAgICAgICAgIGlmIChsID4gOTgpIGwgPSA5ODtcclxuICAgICAgICAgICAgaWYgKGwgPCAyKSBsID0gMjtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogKGwgLSAyKSArICclJyxcclxuICAgICAgICAgICAgICAgIHRvcDogJzBweCcsXHJcbiAgICAgICAgICAgICAgICBib3R0b206ICcwcHgnLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICc0JScsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgICAgICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgYmxhY2snXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTtcclxuXHJcbi8vIFBPUFVMQVRJT04gTElTVFxyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkUG9wdWxhdGlvbkxpc3QnLCB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcG9wdWxhdGlvbkxpc3QvcG9wdWxhdGlvbkxpc3QuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMucG9wdWxhdGlvbkxpc3QnLFxyXG4gICAgYmluZGluZ3M6IHtcclxuICAgICAgICBjYW5CcmVlZDogJzwnLFxyXG4gICAgICAgIGJyZWVkZXJBc3NpZ246ICcmJyxcclxuICAgICAgICBwb3B1bGF0aW9uOiAnPCcsXHJcbiAgICAgICAgbWF4UG9wdWxhdGlvbjogJz0nXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy5wb3B1bGF0aW9uTGlzdCcsIFtcclxuICAgICckdWliTW9kYWwnLCAncmVzb3VyY2VTZXJ2aWNlJywgJ3Jlc291cmNlVHlwZXMnLCAnam9iVHlwZXMnLFxyXG4gICAgZnVuY3Rpb24oJHVpYk1vZGFsLCByZXNvdXJjZVNlcnZpY2UsIHJlc291cmNlVHlwZXMsIGpvYlR5cGVzKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuam9iVHlwZXMgPSBqb2JUeXBlcztcclxuICAgICAgICBzZWxmLmNyaXRlcmlhID0gW107XHJcblxyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuICAgICAgICBzZWxmLnNob3dEZXRhaWxzID0gZnVuY3Rpb24odW5pdCkge1xyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdnZW5vbWVFZGl0b3InLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0Q3VzdG9tRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFpdHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmNyaXRlcmlhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHNlbGYuY3JpdGVyaWFbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYy50eXBlID09ICd0cmFpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFpdHMucHVzaChjLnZhbC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgdHJhaXRzOiB0cmFpdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGVDcml0ZXJpYSA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHNlbGYuY3JpdGVyaWEuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5vcGVuVHJhaXRTZWxlY3RvciA9IGZ1bmN0aW9uKHVuaXQpIHtcclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdibG9xaGVhZFRyYWl0U2VsZWN0b3InLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICB1bml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24odHJhaXQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3JpdGVyaWEucHVzaCh7IHR5cGU6ICd0cmFpdCcsIHZhbDogdHJhaXQgfSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8kbG9nLmluZm8oJ21vZGFsLWNvbXBvbmVudCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHNlbGYuc2hvd0RldGFpbHMgPSBmdW5jdGlvbih1bml0KSB7XHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2dlbm9tZUVkaXRvcicsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bml0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XHJcbl0pO1xyXG5cclxuLy8gUE9QVUxBVElPTiBQQU5FXHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWRQb3B1bGF0aW9uUGFuZWwnLCB7XHJcbiAgICByZXF1aXJlOiB7XHJcbiAgICAgICAgcGFyZW50OiAnXmJsb3FoZWFkUG9wdWxhdGlvbkxpc3QnXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3BvcHVsYXRpb25MaXN0L3BvcHVsYXRpb25QYW5lbC5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdibG9xaGVhZC5jb250cm9sbGVycy5wb3B1bGF0aW9uUGFuZWwnLFxyXG4gICAgYmluZGluZ3M6IHtcclxuICAgICAgICBwb3B1bGF0aW9uOiAnPCcsXHJcbiAgICAgICAgZmlsdGVyOiAnPCcsXHJcbiAgICAgICAgb3JkZXJCeTogJzwnXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy5wb3B1bGF0aW9uUGFuZWwnLCBbXHJcbiAgICAnYmxvcWhlYWRHZXRHZW5lUHJvZ3Jlc3NTdHlsZScsICdnZW5lRGVmaW5pdGlvbnMnLCAncmVzb3VyY2VUeXBlcycsICdyZXNvdXJjZVNlcnZpY2UnLCAnYXR0cmlidXRlcycsXHJcbiAgICBmdW5jdGlvbihibG9xaGVhZEdldEdlbmVQcm9ncmVzc1N0eWxlLCBnZW5lRGVmaW5pdGlvbnMsIHJlc291cmNlVHlwZXMsIHJlc291cmNlU2VydmljZSwgYXR0cmlidXRlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmdlbmVEZWZpbml0aW9ucyA9IGdlbmVEZWZpbml0aW9ucztcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xyXG4gICAgICAgIHNlbGYucmVzb3VyY2VUeXBlcyA9IHJlc291cmNlVHlwZXM7XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYub3JkZXJCeSA9IHNlbGYub3JkZXJCeSB8fCAnLWR0JztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0R2VuZVRyYWl0UmFuZ2VTdHlsZSA9IGZ1bmN0aW9uKGcsIHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUudHJhaXRSYW5nZShnLCB0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0R2VuZVJhbmdlU3R5bGUgPSBmdW5jdGlvbihnZW5lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBibG9xaGVhZEdldEdlbmVQcm9ncmVzc1N0eWxlLnJhbmdlKGdlbmVbMF0sIGdlbmVbMV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5nZXRHZW5lVmFsdWVTdHlsZSA9IGZ1bmN0aW9uKGcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb3FoZWFkR2V0R2VuZVByb2dyZXNzU3R5bGUudmFsdWUoZ1sxXSAtIGdbMF0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5nZXRXb3JrZXJJY29uID0gZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZVNlcnZpY2UuZ2V0V29ya2VySWNvbihyZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5pbWFnZUhvdmVyID0gZnVuY3Rpb24oaG92ZXJFdmVudCkge1xyXG4gICAgICAgICAgICB2YXIgYXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNlbGYuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgYXR0cnMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbWdXaWR0aCA9IGhvdmVyRXZlbnQudGFyZ2V0LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0WCA9IGhvdmVyRXZlbnQub2Zmc2V0WDtcclxuICAgICAgICAgICAgdmFyIGF0dHJTaXplID0gaW1nV2lkdGggLyA1O1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKG9mZnNldFggLyBhdHRyU2l6ZSk7XHJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5taW4oYXR0cnMubGVuZ3RoIC0gMSwgaW5kZXgpO1xyXG4gICAgICAgICAgICBzZWxmLmhvdmVyQXR0ciA9IGF0dHJzW2luZGV4XTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5dKTtcclxuXHJcbi8vIFRSQUlUIFNFTEVDVE9SXHJcblxyXG5nYW1lLmNvbXBvbmVudCgnYmxvcWhlYWRUcmFpdFNlbGVjdG9yJywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3BvcHVsYXRpb25MaXN0L3RyYWl0U2VsZWN0b3IuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMudHJhaXRTZWxlY3RvcicsXHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgIGRpc21pc3M6ICcmJ1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMudHJhaXRTZWxlY3RvcicsIFtcclxuICAgICd0cmFpdERlZmluaXRpb25zJywgJ2dlbmVEZWZpbml0aW9ucycsICdibG9xaGVhZEdldEdlbmVQcm9ncmVzc1N0eWxlJyxcclxuICAgIGZ1bmN0aW9uKHRyYWl0RGVmaW5pdGlvbnMsIGdlbmVEZWZpbml0aW9ucywgYmxvcWhlYWRHZXRHZW5lUHJvZ3Jlc3NTdHlsZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnRyYWl0ID0gbnVsbDtcclxuICAgICAgICBzZWxmLnRyYWl0RGVmaW5pdGlvbnMgPSB0cmFpdERlZmluaXRpb25zO1xyXG4gICAgICAgIHNlbGYuZ2VuZURlZmluaXRpb25zID0gZ2VuZURlZmluaXRpb25zO1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi50cmFpdEVudGVyID0gZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgICBzZWxmLnRyYWl0ID0gdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudHJhaXRMZWF2ZSA9IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICAgICAgc2VsZi50cmFpdCA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdCA9IHNlbGYucmVzb2x2ZS51bml0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZWxlY3QgPSBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgIHNlbGYuY2xvc2UoeyAkdmFsdWU6IHQgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5vayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmNsb3NlKHsgJHZhbHVlOiBzZWxmLnRyYWl0IH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZGlzbWlzcyh7ICR2YWx1ZTogJ2NhbmNlbCcgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldEdlbmVSYW5nZVN0eWxlID0gZnVuY3Rpb24oZykge1xyXG4gICAgICAgICAgICByZXR1cm4gYmxvcWhlYWRHZXRHZW5lUHJvZ3Jlc3NTdHlsZS50cmFpdFJhbmdlKGcsIHNlbGYudHJhaXQpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkUmVzb3VyY2VMaXN0Jywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Jlc291cmNlTGlzdC9yZXNvdXJjZUxpc3QuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMucmVzb3VyY2VMaXN0J1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmdhbWUuY29udHJvbGxlcignYmxvcWhlYWQuY29udHJvbGxlcnMucmVzb3VyY2VMaXN0JywgW1xyXG4gICAgJyRzY29wZScsICdyZXNvdXJjZVNlcnZpY2UnLCAncmVzb3VyY2VUeXBlcycsICd3b3JrZXJTZXJ2aWNlJywgJ2pvYlR5cGVzJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgcmVzb3VyY2VTZXJ2aWNlLCByZXNvdXJjZVR5cGVzLCB3b3JrZXJTZXJ2aWNlLCBqb2JUeXBlcykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnJlc291cmNlVHlwZXMgPSByZXNvdXJjZVR5cGVzO1xyXG4gICAgICAgIHNlbGYuam9iVHlwZXMgPSBqb2JUeXBlcztcclxuICAgICAgICBzZWxmLnJlc291cmNlcyA9IHt9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFdvcmtlckljb24gPSBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlU2VydmljZS5nZXRXb3JrZXJJY29uKHJlcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5TdWJzY3JpYmVSZXNvdXJjZUNoYW5nZWRFdmVudCgkc2NvcGUsIHNlbGYucmVzb3VyY2VDaGFuZ2VkKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VTZXJ2aWNlLlN1YnNjcmliZVJlc291cmNlTGltaXRDaGFuZ2VkRXZlbnQoJHNjb3BlLCBzZWxmLnJlc291cmNlTGltaXRDaGFuZ2VkKTtcclxuICAgICAgICAgICAgcmVzb3VyY2VTZXJ2aWNlLlN1YnNjcmliZVJlc291cmNlRW5hYmxlZEV2ZW50KCRzY29wZSwgc2VsZi5yZXNvdXJjZUVuYWJsZWQpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlcyA9IHJlc291cmNlU2VydmljZS5nZXRSZXNvdXJjZXNTbmFwc2hvdCgpO1xyXG4gICAgICAgICAgICBzZWxmLndvcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgd29ya2VyU2VydmljZS5TdWJzY3JpYmVXb3JrZXJzQ2hhbmdlZEV2ZW50KCRzY29wZSwgc2VsZi51cGRhdGVXb3JrZXJzKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVdvcmtlcnMgPSBmdW5jdGlvbihldmVudCwgd29ya2Vycykge1xyXG4gICAgICAgICAgICBzZWxmLndvcmtlcnMgPSB3b3JrZXJzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0VW5sb2NrZWRSZXNvdXJjZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJldCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciByZXMgaW4gc2VsZi5yZXNvdXJjZXMpXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzKSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNvdXJjZXNbcmVzXVsyXSA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0W3Jlc10gPSBzZWxmLnJlc291cmNlc1tyZXNdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgc2VsZi5nZXRXb3JrZXJDb3VudCA9IGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAgICAgICB2YXIgcmV0ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLndvcmtlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMgPT09IHNlbGYud29ya2Vyc1tpXS5yZXNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICByZXQgKz0gc2VsZi53b3JrZXJzW2ldLmNvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kcm9wcGVkID0gZnVuY3Rpb24oZHJhZ0lkLCBkcm9wSWQsIHJlbGF0aXZlUG9zLCByZXNvdXJjZUtleSkge1xyXG4gICAgICAgICAgICB2YXIgam9iVHlwZSA9IHJlc291cmNlVHlwZXNbcmVzb3VyY2VLZXldLmppZHNbMF07XHJcbiAgICAgICAgICAgIHZhciB1bml0aWQgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJhZ0lkKSkuZGF0YSgnYnJlZWRlcmlkJyk7XHJcbiAgICAgICAgICAgIHdvcmtlclNlcnZpY2UuYWRkV29ya2VyKGpvYlR5cGUsIHVuaXRpZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5yZXNvdXJjZUNoYW5nZWQgPSBmdW5jdGlvbihldmVudCwgcmVzb3VyY2VUeXBlLCBhbW91bnQpIHtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdKVxyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXSA9IFtdO1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdWzBdID0gYW1vdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yZXNvdXJjZUxpbWl0Q2hhbmdlZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXNvdXJjZVR5cGUsIGFtb3VudCkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYucmVzb3VyY2VzW3Jlc291cmNlVHlwZV0pXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdID0gW107XHJcbiAgICAgICAgICAgIHNlbGYucmVzb3VyY2VzW3Jlc291cmNlVHlwZV1bMV0gPSBhbW91bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJlc291cmNlRW5hYmxlZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXNvdXJjZVR5cGUsIGJpdCkge1xyXG4gICAgICAgICAgICBzZWxmLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdWzJdID0gYml0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG5dKTsiLCJ2YXIgZ2FtZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XHJcblxyXG5cclxuXHJcbmdhbWUuc2VydmljZSgnYWNoaWV2ZW1lbnRTZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnJGZpbHRlcicsICdhY2hpZXZlbWVudFNldHVwJywgJ2xvZ1NlcnZpY2UnLCAnZ2VuZURlZmluaXRpb25zJywgJ3Jlc291cmNlVHlwZXMnLCAnZGVmYXVsdEJ1aWxkaW5ncycsXHJcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZmlsdGVyLCBhY2hpZXZlbWVudFNldHVwLCBsb2dTZXJ2aWNlLCBnZW5lRGVmaW5pdGlvbnMsIHJlc291cmNlVHlwZXMsIGRlZmF1bHRCdWlsZGluZ3MpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zdGF0ZSA9IHN0YXRlIHx8IHt9O1xyXG4gICAgICAgICAgICBzZWxmLmFjaGlldmVtZW50U2V0dXAgPSBhY2hpZXZlbWVudFNldHVwIHx8IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXRlLmhhc093blByb3BlcnR5KCdwcm9ncmVzcycpKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjaGlldmVtZW50czoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmtzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdGU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRQcm9ncmVzc1NuYXBzaG90ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmNvcHkoc2VsZi5zdGF0ZS5wcm9ncmVzcyk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlUHJvZ3Jlc3MgPSBmdW5jdGlvbihhaWQsIGFtb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgYWNoUHJvZ3Jlc3MgPSBzZWxmLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdO1xyXG4gICAgICAgICAgICB2YXIgYWNoU2V0dXAgPSBzZWxmLmFjaGlldmVtZW50U2V0dXAuYWNoaWV2ZW1lbnRzW2FpZF07XHJcbiAgICAgICAgICAgIGlmICghYWNoUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgIGFjaFByb2dyZXNzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFpZDogYWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogMCxcclxuICAgICAgICAgICAgICAgICAgICBsYXN0UmFuazogMCxcclxuICAgICAgICAgICAgICAgICAgICBuZXh0UmFuazogc2VsZi5nZXROZXh0UmFua0Ftb3VudChhaWQsIDApXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5wcm9ncmVzcy5hY2hpZXZlbWVudHNbYWlkXSA9IGFjaFByb2dyZXNzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgb2xkdmFsID0gYWNoUHJvZ3Jlc3MuYW1vdW50O1xyXG4gICAgICAgICAgICB2YXIgbmV3dmFsID0gb2xkdmFsO1xyXG4gICAgICAgICAgICBpZiAoKGFjaFNldHVwLmN1bXVsYXRpdmUgfHwgZmFsc2UpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gb2xkdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3dmFsID0gYW1vdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIG5ldmVyIHRha2UgYXdheSBzb21ldGhpbmcgdGhleSBoYXZlIGFjaGlldmVkXHJcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld3ZhbCA9IGFjaFByb2dyZXNzLmFtb3VudCArIGFtb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWNoUHJvZ3Jlc3MuYW1vdW50ID0gbmV3dmFsO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9sZHZhbCAhPSBuZXd2YWwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHJjID0gMDsgcmMgPCBhY2hTZXR1cC5yYW5rcy5sZW5ndGg7IHJjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW1vdW50UmVxdWlyZWQgPSBhY2hTZXR1cC5yYW5rc1tyY11bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFtb3VudFJlcXVpcmVkID4gYWNoUHJvZ3Jlc3MubGFzdFJhbmsgJiYgYW1vdW50UmVxdWlyZWQgPiBvbGR2YWwgJiYgYW1vdW50UmVxdWlyZWQgPD0gbmV3dmFsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2cgdGhlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHNlbGYuZ2V0QWNoaWV2ZW1lbnRNZXNzYWdlKGFjaFNldHVwLmFpZCwgYW1vdW50UmVxdWlyZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dTZXJ2aWNlLmxvZ0FjaGlldmVtZW50TWVzc2FnZShtc2cpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjaFByb2dyZXNzLmxhc3RSYW5rID0gYW1vdW50UmVxdWlyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjaFByb2dyZXNzLm5leHRSYW5rID0gc2VsZi5nZXROZXh0UmFua0Ftb3VudChhaWQsIGFjaFByb2dyZXNzLmFtb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV3YXJkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnQ6IGFjaFNldHVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50UmVxdWlyZWQ6IGFtb3VudFJlcXVpcmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBtc2csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJrczogW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyB0aGUgcGVya3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcGMgPSAwOyBwYyA8IGFjaFNldHVwLnJhbmtzW3JjXVsxXS5sZW5ndGg7IHBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gc2VsZi5hcHBseVBlcmsoYWNoU2V0dXAucmFua3NbcmNdWzFdW3BjXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJld2FyZC5wZXJrcy5wdXNoKHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCduZXdSZXdhcmRFdmVudCcsIHJld2FyZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuYXBwbHlQZXJrID0gZnVuY3Rpb24oYXJyKSB7XHJcbiAgICAgICAgICAgIHZhciBwaWQgPSBhcnJbMF07XHJcbiAgICAgICAgICAgIHZhciBwZXJrU2V0dXAgPSBhY2hpZXZlbWVudFNldHVwLnBlcmtzW3BpZF07XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB0aGlzIHBlcmsgY2FuIG9ubHkgYmUgZWFybmVkIG9uY2UgYW5kIHRoZSBwbGF5ZXIgaGFzIGVhcm5lZCBpdCBhbHJlYWR5LFxyXG4gICAgICAgICAgICAvLyB3ZSBkbyBub3QgaGF2ZSB0byBkbyBhbnl0aGluZ1xyXG4gICAgICAgICAgICBpZiAocGVya1NldHVwLm9uY2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwZXJrU2VhcmNoID0gJGZpbHRlcignZmlsdGVyJykoc2VsZi5zdGF0ZS5wcm9ncmVzcy5wZXJrcywgeyBwaWQ6IHBpZCB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChwZXJrU2VhcmNoLmxlbmd0aCAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gbG9nIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgIHZhciBtc2cgPSBzZWxmLmdldFBlcmtNZXNzYWdlKGFyciwgcGVya1NldHVwKTtcclxuICAgICAgICAgICAgbG9nU2VydmljZS5sb2dBY2hpZXZlbWVudE1lc3NhZ2UobXNnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXQgPSB7XHJcbiAgICAgICAgICAgICAgICBwaWQ6IHBpZCxcclxuICAgICAgICAgICAgICAgIG1zZzogbXNnLFxyXG4gICAgICAgICAgICAgICAgYXJyOiBhcnIsXHJcbiAgICAgICAgICAgICAgICBkdDogKG5ldyBEYXRlKCkpLnRvVVRDU3RyaW5nKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2VsZi5zdGF0ZS5wcm9ncmVzcy5wZXJrcy5wdXNoKHJldCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0TmV4dFJhbmtBbW91bnQgPSBmdW5jdGlvbihhaWQsIGN1cnJlbnRBbW91bnQpIHtcclxuICAgICAgICAgICAgdmFyIHJhbmtzID0gYWNoaWV2ZW1lbnRTZXR1cC5hY2hpZXZlbWVudHNbYWlkXS5yYW5rcztcclxuICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gc2VsZi5zdGF0ZS5wcm9ncmVzcy5hY2hpZXZlbWVudHNbYWlkXTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vIHByb2dyZXNzIGFuZCBhdCBsZWFzdCBvbmUgcmFua1xyXG4gICAgICAgICAgICBpZiAoIXByb2dyZXNzICYmIHJhbmtzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYW5rc1swXVswXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBmaXJzdCByYW5rIGFib3ZlIHRoZSBjdXJyZW50IGFtb3VudFxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmFua3NbaV1bMF0gPiBwcm9ncmVzcy5hbW91bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFua3NbaV1bMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG5vIG1vcmUgcmFua3NcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0QWNoaWV2ZW1lbnRNZXNzYWdlID0gZnVuY3Rpb24oYWlkLCBhbW91bnRSZXF1aXJlZCwgcHJvcCkge1xyXG4gICAgICAgICAgICB2YXIgYWNoU2V0dXAgPSBhY2hpZXZlbWVudFNldHVwLmFjaGlldmVtZW50c1thaWRdO1xyXG4gICAgICAgICAgICB2YXIgbXNnID0gKGFjaFNldHVwW3Byb3BdIHx8IGFjaFNldHVwLmxvZ21zZyB8fCBhY2hTZXR1cC5kZXNjIHx8IGFjaFNldHVwLm5hbWUgfHwgJ1Vua25vd24nKTtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGFjaFNldHVwLm5hbWUsXHJcbiAgICAgICAgICAgICAgICByZXE6IGFtb3VudFJlcXVpcmVkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHBhcmFtcy5uYW1lID0gJGZpbHRlcignZm10JykocGFyYW1zLm5hbWUsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdmbXQnKShtc2csIHBhcmFtcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRQZXJrTWVzc2FnZSA9IGZ1bmN0aW9uKGFyciwgcHJvcCkge1xyXG4gICAgICAgICAgICB2YXIgcGlkID0gYXJyWzBdO1xyXG4gICAgICAgICAgICB2YXIgcGVya1NldHVwID0gYWNoaWV2ZW1lbnRTZXR1cC5wZXJrc1twaWRdO1xyXG4gICAgICAgICAgICB2YXIgbXNnID0gKHBlcmtTZXR1cFtwcm9wXSB8fCBwZXJrU2V0dXAubG9nbXNnIHx8IHBlcmtTZXR1cC5kZXNjIHx8IHBlcmtTZXR1cC5uYW1lIHx8ICdVbmtub3duJyk7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBwZXJrU2V0dXAubmFtZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmtTZXR1cC5waWQuc3Vic3RyaW5nKDAsIDQpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQX0dfJzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VuZSA9IGdlbmVEZWZpbml0aW9uc1thcnJbMV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kb20gPSBnZW5lLmRvbTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMucmVjID0gZ2VuZS5yZWM7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmF0dHIgPSBnZW5lLmF0dHI7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmFtdCA9IGFyclsyXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BfUl8nOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5yZXMgPSByZXNvdXJjZVR5cGVzW2FyclsxXV0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuYW10ID0gYXJyWzJdIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQX0JfJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuYnVpbGRpbmdUeXBlID0gZGVmYXVsdEJ1aWxkaW5nc1thcnJbMV1dLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmFtdCA9IGFyclsyXSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wbHVyYWwgPSBwYXJhbXMuYW10ID4gMSA/IFwic1wiIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpXSA9IGFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJhbXMubmFtZSA9ICRmaWx0ZXIoJ2ZtdCcpKHBhcmFtcy5uYW1lLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gJGZpbHRlcignZm10JykobXNnLCBwYXJhbXMpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBzZWxmLlN1YnNjcmliZU5ld1Jld2FyZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ25ld1Jld2FyZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5zZXJ2aWNlKCdidWlsZGluZ1NlcnZpY2UnLCBbXHJcbiAgICAnJHJvb3RTY29wZScsICckZmlsdGVyJywgJ2RlZmF1bHRCdWlsZGluZ3MnLCAncmVzb3VyY2VUeXBlcycsICdyZXNvdXJjZVNlcnZpY2UnLCAncG9wdWxhdGlvblNlcnZpY2UnLCAnYWNoaWV2ZW1lbnRTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRmaWx0ZXIsIGRlZmF1bHRCdWlsZGluZ3MsIHJlc291cmNlVHlwZXMsIHJlc291cmNlU2VydmljZSwgcG9wdWxhdGlvblNlcnZpY2UsIGFjaGlldmVtZW50U2VydmljZSkge1xyXG4gICAgICAgIC8qIHByaXZhdGUgbWVtYmVycyAqL1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgc3RhdGU7XHJcbiAgICAgICAgdmFyIGxhc3RTbmFwc2hvdDtcclxuICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihsb2FkU3RhdGUpIHtcclxuICAgICAgICAgICAgbG9hZFN0YXRlLmJ1aWxkaW5ncyA9IGFuZ3VsYXIubWVyZ2Uoe30sIGRlZmF1bHRCdWlsZGluZ3MsIGxvYWRTdGF0ZS5idWlsZGluZ3MpO1xyXG4gICAgICAgICAgICBzdGF0ZSA9IGFuZ3VsYXIubWVyZ2Uoe30sIHN0YXRlLCBsb2FkU3RhdGUpO1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZSgnYWxsJyk7XHJcbiAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5TdWJzY3JpYmVSZXNvdXJjZUNoYW5nZWRFdmVudCgkcm9vdFNjb3BlLCBoYW5kbGVSZXNvdXJjZUNoYW5nZSk7XHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50U2VydmljZS5TdWJzY3JpYmVOZXdSZXdhcmRFdmVudCgkcm9vdFNjb3BlLCBzZWxmLnJld2FyZEVhcm5lZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNhdmVTdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkaW5nczoge31cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHN0YXRlLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJ1aWxkaW5ncy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gc3RhdGUuYnVpbGRpbmdzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZVN0YXRlLmJ1aWxkaW5nc1trZXldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZWQ6IGJ1aWxkaW5nLnB1cmNoYXNlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2lmdGVkOiBidWlsZGluZy5naWZ0ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVubG9ja2VkOiBidWlsZGluZy51bmxvY2tlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllcjogYnVpbGRpbmcubXVsdGlwbGllclxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNhdmVTdGF0ZTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5nZXRCdWlsZGluZ1NuYXBzaG90ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUuYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzdGF0ZS5idWlsZGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmcudW5sb2NrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRDb3N0ID0gY2FsY3VsYXRlTmV4dENvc3QoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IGdldFNpemUoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1aWxkaW5nLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZm9ybWF0RGVzY3JpcHRpb24oYnVpbGRpbmcsIHsgc2l6ZTogc2l6ZSB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lZDogYnVpbGRpbmcucHVyY2hhc2VkICsgYnVpbGRpbmcuZ2lmdGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29zdFRvQnVpbGQ6IG5leHRDb3N0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuQnVpbGQ6IGNhbkJ1aWxkKGJ1aWxkaW5nLCBuZXh0Q29zdClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKGxhc3RTbmFwc2hvdCwgc25hcHNob3QpKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdidWlsZGluZ3NDaGFuZ2VkRXZlbnQnLCBhbmd1bGFyLmNvcHkoc25hcHNob3QpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0U25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weShzbmFwc2hvdCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZSkge1xyXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKHVzZSkgfHwgdXNlID09PSAnYWxsJykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTdG9yYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUJyZWVkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUhvdXNpbmcoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlTnVyc2VyeSgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVzZSA9PT0gJ3N0b3JhZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVN0b3JhZ2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2UgPT09ICdob3VzaW5nJykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVIb3VzaW5nKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlID09PSAnYnJlZWRpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUJyZWVkZXJzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlID09PSAnbmV3Ym9ybicpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlTnVyc2VyeSgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVzZSA9PT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLm5vb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmdldEJ1aWxkaW5nU25hcHNob3QoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudXBkYXRlQnJlZWRlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB0eXBlTXVsdCA9IHN0YXRlLmJyZWVkaW5nU2l6ZU11bHRpcGxpZXIgfHwgMTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHN0YXRlLmJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmJ1aWxkaW5ncy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1aWxkaW5nID0gc3RhdGUuYnVpbGRpbmdzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1aWxkaW5nLnVzZSA9PT0gJ2JyZWVkaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggKz0gTWF0aC5mbG9vcihidWlsZGluZy5zaXplICogKGJ1aWxkaW5nLnB1cmNoYXNlZCArIGJ1aWxkaW5nLmdpZnRlZCkgKiBidWlsZGluZy5tdWx0aXBsaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF4ICo9IHR5cGVNdWx0O1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5zZXRCcmVlZGVyTGltaXQoTWF0aC5mbG9vcihtYXgpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYudXBkYXRlTnVyc2VyeSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4ID0gMDtcclxuICAgICAgICAgICAgdmFyIHR5cGVNdWx0ID0gc3RhdGUubmV3Ym9yblNpemVNdWx0aXBsaWVyIHx8IDE7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZS5idWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5idWlsZGluZ3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBidWlsZGluZyA9IHN0YXRlLmJ1aWxkaW5nc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICduZXdib3JuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggKz0gTWF0aC5mbG9vcihidWlsZGluZy5zaXplICogKGJ1aWxkaW5nLnB1cmNoYXNlZCArIGJ1aWxkaW5nLmdpZnRlZCkgKiBidWlsZGluZy5tdWx0aXBsaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF4ICo9IHR5cGVNdWx0O1xyXG4gICAgICAgICAgICBwb3B1bGF0aW9uU2VydmljZS5zZXROdXJzZXJ5TGltaXQoTWF0aC5mbG9vcihtYXgpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHR5cGVNdWx0ID0gc3RhdGUuc3RvcmFnZVNpemVNdWx0aXBsaWVyIHx8IDE7XHJcbiAgICAgICAgICAgIHZhciByZXNvdXJjZXMgPSByZXNvdXJjZVNlcnZpY2UuZ2V0UmVzb3VyY2VzU25hcHNob3QoKTtcclxuICAgICAgICAgICAgdmFyIHJ0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZS5idWlsZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5idWlsZGluZ3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBidWlsZGluZyA9IHN0YXRlLmJ1aWxkaW5nc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdzdG9yYWdlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydC5wdXNoKGJ1aWxkaW5nLnN0b3Jlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlc1tidWlsZGluZy5zdG9yZXNdLm5ld0Ftb3VudCA9IHJlc291cmNlc1tidWlsZGluZy5zdG9yZXNdLm5ld0Ftb3VudCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbYnVpbGRpbmcuc3RvcmVzXS5uZXdBbW91bnQgKz0gTWF0aC5mbG9vcihidWlsZGluZy5zaXplICogKGJ1aWxkaW5nLnB1cmNoYXNlZCArIGJ1aWxkaW5nLmdpZnRlZCkgKiBidWlsZGluZy5tdWx0aXBsaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJ0LmZpbHRlcihmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXNbdF0ubmV3QW1vdW50ID0gTWF0aC5mbG9vcihyZXNvdXJjZXNbdF0ubmV3QW1vdW50ICogdHlwZU11bHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlc1t0XVsxXSAhPSByZXNvdXJjZXNbdF0ubmV3QW1vdW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5zZXRSZXNvdXJjZUxpbWl0KHQsIHJlc291cmNlc1t0XS5uZXdBbW91bnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZUhvdXNpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHR5cGVNdWx0ID0gc3RhdGUuaG91c2luZ1NpemVNdWx0aXBsaWVyIHx8IDE7XHJcbiAgICAgICAgICAgIHZhciBtYXggPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGUuYnVpbGRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYnVpbGRpbmdzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzdGF0ZS5idWlsZGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmcudXNlID09PSAnaG91c2luZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ICs9IE1hdGguZmxvb3IoYnVpbGRpbmcuc2l6ZSAqIChidWlsZGluZy5naWZ0ZWQgKyBidWlsZGluZy5wdXJjaGFzZWQpICogYnVpbGRpbmcubXVsdGlwbGllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLnNldFBvcHVsYXRpb25MaW1pdChNYXRoLmZsb29yKG1heCAqIHR5cGVNdWx0KSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5idWlsZCA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIGJ1aWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIHNwZW50ID0gW107XHJcbiAgICAgICAgICAgIHZhciBidWlsZGluZyA9IHN0YXRlLmJ1aWxkaW5nc1t0eXBlXTtcclxuICAgICAgICAgICAgdmFyIG5leHRDb3N0ID0gY2FsY3VsYXRlTmV4dENvc3QoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICBpZiAoY2FuQnVpbGQoYnVpbGRpbmcsIG5leHRDb3N0KSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuZXh0Q29zdC5sZW5ndGg7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSByZXNvdXJjZVNlcnZpY2UuY2hhbmdlUmVzb3VyY2UobmV4dENvc3RbY10ucmVzb3VyY2VUeXBlLCAtMSAqIG5leHRDb3N0W2NdLmFtb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3BlbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogbmV4dENvc3RbY10ucmVzb3VyY2VUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBuZXh0Q29zdFtjXS5hbW91bnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYnVpbHQpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmJ1aWxkaW5nc1t0eXBlXS5wdXJjaGFzZWQrKztcclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKGJ1aWxkaW5nLnVzZSk7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UudXBkYXRlUHJvZ3Jlc3MoJ0FfJyArIHR5cGUgKyAnX0InLCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3BlbnQubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZVNlcnZpY2UuY2hhbmdlUmVzb3VyY2Uoc3BlbnRbc10ucmVzb3VyY2VUeXBlLCBuZXh0Q29zdFtzXS5hbW91bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5yZXdhcmRFYXJuZWQgPSBmdW5jdGlvbihldmVudCwgcmV3YXJkKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHJld2FyZC5wZXJrcy5sZW5ndGg7IHArKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBlcmsgPSByZXdhcmQucGVya3NbcF07XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRpbmcgPSBzdGF0ZS5idWlsZGluZ3NbcGVyay5hcnJbMV1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmsucGlkID09PSAnUF9CX0JPTlVTJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nLmdpZnRlZCArPSBwZXJrLmFyclsyXTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZShidWlsZGluZy51c2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmsucGlkID09PSAnUF9CX1VOTE9DSycpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGluZy51bmxvY2tlZCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoYnVpbGRpbmcudXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZXJrLnBpZCA9PT0gXCJQX0JfTVVMVElQTElFUlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmcubXVsdGlwbGllciArPSBwZXJrLmFyclsyXSAvIDEwMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKGJ1aWxkaW5nLnVzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVCdWlsZGluZ3NDaGFuZ2VkRXZlbnQgPSBmdW5jdGlvbihzY29wZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSAkcm9vdFNjb3BlLiRvbignYnVpbGRpbmdzQ2hhbmdlZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmIChzY29wZSkgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdidWlsZGluZ3NDaGFuZ2VkRXZlbnQnLCBzZWxmLmdldEJ1aWxkaW5nU25hcHNob3QoKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyogUHJpdmF0ZSBmdW5jdGlvbnMgKi9cclxuICAgICAgICB2YXIgZm9ybWF0RGVzY3JpcHRpb24gPSBmdW5jdGlvbihidWlsZGluZywgZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IGJ1aWxkaW5nLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9ICRmaWx0ZXIoJ2ZtdCcpKGRlc2NyaXB0aW9uLCBmb3JtYXQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRTaXplID0gZnVuY3Rpb24oYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSBidWlsZGluZy5zaXplICogKGJ1aWxkaW5nLm11bHRpcGxpZXIgfHwgMSk7XHJcbiAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdicmVlZGluZycpIHNpemUgKj0gKHN0YXRlLmJyZWVkaW5nU2l6ZU11bHRpcGxpZXIgfHwgMSk7XHJcbiAgICAgICAgICAgIGlmIChidWlsZGluZy51c2UgPT09ICdzdG9yYWdlJykgc2l6ZSAqPSAoc3RhdGUuc3RvcmFnZVNpemVNdWx0aXBsaWVyIHx8IDEpO1xyXG4gICAgICAgICAgICBpZiAoYnVpbGRpbmcudXNlID09PSAnaG91c2luZycpIHNpemUgKj0gKHN0YXRlLmhvdXNpbmdTaXplTXVsdGlwbGllciB8fCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNhbGN1bGF0ZU5leHRDb3N0ID0gZnVuY3Rpb24oYnVpbGRpbmcpIHtcclxuICAgICAgICAgICAgdmFyIGNvc3RzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVpbGRpbmcuYmFzZUNvc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb3N0ID0gYnVpbGRpbmcuYmFzZUNvc3RbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEFtb3VudCA9IE1hdGguZmxvb3IoY29zdC5hbW91bnQgKiBNYXRoLnBvdyhjb3N0LmNvc3RNdWx0aXBsaWVyLCBidWlsZGluZy5wdXJjaGFzZWQpKTtcclxuICAgICAgICAgICAgICAgIGNvc3RzLnB1c2goeyByZXNvdXJjZTogcmVzb3VyY2VUeXBlc1tjb3N0LnJlc291cmNlXS5uYW1lLCByZXNvdXJjZVR5cGU6IGNvc3QucmVzb3VyY2UsIGFtb3VudDogbmV4dEFtb3VudCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29zdHM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgY2FuQnVpbGQgPSBmdW5jdGlvbihidWlsZGluZywgbmV4dENvc3QpIHtcclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChuZXh0Q29zdCkpIHtcclxuICAgICAgICAgICAgICAgIG5leHRDb3N0ID0gY2FsY3VsYXRlTmV4dENvc3QoYnVpbGRpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXNvdXJjZXMgPSByZXNvdXJjZVNlcnZpY2UuZ2V0UmVzb3VyY2VzU25hcHNob3QoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuZXh0Q29zdC5sZW5ndGg7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSByZXNvdXJjZXNbbmV4dENvc3RbY10ucmVzb3VyY2VUeXBlXTtcclxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocikgfHwgclswXSA8IG5leHRDb3N0W2NdLmFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBoYW5kbGVSZXNvdXJjZUNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50LCByZXNvdXJjZVR5cGUsIGFtb3VudCkge1xyXG4gICAgICAgICAgICBzZWxmLmdldEJ1aWxkaW5nU25hcHNob3QoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5nYW1lLnNlcnZpY2UoJ3BvcHVsYXRpb25TZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnJGZpbHRlcicsICdnYW1lTG9vcFNlcnZpY2UnLCAnUG9wdWxhdGlvbicsICdsb2dTZXJ2aWNlJywgJ2FjaGlldmVtZW50U2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZmlsdGVyLCBnYW1lTG9vcFNlcnZpY2UsIFBvcHVsYXRpb24sIGxvZ1NlcnZpY2UsIGFjaGlldmVtZW50U2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICAgICAgc2VsZi5icmVlZFN0ZXBzID0gc3RhdGUuYnJlZWRTdGVwcyB8fCBzZWxmLmJyZWVkU3RlcHMgfHwgNjtcclxuICAgICAgICAgICAgc2VsZi5zdGVwc1NpbmNlQnJlZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChzdGF0ZS5zdGVwc1NpbmNlQnJlZWQpID8gc3RhdGUuc3RlcHNTaW5jZUJyZWVkIDogc2VsZi5zdGVwc1NpbmNlQnJlZWQgfHwgMDtcclxuICAgICAgICAgICAgc2VsZi5wb3B1bGF0aW9uU3RhdGUgPSBzdGF0ZS5wb3B1bGF0aW9uU3RhdGUgfHwgc2VsZi5wb3B1bGF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbiA9IChzZWxmLnBvcHVsYXRpb25TdGF0ZSkgPyBuZXcgUG9wdWxhdGlvbihzZWxmLnBvcHVsYXRpb25TdGF0ZSkgOiBzZWxmLnBvcHVsYXRpb24gfHwgbmV3IFBvcHVsYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubG9nU2VydmljZSA9IGxvZ1NlcnZpY2U7XHJcbiAgICAgICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCgpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIGJyZWVkU3RlcHM6IHNlbGYuYnJlZWRTdGVwcyxcclxuICAgICAgICAgICAgICAgIHN0ZXBzU2luY2VCcmVlZDogc2VsZi5zdGVwc1NpbmNlQnJlZWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc3RhdGUucG9wdWxhdGlvblN0YXRlID0gc2VsZi5wb3B1bGF0aW9uLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmhhbmRsZUdhbWVMb29wID0gZnVuY3Rpb24oZXZlbnQsIHN0ZXBzKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3BVcGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5uYW1lICE9PSAnZ2FtZUxvb3BFdmVudCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3BvcHVsYXRlU2VydmljZS5oYW5kbGVHYW1lTG9vcCAtIEludmFsaWQgZXZlbnQ6ICcgKyBldmVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNlbGYucG9wdWxhdGlvbi5pc0JyZWVkaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZUJyZWVkICs9IHN0ZXBzO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlbGYuc3RlcHNTaW5jZUJyZWVkID49IHNlbGYuYnJlZWRTdGVwcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3RlcHNTaW5jZUJyZWVkIC09IHNlbGYuYnJlZWRTdGVwcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc3ByaW5nID0gc2VsZi5wb3B1bGF0aW9uLmJyZWVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNwcmluZyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dTZXJ2aWNlLmxvZ0JyZWVkTWVzc2FnZShcIk5ldyBvZmZzcHJpbmchIFwiICsgb2Zmc3ByaW5nLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UudXBkYXRlUHJvZ3Jlc3MoJ0FfQklSVEhTJywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcFVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYuc2VuZEJyZWVkZXJVcGRhdGVFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcFVwZGF0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGRCcmVlZGVyID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5pbmRleE9mKGlkKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBnZW5kZXJUb0FkZCA9IHNlbGYucG9wdWxhdGlvbi5nZXRCeUlkKGlkKS5oYXNUcmFpdCgnTWFsZScpID8gJ01hbGUnIDogJ0ZlbWFsZSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5sZW5ndGggPCBzZWxmLnBvcHVsYXRpb24uYnJlZWRlckxpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSBzZWxmLnBvcHVsYXRpb24uZ2V0QnlJZChzZWxmLnBvcHVsYXRpb24uYnJlZWRlcnNbMF0pOyAvL2Fzc3VtaW5nIG9ubHkgMiBicmVlZGVycyB3aWxsIGV4aXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bml0Lmhhc1RyYWl0KGdlbmRlclRvQWRkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVCcmVlZGVyKHVuaXQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucG9wdWxhdGlvbi5icmVlZGVycy5wdXNoKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ1NlcnZpY2UubG9nQnJlZWRNZXNzYWdlKFwiQnJlZWRlciBhZGRlZDogXCIgKyBzZWxmLnBvcHVsYXRpb24uZ2V0QnlJZChpZCkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kQnJlZWRlclVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgc2VsZi5wb3B1bGF0aW9uLmJyZWVkZXJzLmxlbmd0aDsgYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSBzZWxmLnBvcHVsYXRpb24uZ2V0QnlJZChzZWxmLnBvcHVsYXRpb24uYnJlZWRlcnNbYl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5pdC5oYXNUcmFpdChnZW5kZXJUb0FkZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlQnJlZWRlcih1bml0LmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkQnJlZWRlcihpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yZW1vdmVCcmVlZGVyID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2VsZi5wb3B1bGF0aW9uLmJyZWVkZXJzLmluZGV4T2YoaWQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24uYnJlZWRlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5wb3B1bGF0aW9uLmlzQnJlZWRpbmcoKSkgc2VsZi5zdGVwc1NpbmNlQnJlZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZW5kQnJlZWRlclVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ1NlcnZpY2UubG9nQnJlZWRNZXNzYWdlKFwiQnJlZWRlciByZW1vdmVkOiBcIiArIHNlbGYucG9wdWxhdGlvbi5nZXRCeUlkKGlkKS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi51cGRhdGVNZW1iZXIgPSBmdW5jdGlvbihpZCwgZ2VuZUluZGV4LCBnZW5lVmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBtZW1iZXIgPSBzZWxmLnBvcHVsYXRpb24uZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIG1lbWJlci5nZW5lc1tnZW5lSW5kZXhdID0gZ2VuZVZhbHVlcztcclxuICAgICAgICAgICAgbWVtYmVyLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0VW5pdEpvYiA9IGZ1bmN0aW9uKGlkLCBqb2IsIGpvYk5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHVuaXQgPSBzZWxmLnBvcHVsYXRpb24uZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIHVuaXQuY3VycmVudEpvYiA9IGpvYjtcclxuXHJcbiAgICAgICAgICAgIHZhciBtc2cgPSAkZmlsdGVyKCdmbXQnKSgnJShuYW1lKXMgaXMgbm93IGEgJShqb2IpcycsIHsgbmFtZTogdW5pdC5uYW1lLCBqb2I6IGpvYk5hbWUgfSk7XHJcbiAgICAgICAgICAgIHNlbGYubG9nU2VydmljZS5sb2dXb3JrTWVzc2FnZShtc2cpO1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0QnJlZWRlckxpbWl0ID0gZnVuY3Rpb24obmV3TGltaXQpIHtcclxuICAgICAgICAgICAgc2VsZi5wb3B1bGF0aW9uLmJyZWVkZXJMaW1pdCA9IG5ld0xpbWl0O1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0TnVyc2VyeUxpbWl0ID0gZnVuY3Rpb24obmV3TGltaXQpIHtcclxuICAgICAgICAgICAgc2VsZi5wb3B1bGF0aW9uLm5ld2Jvcm5MaW1pdCA9IG5ld0xpbWl0O1xyXG4gICAgICAgICAgICBzZWxmLnNlbmRQb3B1bGF0aW9uVXBkYXRlRXZlbnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0UG9wdWxhdGlvbkxpbWl0ID0gZnVuY3Rpb24obmV3TGltaXQpIHtcclxuICAgICAgICAgICAgc2VsZi5wb3B1bGF0aW9uLm1heFNpemUgPSBuZXdMaW1pdDtcclxuICAgICAgICAgICAgc2VsZi5zZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnByb2Nlc3NOZXdib3JuRmF0ZSA9IGZ1bmN0aW9uKHVuaXRpZCwgZmF0ZSkge1xyXG4gICAgICAgICAgICBzZWxmLnBvcHVsYXRpb24ucHJvY2Vzc05ld2Jvcm5GYXRlKHVuaXRpZCwgZmF0ZSk7XHJcbiAgICAgICAgICAgIHNlbGYuc2VuZFBvcHVsYXRpb25VcGRhdGVFdmVudCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZW5kQnJlZWRlclVwZGF0ZUV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ2JyZWVkZXJVcGRhdGVFdmVudCcsIHsgYnJlZWRlcnM6IHNlbGYucG9wdWxhdGlvbi5icmVlZGVycywgaXNCcmVlZGluZzogc2VsZi5wb3B1bGF0aW9uLmlzQnJlZWRpbmcoKSwgc3RlcHNTaW5jZUJyZWVkOiBzZWxmLnN0ZXBzU2luY2VCcmVlZCwgYnJlZWRTdGVwczogc2VsZi5icmVlZFN0ZXBzIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3BvcHVsYXRpb25VcGRhdGVFdmVudCcsIHsgcG9wdWxhdGlvbjogc2VsZi5wb3B1bGF0aW9uLm1lbWJlcnMsIG5ld2Jvcm5zOiBzZWxmLnBvcHVsYXRpb24ubmV3Ym9ybnMsIG1heFNpemU6IHNlbGYucG9wdWxhdGlvbi5tYXhTaXplLCBicmVlZGVyTGltaXQ6IHNlbGYucG9wdWxhdGlvbi5icmVlZGVyTGltaXQsIG5ld2Jvcm5MaW1pdDogc2VsZi5wb3B1bGF0aW9uLm5ld2Jvcm5MaW1pdCB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLlN1YnNjcmliZUJyZWVkZXJVcGRhdGVFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdicmVlZGVyVXBkYXRlRXZlbnQnLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgc2VsZi5zZW5kQnJlZWRlclVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVQb3B1bGF0aW9uVXBkYXRlRXZlbnQgPSBmdW5jdGlvbihzY29wZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSAkcm9vdFNjb3BlLiRvbigncG9wdWxhdGlvblVwZGF0ZUV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgc2VsZi5zZW5kUG9wdWxhdGlvblVwZGF0ZUV2ZW50KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2FtZUxvb3BTZXJ2aWNlLlN1YnNjcmliZUdhbWVMb29wRXZlbnQoJHJvb3RTY29wZSwgc2VsZi5oYW5kbGVHYW1lTG9vcCk7XHJcbiAgICB9XHJcbl0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuc2VydmljZSgncmVzb3VyY2VTZXJ2aWNlJywgW1xyXG4gICAgJyRyb290U2NvcGUnLCAnJGZpbHRlcicsICdsb2dTZXJ2aWNlJywgJ2dlbmVEZWZpbml0aW9ucycsICdyZXNvdXJjZVR5cGVzJywgJ2FjaGlldmVtZW50U2VydmljZScsXHJcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZmlsdGVyLCBsb2dTZXJ2aWNlLCBnZW5lRGVmaW5pdGlvbnMsIHJlc291cmNlVHlwZXMsIGFjaGlldmVtZW50U2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRlICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgc2VsZi5zdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRTZXJ2aWNlLlN1YnNjcmliZU5ld1Jld2FyZEV2ZW50KCRyb290U2NvcGUsIHNlbGYucmV3YXJkRWFybmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgdHVybiB0aGVtIGFsbCBvbiBmb3IgdGVzdGluZyBwdXJwb3Nlc1xyXG4gICAgICAgICAgICB2YXIgb3ZlcnJpZGVBbGxPbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvL1swXSBvd25lZCwgWzFdIG1heCwgWzJdIGVuYWJsZWQsIFszXSBtdWx0aXBsaWVyXHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0TGltaXRzID0ge1xyXG4gICAgICAgICAgICAgICAgRElSVDogWzAsIDAsIHRydWUgfHwgb3ZlcnJpZGVBbGxPbiwgMS4wMF0sXHJcbiAgICAgICAgICAgICAgICBCUklDS1M6IFswLCAwLCBmYWxzZSB8fCBvdmVycmlkZUFsbE9uLCAxLjAwXSxcclxuICAgICAgICAgICAgICAgIFdBVEVSOiBbMCwgMCwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbiwgMS4wMF0sXHJcbiAgICAgICAgICAgICAgICBXT09EOiBbMCwgMCwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbiwgMS4wMF0sXHJcbiAgICAgICAgICAgICAgICBHT0xEOiBbMCwgMCwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbiwgMS4wMF0sXHJcbiAgICAgICAgICAgICAgICBIQVBQSU5FU1M6IFswLCAtMSwgdHJ1ZSB8fCBvdmVycmlkZUFsbE9uLCAxLjAwXSxcclxuICAgICAgICAgICAgICAgIFNDSUVOQ0U6IFswLCAtMSwgZmFsc2UgfHwgb3ZlcnJpZGVBbGxPbiwgMS4wMF0sXHJcbiAgICAgICAgICAgICAgICBTVEVFTDogWzAsIDAsIGZhbHNlIHx8IG92ZXJyaWRlQWxsT24sIDEuMDBdLFxyXG4gICAgICAgICAgICAgICAgRVZPQ09JTjogWzAsIC0xLCBmYWxzZSB8fCBvdmVycmlkZUFsbE9uLCAxLjAwXVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgcmVzb3VyY2VUeXBlIGluIHJlc291cmNlVHlwZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZVR5cGVzLmhhc093blByb3BlcnR5KHJlc291cmNlVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHNlbGYuc3RhdGUucmVzb3VyY2VzW3Jlc291cmNlVHlwZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByID09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGRlZmF1bHQsIGluc3RlYWQgb2YgZmFpbGluZyB3ZSBhcmUganVzdCBnb2luZyB0byBhZGQgaXQgd2l0aCBhIG1heCBvZiA5MTEgc28gdGhhdCB3ZSBhcmUgYXdhcmUgb2YgdGhlIHByb2JsZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IGRlZmF1bHRMaW1pdHNbcmVzb3VyY2VUeXBlXSB8fCBbMCwgOTExLCBvdmVycmlkZUFsbE9uLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXSA9IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlQ2hhbmdlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCByWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUxpbWl0Q2hhbmdlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCByWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUVuYWJsZWRFdmVudCcsIHJlc291cmNlVHlwZSwgclsyXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdGU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRXb3JrZXJJY29uID0gZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICAgIHZhciByZXQgPSB7fTtcclxuICAgICAgICAgICAgcmV0WydmYS10cnVjayddID0gKHJlcyA9PT0gJ0RJUlQnKTtcclxuICAgICAgICAgICAgcmV0WydmYS10aW50J10gPSAocmVzID09PSAnV0FURVInKTtcclxuICAgICAgICAgICAgcmV0WydmYS10cmVlJ10gPSAocmVzID09PSAnV09PRCcpO1xyXG4gICAgICAgICAgICByZXRbJ2ZhLWZsYXNrJ10gPSAocmVzID09PSAnU0NJRU5DRScpO1xyXG4gICAgICAgICAgICByZXRbJ2ljb24taGFwcHknXSA9IChyZXMgPT09ICdIQVBQSU5FU1MnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnJld2FyZEVhcm5lZCA9IGZ1bmN0aW9uKGV2ZW50LCByZXdhcmQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCByZXdhcmQucGVya3MubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBwZXJrID0gcmV3YXJkLnBlcmtzW3BdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBlcmsucGlkID09PSAnUF9SX0JPTlVTJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlUmVzb3VyY2UocGVyay5hcnJbMV0sIHBlcmsuYXJyWzJdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZXJrLnBpZCA9PT0gJ1BfUl9VTkxPQ0snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5yZXNvdXJjZXNbcGVyay5hcnJbMV1dWzJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCdyZXNvdXJjZUVuYWJsZWRFdmVudCcsIHBlcmsuYXJyWzFdLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZXJrLnBpZCA9PT0gJ1BfUl9NVUxUSVBMSUVSJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkUmVzb3VyY2VNdWx0aXBsaWVyKHBlcmsuYXJyWzFdLCBwZXJrLmFyclsyXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmdldFJlc291cmNlc1NuYXBzaG90ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmNvcHkoc2VsZi5zdGF0ZS5yZXNvdXJjZXMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0UmVzb3VyY2UgPSBmdW5jdGlvbihyZXNvdXJjZVR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RhdGUucmVzb3VyY2VzW3Jlc291cmNlVHlwZV1bMF07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5jaGFuZ2VSZXNvdXJjZSA9IGZ1bmN0aW9uKHJlc291cmNlVHlwZSwgYW1vdW50KSB7XHJcbiAgICAgICAgICAgIHZhciByID0gc2VsZi5zdGF0ZS5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXTtcclxuICAgICAgICAgICAgaWYgKHJbMl0gPT09IGZhbHNlICYmIHJbMV0gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc291cmNlVHlwZSArIFwiIGlzIG5vdCBlbmFibGVkLCBjYW5ub3QgaW5jcmVhc2UgYW1vdW50LlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgclswXSArPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIHZhciBhY3R1YWxBbW91bnQgPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIGlmIChyWzFdICE9IC0xICYmIHJbMF0gPiByWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBhY3R1YWxBbW91bnQgPSBhbW91bnQgLSAoclswXSAtIHJbMV0pO1xyXG4gICAgICAgICAgICAgICAgclswXSA9IHJbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgdGhpcyBwdXRzIHVzIG5lZ2F0aXZlLCB3ZSBjYW5ub3QgZGVkdWN0IHRoZSBhbW91bnQsIHJlc2V0IGFuZCByZXR1cm4gLTEgdG8gaW5kaWNhdGUgZmFpbHVyZS5cclxuICAgICAgICAgICAgaWYgKHJbMF0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByWzBdIC09IGFtb3VudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFjdHVhbEFtb3VudCA+IDApXHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudFNlcnZpY2UudXBkYXRlUHJvZ3Jlc3MoJ0FfJyArIHJlc291cmNlVHlwZSArICdfRScsIGFjdHVhbEFtb3VudCk7IC8vIGVhcm5pbmcgYWNoaWV2ZW1lbnRcclxuXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlQ2hhbmdlZEV2ZW50JywgcmVzb3VyY2VUeXBlLCByWzBdLCBzZWxmLmdldFJlc291cmNlc1NuYXBzaG90KCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gclswXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0UmVzb3VyY2VMaW1pdCA9IGZ1bmN0aW9uKHJlc291cmNlVHlwZSwgYW1vdW50KSB7XHJcbiAgICAgICAgICAgIHZhciByID0gc2VsZi5zdGF0ZS5yZXNvdXJjZXNbcmVzb3VyY2VUeXBlXTtcclxuICAgICAgICAgICAgaWYgKHJbMV0gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHNldCByZXNvdXJjZSBsaW1pdCBvbjogXCIgKyByZXNvdXJjZVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJbMV0gPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIGlmIChyWzJdID09PSBmYWxzZSAmJiAoYW1vdW50ID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIHJbMl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgncmVzb3VyY2VFbmFibGVkRXZlbnQnLCByZXNvdXJjZVR5cGUsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3Jlc291cmNlTGltaXRDaGFuZ2VkRXZlbnQnLCByZXNvdXJjZVR5cGUsIHJbMV0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5hZGRSZXNvdXJjZU11bHRpcGxpZXIgPSBmdW5jdGlvbihyZXNvdXJjZVR5cGUsIGFtb3VudCkge1xyXG4gICAgICAgICAgICBzZWxmLnN0YXRlLnJlc291cmNlc1tyZXNvdXJjZVR5cGVdWzNdICs9IChhbW91bnQgLyAxMDAuMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVSZXNvdXJjZUNoYW5nZWRFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdyZXNvdXJjZUNoYW5nZWRFdmVudCcsIGNhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUpIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuU3Vic2NyaWJlUmVzb3VyY2VMaW1pdENoYW5nZWRFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdyZXNvdXJjZUxpbWl0Q2hhbmdlZEV2ZW50JywgY2FsbGJhY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmIChzY29wZSkgc2NvcGUuJG9uKCckZGVzdHJveScsIGhhbmRsZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVSZXNvdXJjZUVuYWJsZWRFdmVudCA9IGZ1bmN0aW9uKHNjb3BlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9ICRyb290U2NvcGUuJG9uKCdyZXNvdXJjZUVuYWJsZWRFdmVudCcsIGNhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUpIHNjb3BlLiRvbignJGRlc3Ryb3knLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICB9XHJcbl0pOyIsInZhciBnYW1lID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcclxuXHJcbmdhbWUuc2VydmljZSgnd29ya2VyU2VydmljZScsIFtcclxuICAgICckcm9vdFNjb3BlJywgJyRmaWx0ZXInLCAnam9iVHlwZXMnLCAncmVzb3VyY2VUeXBlcycsICdyZXNvdXJjZVNlcnZpY2UnLCAncG9wdWxhdGlvblNlcnZpY2UnLCAnYWNoaWV2ZW1lbnRTZXJ2aWNlJywgJ2dhbWVMb29wU2VydmljZScsICdsb2dTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRmaWx0ZXIsIGpvYlR5cGVzLCByZXNvdXJjZVR5cGVzLCByZXNvdXJjZVNlcnZpY2UsIHBvcHVsYXRpb25TZXJ2aWNlLCBhY2hpZXZlbWVudFNlcnZpY2UsIGdhbWVMb29wU2VydmljZSwgbG9nU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgc3RhdGU7XHJcbiAgICAgICAgdmFyIGxhc3RTbmFwc2hvdDtcclxuICAgICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihsb2FkU3RhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBsb2FkU3RhdGUgfHwgc3RhdGUgfHwge307XHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGdhbWVMb29wU2VydmljZS5TdWJzY3JpYmVHYW1lTG9vcEV2ZW50KCRyb290U2NvcGUsIGhhbmRsZUxvb3ApO1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmdldFdvcmtlcnNTbmFwc2hvdCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5hZGRXb3JrZXIgPSBmdW5jdGlvbihqaWQsIHVuaXRpZCkge1xyXG4gICAgICAgICAgICB2YXIgbm90V29ya2luZyA9ICRmaWx0ZXIoJ2ZpbHRlcicpKHN0YXRlLndvcmtlcnMsIHsgdW5pdGlkOiB1bml0aWQgfSkubGVuZ3RoID09PSAwO1xyXG4gICAgICAgICAgICB2YXIgdG1wV29ya2VycyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoIW5vdFdvcmtpbmcpXHJcbiAgICAgICAgICAgICAgICB0bXBXb3JrZXJzID0gc3RhdGUud29ya2Vycy5maWx0ZXIoZnVuY3Rpb24od29ya2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlci51bml0aWQgIT09IHVuaXRpZCB8fCAod29ya2VyLnVuaXRpZCA9PT0gdW5pdGlkICYmIHdvcmtlci5qb2JUeXBlID09PSBqaWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobm90V29ya2luZyB8fCB0bXBXb3JrZXJzLmxlbmd0aCAhPSBzdGF0ZS53b3JrZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFub3RXb3JraW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLndvcmtlcnMgPSBhbmd1bGFyLmNvcHkodG1wV29ya2Vycyk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS53b3JrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGppZDogamlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHVuaXRpZDogdW5pdGlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzU2luY2VXb3JrOiAwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHBvcHVsYXRpb25TZXJ2aWNlLnNldFVuaXRKb2IodW5pdGlkLCBqaWQsIGpvYlR5cGVzW2ppZF0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmdldFdvcmtlcnNTbmFwc2hvdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5nZXRXb3JrZXJzU25hcHNob3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBqb2JUeXBlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpvYlR5cGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSAkZmlsdGVyKCdmaWx0ZXInKShzdGF0ZS53b3JrZXJzLCB7IGppZDoga2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBqdCA9IGpvYlR5cGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGppZDoganQuamlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZToganQucmVzb3VyY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGp0Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBqdC5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IGdyb3VwLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMobGFzdFNuYXBzaG90LCBzbmFwc2hvdCkpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3dvcmtlcnNDaGFuZ2VkRXZlbnQnLCBhbmd1bGFyLmNvcHkoc25hcHNob3QpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0U25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuY29weShzbmFwc2hvdCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5TdWJzY3JpYmVXb3JrZXJzQ2hhbmdlZEV2ZW50ID0gZnVuY3Rpb24oc2NvcGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ3dvcmtlcnNDaGFuZ2VkRXZlbnQnLCBjYWxsYmFjay5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgaWYgKHNjb3BlKSBzY29wZS4kb24oJyRkZXN0cm95JywgaGFuZGxlcik7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJ3dvcmtlcnNDaGFuZ2VkRXZlbnQnLCBzZWxmLmdldFdvcmtlcnNTbmFwc2hvdCgpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVMb29wKGV2ZW50LCBzdGVwcykge1xyXG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VzID0gcmVzb3VyY2VTZXJ2aWNlLmdldFJlc291cmNlc1NuYXBzaG90KCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUud29ya2Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlciA9IHN0YXRlLndvcmtlcnNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IHBvcHVsYXRpb25TZXJ2aWNlLnBvcHVsYXRpb24uZ2V0QnlJZCh3b3JrZXIudW5pdGlkKTtcclxuICAgICAgICAgICAgICAgIHZhciBqb2IgPSBqb2JUeXBlc1t3b3JrZXIuamlkXTtcclxuICAgICAgICAgICAgICAgIHZhciBlbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgIHdvcmtlci5zdGVwc1NpbmNlV29yayArPSBzdGVwcztcclxuICAgICAgICAgICAgICAgIHdoaWxlICh3b3JrZXIuc3RlcHNTaW5jZVdvcmsgPj0gam9iLmJhc2VXb3JrZXJTdGVwcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsYXBzZWQrKztcclxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc3RlcHNTaW5jZVdvcmsgLT0gam9iLmJhc2VXb3JrZXJTdGVwcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc291cmNlc1tqb2IucmVzb3VyY2VdLmdhdGhlckFtb3VudCA9IHJlc291cmNlc1tqb2IucmVzb3VyY2VdLmdhdGhlckFtb3VudCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiAwICYmICgocmVzb3VyY2VzW2pvYi5yZXNvdXJjZV1bMF0gKyByZXNvdXJjZXNbam9iLnJlc291cmNlXS5nYXRoZXJBbW91bnQpIDwgcmVzb3VyY2VzW2pvYi5yZXNvdXJjZV1bMV0gfHwgcmVzb3VyY2VzW2pvYi5yZXNvdXJjZV1bMV0gPT09IC0xKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdW5pdC5nZXRBdHRyaWJ1dGUocmVzb3VyY2VUeXBlc1tqb2IucmVzb3VyY2VdLmF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhdGhlckFtb3VudCA9IE1hdGgucm91bmQoKGpvYi5iYXNlQW1vdW50ICogZWxhcHNlZCAqIHJlc291cmNlc1tqb2IucmVzb3VyY2VdWzNdICogTWF0aC5wb3coMTAsIGEpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzW2pvYi5yZXNvdXJjZV0uZ2F0aGVyQW1vdW50ICs9IGdhdGhlckFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gJGZpbHRlcignZm10JykoJyUobmFtZSlzIHByb2R1Y2VkICUoYW10KWQgJShyZXMpcy4nLCB7IG5hbWU6IHVuaXQubmFtZSwgYW10OiBnYXRoZXJBbW91bnQsIHJlczogcmVzb3VyY2VUeXBlc1tqb2IucmVzb3VyY2VdLm5hbWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dTZXJ2aWNlLmxvZ1dvcmtNZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHJlc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHJlc291cmNlc1trZXldLmdhdGhlckFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlU2VydmljZS5jaGFuZ2VSZXNvdXJjZShrZXksIHJlc291cmNlc1trZXldLmdhdGhlckFtb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbl0pOyIsInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuYXBwLmNvbXBvbmVudCgnYmxvcWhlYWQuY29tcG9uZW50cy50ZXN0SW50ZXJmYWNlJywge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvdGVzdEludGVyZmFjZS5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6ICdibG9xaGVhZC5jb250cm9sbGVycy50ZXN0SW50ZXJmYWNlJ1xyXG59KTtcclxuXHJcbi8vIHRhYiBjb21wb25lbnRzXHJcbmFwcC5jb21wb25lbnQoJ2JyZWVkZXJUYWInLCB7XHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHVuaXRzOiAnPCcsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogWydCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgZnVuY3Rpb24oQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLmxhc3RCcmVlZGVySUQgPSAwO1xyXG4gICAgICAgIHNlbGYubmV3QnJlZWRlckdlbmRlciA9ICdNYWxlJztcclxuXHJcbiAgICAgICAgc2VsZi5raWxsQnJlZWRlciA9IGZ1bmN0aW9uKHVuaXQpIHtcclxuICAgICAgICAgICAgc2VsZi51bml0cy5zcGxpY2Uoc2VsZi51bml0cy5pbmRleE9mKHVuaXQpLCAxKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5hZGROZXdCcmVlZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBnZW5lcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IGdlbmVEZWZpbml0aW9ucy5sZW5ndGg7IGcrKykge1xyXG4gICAgICAgICAgICAgICAgZ2VuZXMucHVzaChbMCwgMCwgMF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZ2VuZGVyID0gKHNlbGYubmV3QnJlZWRlckdlbmRlciA9PSAnTWFsZScpID8gMjU1IDogMDtcclxuICAgICAgICAgICAgZ2VuZXNbNDJdID0gW2dlbmRlciwgMjU1IC0gZ2VuZGVyLCAwXTtcclxuXHJcbiAgICAgICAgICAgIHZhciB1bml0ID0gbmV3IEJyZWVkZXIoe1xyXG4gICAgICAgICAgICAgICAgaWQ6IHNlbGYubGFzdEJyZWVkZXJJRCsrLFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIHNjYWxlOiA2LFxyXG4gICAgICAgICAgICAgICAgZ2VuZXM6IGdlbmVzXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdW5pdC51cGRhdGUoKTtcclxuICAgICAgICAgICAgc2VsZi51bml0cy51bnNoaWZ0KHVuaXQpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgfV0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9icmVlZGVyVGFiLmh0bWwnXHJcbn0pO1xyXG5hcHAuY29tcG9uZW50KCdtYXRpbmdUYWInLCB7XHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHVuaXRzOiAnPScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogWydCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgZnVuY3Rpb24oQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIH1dLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvbWF0aW5nVGFiLmh0bWwnXHJcbn0pO1xyXG5hcHAuY29tcG9uZW50KCdjb25maWd1cmF0aW9uVGFiJywge1xyXG4gICAgYmluZGluZ3M6IHtcclxuXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogW1xyXG4gICAgICAgICdCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgJ3Jlc291cmNlVHlwZXMnLCAnam9iVHlwZXMnLCAnZGVmYXVsdEJ1aWxkaW5ncycsXHJcbiAgICAgICAgZnVuY3Rpb24oQnJlZWRlciwgZ2VuZURlZmluaXRpb25zLCB0cmFpdERlZmluaXRpb25zLCByZXNvdXJjZVR5cGVzLCBqb2JUeXBlcywgZGVmYXVsdEJ1aWxkaW5ncykge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zbmFwc2hvdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBnZW5lRGVmaW5pdGlvbnM6IGFuZ3VsYXIuY29weShnZW5lRGVmaW5pdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWl0RGVmaW5pdGlvbnM6IGFuZ3VsYXIuY29weSh0cmFpdERlZmluaXRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGVzOiBhbmd1bGFyLmNvcHkocmVzb3VyY2VUeXBlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgam9iVHlwZXM6IGFuZ3VsYXIuY29weShqb2JUeXBlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEJ1aWxkaW5nczogYW5ndWxhci5jb3B5KGRlZmF1bHRCdWlsZGluZ3MpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvY29uZmlndXJhdGlvblRhYi5odG1sJ1xyXG59KTtcclxuXHJcblxyXG5hcHAuY29tcG9uZW50KCdnZW5vbWVFZGl0b3InLCB7XHJcbiAgICBiaW5kaW5nczoge1xyXG4gICAgICAgIHU6ICc9JyxcclxuICAgICAgICByZXNvbHZlOiAnPCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBbJ2dlbmVEZWZpbml0aW9ucycsIGZ1bmN0aW9uKGdlbmVEZWZpbml0aW9ucykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5nZW5lRGVmaW5pdGlvbnMgPSBnZW5lRGVmaW5pdGlvbnM7XHJcbiAgICAgICAgICAgIHNlbGYuZXhwYW5kbyA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdCA9IHNlbGYudSB8fCBzZWxmLnJlc29sdmUudW5pdCB8fCB7fTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYucmFuZG9taXplTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnVuaXQubmFtZSA9IHNlbGYudW5pdC5nZXRSYW5kb21OYW1lKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJhbmRvbWl6ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdC5nZW5lc1tpbmRleF0gPSBbcmFuZG9tSW50RnJvbUludGVydmFsKDAsIDI1NSksIHJhbmRvbUludEZyb21JbnRlcnZhbCgwLCAyNTUpLCByYW5kb21JbnRGcm9tSW50ZXJ2YWwoMCwgMjU1KV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnJhbmRvbWl6ZUFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYudW5pdC5nZW5lcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHNlbGYucmFuZG9taXplKGkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGdlbmRlciA9IHJhbmRvbUludEZyb21JbnRlcnZhbCgwLCAxKSA9PT0gMCA/IDI1NSA6IDA7XHJcbiAgICAgICAgICAgIHNlbGYudW5pdC5nZW5lc1s0Ml0gPSBbZ2VuZGVyLCAyNTUgLSBnZW5kZXIsIDBdO1xyXG4gICAgICAgICAgICBzZWxmLnVuaXQudXBkYXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XSxcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL2dlbm9tZUVkaXRvci5odG1sJ1xyXG59KTtcclxuXHJcblxyXG5cclxuYXBwLmNvbnRyb2xsZXIoJ2Jsb3FoZWFkLmNvbnRyb2xsZXJzLnRlc3RJbnRlcmZhY2UnLCBbJyRzY29wZScsICckdGltZW91dCcsICdnYW1lU2VydmljZScsICdCcmVlZGVyJywgJ2dlbmVEZWZpbml0aW9ucycsICd0cmFpdERlZmluaXRpb25zJywgZnVuY3Rpb24oJHNjb3BlLCAkdGltZW91dCwgZ2FtZVNlcnZpY2UsIEJyZWVkZXIsIGdlbmVEZWZpbml0aW9ucywgdHJhaXREZWZpbml0aW9ucykge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHJcblxyXG5cclxuICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGYuZ2VuZURlZmluaXRpb25zID0gZ2VuZURlZmluaXRpb25zO1xyXG4gICAgICAgIHNlbGYudHJhaXREZWZpbml0aW9ucyA9IHRyYWl0RGVmaW5pdGlvbnM7XHJcbiAgICAgICAgLy9zZWxmLmRpZ2dlcnMgPSBnYW1lU2VydmljZS5kaWdnZXJzO1xyXG4gICAgICAgIHNlbGYudW5pdHMgPSBbXTtcclxuXHJcbiAgICAgICAgLy9nYW1lU2VydmljZS5TdWJzY3JpYmVCcmVlZEV2ZW50KCRzY29wZSwgZnVuY3Rpb24oZXZlbnQsIG9mZnNwcmluZykge1xyXG4gICAgICAgIC8vICAgIC8vJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsgc2VsZi5kaWdnZXJPZmZzcHJpbmcgPSBvZmZzcHJpbmc7IH0pO1xyXG4gICAgICAgIC8vfSk7XHJcbiAgICAgICAgLy9nYW1lU2VydmljZS5TdWJzY3JpYmVOZXdHZW5lcmF0aW9uRXZlbnQoJHNjb3BlLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gICAgICAgIHNlbGYuZGlnZ2VycyA9IGRhdGEuRGlnZ2VycztcclxuICAgICAgICAvLyAgICAgICAgLy9zZWxmLmRpZ2dlckFuY2VzdG9ycyA9IGRhdGEuQW5jZXN0b3JzO1xyXG4gICAgICAgIC8vICAgIH0pO1xyXG4gICAgICAgIC8vfSk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgc2VsZi51cGRhdGVHZW5lID0gZnVuY3Rpb24oZGlnZ2VySW5kZXgsIGdlbmVJbmRleCwgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHZhciB1bml0ID0gc2VsZi51bml0c1tkaWdnZXJJbmRleF07XHJcbiAgICAgICAgICAgIGRpZ2dlci5nZW5lc1tnZW5lSW5kZXhdID0gdmFsdWVzO1xyXG4gICAgICAgICAgICBkaWdnZXIudXBkYXRlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAqL1xyXG5cclxuICAgIH07XHJcblxyXG59XSk7XHJcblxyXG5cclxuYXBwLmNvbXBvbmVudCgnZm9udFRhYicsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy90ZXN0SW50ZXJmYWNlL2ZvbnRUYWIuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMudGVzdEludGVyZmFjZSdcclxufSk7IiwidmFyIGdhbWUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xyXG5cclxuZ2FtZS5jb21wb25lbnQoJ2Jsb3FoZWFkV29ya2VyTGlzdCcsIHtcclxuICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy93b3JrZXJMaXN0L3dvcmtlckxpc3QuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiAnYmxvcWhlYWQuY29udHJvbGxlcnMud29ya2VyTGlzdCdcclxufSk7XHJcblxyXG5cclxuZ2FtZS5jb250cm9sbGVyKCdibG9xaGVhZC5jb250cm9sbGVycy53b3JrZXJMaXN0JywgW1xyXG4gICAgJyRzY29wZScsICd3b3JrZXJTZXJ2aWNlJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgd29ya2VyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi53b3JrZXJzID0gW107XHJcbiAgICAgICAgICAgIHdvcmtlclNlcnZpY2UuU3Vic2NyaWJlV29ya2Vyc0NoYW5nZWRFdmVudCgkc2NvcGUsIHNlbGYudXBkYXRlV29ya2Vycyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnVwZGF0ZVdvcmtlcnMgPSBmdW5jdGlvbihldmVudCwgd29ya2Vycykge1xyXG4gICAgICAgICAgICBzZWxmLndvcmtlcnMgPSB3b3JrZXJzO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbl0pOyIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL2hvbWUuaHRtbCcsXG4gICAgJzxkaXYgbmctaW5pdD1cIiRjdHJsLmhpZGVtZT1mYWxzZVwiPjxkaXYgY2xhc3M9XCJub3BhZGRpbmcgY29sLXhzLTNcIiBuZy1jbGFzcz1cIiRjdHJsLmhpZGVtZSA/IFxcJ2hvbWUtaGlkZVxcJyA6IFxcJ1xcJ1wiPjxkaXYgY2xhc3M9XCJyb3cgdG9wUm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBmdWxsSFwiPjxibG9xaGVhZC1wbGF5ZXItYm94PjxibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxpIGNsYXNzPVwiZmEgZmEtbGlzdFwiPjwvaT4gTG9nPC9ibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxibG9xaGVhZC1sb2c+PC9ibG9xaGVhZC1sb2c+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PGJsb3FoZWFkLXBsYXllci1ib3g+PGJsb3FoZWFkLXBsYXllci1ib3gtdGl0bGU+PGkgY2xhc3M9XCJmYSBmYS10aFwiPjwvaT4gUmVzb3VyY2VzPC9ibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxkaXYgY2xhc3M9XCJyb3dcIj48YmxvcWhlYWQtcmVzb3VyY2UtbGlzdD48L2Jsb3FoZWFkLXJlc291cmNlLWxpc3Q+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtOSBmdWxsSCBub3BhZGRpbmdcIiBuZy1jbGFzcz1cIiRjdHJsLmhpZGVtZSA/IFxcJ2hvbWUtaGlkZVxcJyA6IFxcJ1xcJ1wiPjxkaXYgdWktdmlldz1cIlwiIGNsYXNzPVwiYW5pbWF0ZS12aWV3XCI+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvYWNoaWV2ZW1lbnRzL2FjaGlldmVtZW50cy5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjxibG9xaGVhZC1wbGF5ZXItYm94IGJveC10aXRsZT1cIkFjaGlldmVtZW50c1wiPjxkaXYgY2xhc3M9XCJhY2hpZXZlbWVudC1jb250YWluZXJcIj48ZGl2IGNsYXNzPVwicm93XCIgbmctcmVwZWF0PVwiYWcgaW4gJGN0cmwuYWNoaWV2ZW1lbnRTZXR1cC5hY2hpZXZlbWVudEdyb3Vwc1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIj48aDYgbmctYmluZD1cImFnLm5hbWVcIj48L2g2PjxkaXYgY2xhc3M9XCJyb3cgYWNoaWV2ZW1lbnQtbGlzdFwiIG5nLXJlcGVhdD1cImFpZCBpbiBhZy5haWRzXCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbWQtMiBjb2wtc20tMVwiPjxkaXYgY2xhc3M9XCJhY2hpZXZlbWVudC1jZWxsXCIgbmctY2xhc3M9XCIkY3RybC5nZXRBY2hpZXZlbWVudENsYXNzKCRjdHJsLmFjaGlldmVtZW50U2V0dXAuYWNoaWV2ZW1lbnRzW2FpZF0pXCIgdWliLXRvb2x0aXAtdGVtcGxhdGU9XCJcXCdhY2hpZXZlbWVudFRvb2x0aXAuaHRtbFxcJ1wiIHRvb2x0aXAtY2xhc3M9XCJhY2hpZXZlbWVudC10b29sdGlwXCI+PHAgbmctYmluZD1cIiRjdHJsLmFjaGlldmVtZW50U2V0dXAuYWNoaWV2ZW1lbnRzW2FpZF0ubmFtZVwiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLW1kLTEwIGNvbC1zbS0xMVwiPjxkaXYgY2xhc3M9XCJyb3cgYWNoaWV2ZW1lbnQtcmFuay1yb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTYgY29sLXNtLTMgY29sLWxnLTFcIiBuZy1yZXBlYXQ9XCJhciBpbiAkY3RybC5hY2hpZXZlbWVudFNldHVwLmFjaGlldmVtZW50c1thaWRdLnJhbmtzXCI+PGRpdiBjbGFzcz1cImFjaGlldmVtZW50LXJhbmstY2VsbFwiIG5nLWNsYXNzPVwiJGN0cmwuZ2V0QWNoaWV2ZW1lbnRSYW5rQ2xhc3MoJGN0cmwuYWNoaWV2ZW1lbnRTZXR1cC5hY2hpZXZlbWVudHNbYWlkXSwgYXIpXCI+PHNwYW4gbmctYmluZD1cImFyWzBdXCI+PC9zcGFuPjxicj48ZGl2IG5nLXJlcGVhdD1cInAgaW4gYXJbMV1cIiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9ja1wiIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwncGVya1Rvb2x0aXAuaHRtbFxcJ1wiIHRvb2x0aXAtY2xhc3M9XCJwZXJrLXRvb2x0aXBcIj48aSBjbGFzcz1cImZhIGZhLWdpZnRcIj48L2k+Jm5ic3A7PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cImFjaGlldmVtZW50VG9vbHRpcC5odG1sXCI+PGRpdiBkYXRhLWF0dHI9XCJOT05FXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoNSBuZy1iaW5kPVwiJGN0cmwuYWNoaWV2ZW1lbnRTZXR1cC5hY2hpZXZlbWVudHNbYWlkXS5kZXNjXCI+PC9oNT5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHAgbmctYmluZD1cIlxcJ1RvdGFsIFByb2dyZXNzOiBcXCcgKyAoJGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLmFtb3VudCB8fCAwKVwiPjwvcD5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHAgbmctaWY9XCIkY3RybC5hY2hpZXZlbWVudFNlcnZpY2Uuc3RhdGUucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF0ubmV4dFJhbmsgIT0gLTFcIiBuZy1iaW5kPVwiXFwnTmV4dCBSYW5rOiBcXCcgKyAoJGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLm5leHRSYW5rIHx8IDApXCI+PC9wPlxcbicgK1xuICAgICcgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MgcHJvZ3Jlc3MtY3VzdG9tXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgcm9sZT1cInByb2dyZXNzYmFyXCIgYXJpYS12YWx1ZW5vdz1cInt7JGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLmFtb3VudH19XCIgYXJpYS12YWx1ZW1pbj1cInt7JGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLmxhc3RSYW5rfX1cIiBhcmlhLXZhbHVlbWF4PVwie3skY3RybC5hY2hpZXZlbWVudFNlcnZpY2Uuc3RhdGUucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF0ubmV4dFJhbmt9fVwiXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7d2lkdGg6ICgxMDAqKCgkY3RybC5hY2hpZXZlbWVudFNlcnZpY2Uuc3RhdGUucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF0uYW1vdW50IC0gJGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLmxhc3RSYW5rKSAvICgkY3RybC5hY2hpZXZlbWVudFNlcnZpY2Uuc3RhdGUucHJvZ3Jlc3MuYWNoaWV2ZW1lbnRzW2FpZF0ubmV4dFJhbmstJGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLnN0YXRlLnByb2dyZXNzLmFjaGlldmVtZW50c1thaWRdLmxhc3RSYW5rKSkpICsgXFwnJVxcJ31cIj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwicGVya1Rvb2x0aXAuaHRtbFwiPjxkaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxoNSBuZy1iaW5kPVwiJGN0cmwuYWNoaWV2ZW1lbnRTZXJ2aWNlLmdldFBlcmtNZXNzYWdlKHAsIFxcJ25hbWVcXCcpXCI+PC9oNT5cXG4nICtcbiAgICAnICAgICAgICAgICAgPHAgbmctYmluZD1cIiRjdHJsLmFjaGlldmVtZW50U2VydmljZS5nZXRQZXJrTWVzc2FnZShwLCBcXCdkZXNjXFwnKVwiIC8+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+PC9zY3JpcHQ+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvYnVpbGRpbmdMaXN0L2J1aWxkaW5nTGlzdC5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInJvd1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIj48ZGl2IGNsYXNzPVwiYnVpbGRpbmctbGlzdC1idXR0b25cIiBuZy1yZXBlYXQ9XCJidWlsZGluZyBpbiAkY3RybC5idWlsZGluZ3NcIiBuZy1pZj1cImJ1aWxkaW5nLmNvc3RUb0J1aWxkLmxlbmd0aCA+IDBcIiB0b29sdGlwLXBsYWNlbWVudD1cImJvdHRvbVwiIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwncmVzb3VyY2VUb29sdGlwLmh0bWxcXCdcIiB0b29sdGlwLWNsYXNzPVwiYnVpbGRpbmctdG9vbHRpcFwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIG5nLWJpbmQ9XCIoYnVpbGRpbmcubmFtZSArIFxcJyAoXFwnICsgYnVpbGRpbmcub3duZWQgKyBcXCcpXFwnKVwiIG5nLWRpc2FibGVkPVwiICFidWlsZGluZy5jYW5CdWlsZCBcIiBjbGFzcz1cImJ0biBidG4teHMgYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIiRjdHJsLmJ1aWxkKGJ1aWxkaW5nLnR5cGUpXCI+PC9idXR0b24+PC9kaXY+PC9kaXY+PC9kaXY+PHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwicmVzb3VyY2VUb29sdGlwLmh0bWxcIj48ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdDtcIj5cXG4nICtcbiAgICAnICAgICAgICA8aDU+e3tidWlsZGluZy5kZXNjcmlwdGlvbn19PC9oNT5cXG4nICtcbiAgICAnICAgICAgICA8cCBzdHlsZT1cIndoaXRlLXNwYWNlOm5vd3JhcFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3Bhbj5SZXF1aXJlczogPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBuZy1yZXBlYXQ9XCJjb3N0IGluIGJ1aWxkaW5nLmNvc3RUb0J1aWxkXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhXCIgbmctY2xhc3M9XCIkY3RybC5yZXNvdXJjZVNlcnZpY2UuZ2V0V29ya2VySWNvbihjb3N0LnJlc291cmNlVHlwZSlcIiBkYXRhLWF0dHI9XCJ7eyRjdHJsLnJlc291cmNlVHlwZXNbY29zdC5yZXNvdXJjZVR5cGVdLmF0dHJ9fVwiPjwvaT5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJjb3N0LmFtb3VudFwiPjwvc3Bhbj4mbmJzcDtcXG4nICtcbiAgICAnICAgICAgICAgICAgPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgIDwvcD5cXG4nICtcbiAgICAnICAgICAgICA8IS0tXFxuJyArXG4gICAgJyAgICAgICAgPHAgbmctcmVwZWF0PVwiY29zdCBpbiBidWlsZGluZy5jb3N0VG9CdWlsZFwiIGRhdGEtYXR0cj1cInt7JGN0cmwucmVzb3VyY2VUeXBlc1tjb3N0LnJlc291cmNlVHlwZV0uYXR0cn19XCI+PHNwYW4gbmctYmluZD1cImNvc3QucmVzb3VyY2VcIj48L3NwYW4+OiA8c3BhbiBuZy1iaW5kPVwiY29zdC5hbW91bnRcIj48L3NwYW4+PC9wPlxcbicgK1xuICAgICcgICAgICAgIC0tPlxcbicgK1xuICAgICcgICAgPC9kaXY+PC9zY3JpcHQ+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvbG9nL2xvZy5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cImxvZy1jb21wb25lbnRcIj48dWwgY2xhc3M9XCJsaXN0LWdyb3VwXCI+PGxpIG5nLXJlcGVhdD1cIml0ZW0gaW4gJGN0cmwubWVzc2FnZXMgdHJhY2sgYnkgJGluZGV4XCIgbmctY2xhc3M9XCIkY3RybC5nZXRMb2dDbGFzcyhpdGVtLnR5cGUpXCI+WzxzcGFuIG5nLWJpbmQ9XCJpdGVtLnRpbWVzdGFtcHxkYXRlOlxcJ01NL2RkIEhIOm1tOnNzXFwnXCI+PC9zcGFuPl0mbmJzcDsgPHNwYW4gbmctYmluZD1cIml0ZW0ubWVzc2FnZVwiPjwvc3Bhbj48L2xpPjwvdWw+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvbWFpbkdhbWUvbWFpbkdhbWUuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJcIj48ZGl2IGNsYXNzPVwicm93IHRvcFJvd1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtNCBmdWxsSFwiPjxibG9xaGVhZC1wbGF5ZXItYm94PjxibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxpIGNsYXNzPVwiZmEgZmEtYnVpbGRpbmdcIj48L2k+IEJ1aWxkaW5nczwvYmxvcWhlYWQtcGxheWVyLWJveC10aXRsZT48YmxvcWhlYWQtYnVpbGRpbmctbGlzdD48L2Jsb3FoZWFkLWJ1aWxkaW5nLWxpc3Q+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtNCBmdWxsSFwiPjxibG9xaGVhZC1wbGF5ZXItYm94PjxibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTVcIj48aSBjbGFzcz1cImZhIGZhLWhlYXJ0XCI+PC9pPiBCcmVlZGVycyBbe3skY3RybC5icmVlZGVycy5sZW5ndGh9fSAvIHt7JGN0cmwuYnJlZWRlckxpbWl0fX1dPC9kaXY+PGRpdiBjbGFzcz1cImNvbC14cy03XCI+PGRpdiBjbGFzcz1cInByb2dyZXNzIHByb2dyZXNzLWN1c3RvbSBwcm9ncmVzcy1wbGF5ZXJib3gtdGl0bGVcIj48ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyXCIgcm9sZT1cInByb2dyZXNzYmFyXCIgYXJpYS12YWx1ZW5vdz1cInt7JGN0cmwuc3RlcHNTaW5jZUJyZWVkfX1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCJ7eyRjdHJsLmJyZWVkU3RlcHN9fX1cIiBuZy1zdHlsZT1cInt3aWR0aDogKDEwMCooJGN0cmwuc3RlcHNTaW5jZUJyZWVkLyRjdHJsLmJyZWVkU3RlcHMpKSArIFxcJyVcXCd9XCI+PHNwYW4gY2xhc3M9XCJicmVlZGVyc1wiPjxpIGNsYXNzPVwiZmEgZmEtY29nXCIgbmctY2xhc3M9XCIkY3RybC5pc0JyZWVkaW5nID09IHRydWUgPyBcXCdmYS1zcGluXFwnIDogXFwnXFwnXCI+PC9pPiA8L3NwYW4+PHNwYW4gY2xhc3M9XCJhbW91bnRzXCIgbmctYmluZD1cIiRjdHJsLnN0ZXBzU2luY2VCcmVlZCArIFxcJyAvIFxcJyArICRjdHJsLmJyZWVkU3RlcHNcIj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxkaXYgaWQ9XCJicmVlZGVyLXRhcmdldFwiIGNsYXNzPVwicm93IGJyZWVkZXItY29udGFpbmVyIGZ1bGxIXCIgbHZsLWRyb3AtdGFyZ2V0PVwidHJ1ZVwiIG9uLWRyb3A9XCIkY3RybC5kcm9wcGVkKGRyYWdJZCwgZHJvcElkLCByZWxhdGl2ZVBvcylcIj48ZGl2IG5nLXJlcGVhdD1cImJyZWVkZXJpZCBpbiAkY3RybC5icmVlZGVyc1wiIGNsYXNzPVwiY29sLXhzLTEyIGNvbC1sZy0xMlwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBuZy1jbGljaz1cIiRjdHJsLnJlbW92ZUJyZWVkZXIoYnJlZWRlcmlkKVwiPjxzcGFuPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+PGJsb3FoZWFkLW1vcnRhbCB1bml0PVwiJGN0cmwucG9wdWxhdGlvblticmVlZGVyaWRdXCIgbW9kZT1cIkJSRUVEXCI+PC9ibG9xaGVhZC1tb3J0YWw+PC9kaXY+PC9kaXY+PC9ibG9xaGVhZC1wbGF5ZXItYm94PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtNCBmdWxsSFwiPjxibG9xaGVhZC1wbGF5ZXItYm94PjxibG9xaGVhZC1wbGF5ZXItYm94LXRpdGxlPjxpIGNsYXNzPVwiaWNvbi1mb290XCI+PC9pPiBOdXJzZXJ5IFt7eyRjdHJsLm5ld2Jvcm5zLmxlbmd0aH19IC8ge3skY3RybC5uZXdib3JuTGltaXR9fV08L2Jsb3FoZWFkLXBsYXllci1ib3gtdGl0bGU+PGRpdiBjbGFzcz1cInJvdyBicmVlZGVyLWNvbnRhaW5lclwiPjxkaXYgbmctcmVwZWF0PVwiY2hpbGQgaW4gJGN0cmwubmV3Ym9ybnNcIiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbGctMTJcIj48YmxvcWhlYWQtbW9ydGFsIG1vZGU9XCJOVVJTRVwiIHVuaXQ9XCJjaGlsZFwiIGFzc2lnbj1cIiRjdHJsLmRlY2lkZUZhdGUoJGlkLCAkdHlwZSlcIj48L2Jsb3FoZWFkLW1vcnRhbD48L2Rpdj48L2Rpdj48L2Jsb3FoZWFkLXBsYXllci1ib3g+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInJvd1wiIGlkPVwiYm90dG9tUm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBmdWxsSFwiPjxibG9xaGVhZC1wb3B1bGF0aW9uLWxpc3QgcG9wdWxhdGlvbj1cIiRjdHJsLnBvcHVsYXRpb25cIiBtYXgtcG9wdWxhdGlvbj1cIiRjdHJsLm1heFBvcHVsYXRpb25cIiBicmVlZGVyLWFzc2lnbj1cIiRjdHJsLmFzc2lnbigkaWQsICR0eXBlKVwiIGNhbi1icmVlZD1cIiRjdHJsLmJyZWVkZXJzLmxlbmd0aCA8ICRjdHJsLmJyZWVkZXJMaW1pdFwiPjwvYmxvcWhlYWQtcG9wdWxhdGlvbi1saXN0PjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL21vcnRhbC9tb3J0YWwuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJibG9xaGVhZC1jb21wb25lbnRcIiBuZy1pZj1cIiRjdHJsLmRpc3BsYXkgPT09IFxcJ1RJTEVcXCdcIiBuZy1pbml0PVwidW5pdCA9ICRjdHJsLnVuaXRcIj48aDUgbmctY2xpY2s9XCIkY3RybC5zaG93RGV0YWlscygpXCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMiBtb3J0YWwtbmFtZVwiIG5nLXN3aXRjaD1cIiRjdHJsLnVuaXQuaGFzVHJhaXQoXFwnTWFsZVxcJylcIj48aSBjbGFzcz1cImZhIGZhLW1hbGUgbWFsZS1jb2xvclwiIG5nLXN3aXRjaC13aGVuPVwidHJ1ZVwiPjwvaT4gPGkgY2xhc3M9XCJmYSBmYS1mZW1hbGUgZmVtYWxlLWNvbG9yXCIgbmctc3dpdGNoLXdoZW49XCJmYWxzZVwiPjwvaT4gPHNwYW4+e3skY3RybC51bml0Lm5hbWV9fTwvc3Bhbj4mbmJzcDs8aSBjbGFzcz1cImZhIGZhLXN0YXJcIiBuZy1yZXBlYXQ9XCJ0cmFpdCBpbiAkY3RybC51bml0LnRyYWl0c1wiIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwndHJhaXRUb29sdGlwLmh0bWxcXCdcIiB0b29sdGlwLWNsYXNzPVwidHJhaXQtdG9vbHRpcFwiPjwvaT48L2Rpdj48L2g1Pjx0YWJsZSBjbGFzcz1cImdlbm9tZUVkaXRvclwiIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwnYXR0clRvb2x0aXAuaHRtbFxcJ1wiIHRvb2x0aXAtY2xhc3M9XCJ0cmFpdC10b29sdGlwXCI+PHRib2R5Pjx0cj48dGggY29sc3Bhbj1cIjVcIj48aW1nIGNsYXNzPVwiaW1nLXJlc3BvbnNpdmVcIiBuZy1zcmM9XCJ7eyRjdHJsLnVuaXQucmVkR3JlZW5JbWFnZX19XCIgbmctbW91c2Vtb3ZlPVwiJGN0cmwuaW1hZ2VIb3ZlcigkZXZlbnQpXCI+PC90aD48L3RyPjx0cj48dGQgc3R5bGU9XCJ3aWR0aDogMjAlXCIgbmctbW91c2VvdmVyPVwiJGN0cmwuaG92ZXJBdHRyID0gXFwnU1RSXFwnXCI+e3skY3RybC51bml0LmF0dHJpYnV0ZXMuU1RSfX08L3RkPjx0ZCBzdHlsZT1cIndpZHRoOiAyMCVcIiBuZy1tb3VzZW92ZXI9XCIkY3RybC5ob3ZlckF0dHIgPSBcXCdJTlRcXCdcIj57eyRjdHJsLnVuaXQuYXR0cmlidXRlcy5JTlR9fTwvdGQ+PHRkIHN0eWxlPVwid2lkdGg6IDIwJVwiIG5nLW1vdXNlb3Zlcj1cIiRjdHJsLmhvdmVyQXR0ciA9IFxcJ0VORFxcJ1wiPnt7JGN0cmwudW5pdC5hdHRyaWJ1dGVzLkVORH19PC90ZD48dGQgc3R5bGU9XCJ3aWR0aDogMjAlXCIgbmctbW91c2VvdmVyPVwiJGN0cmwuaG92ZXJBdHRyID0gXFwnQ0hSXFwnXCI+e3skY3RybC51bml0LmF0dHJpYnV0ZXMuQ0hSfX08L3RkPjx0ZCBzdHlsZT1cIndpZHRoOiAyMCVcIiBuZy1tb3VzZW92ZXI9XCIkY3RybC5ob3ZlckF0dHIgPSBcXCdMQ0tcXCdcIj57eyRjdHJsLnVuaXQuYXR0cmlidXRlcy5MQ0t9fTwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PGRpdiBuZy1zaG93PVwiJGN0cmwubW9kZSA9PT0gXFwnUE9QXFwnXCI+PGJ1dHRvbiBuZy1kaXNhYmxlZD1cIiEkY3RybC5jYW5CcmVlZFwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiJGN0cmwuYXNzaWduTWUoKVwiPkJyZWVkIE1lPC9idXR0b24+PGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHVpYi1kcm9wZG93biBkcm9wZG93bi1hcHBlbmQtdG8tYm9keT1cInRydWVcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIiB1aWItZHJvcGRvd24tdG9nZ2xlPldvcmsgPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2J1dHRvbj48dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgdWliLWRyb3Bkb3duLW1lbnUgcm9sZT1cIm1lbnVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzaW5nbGUtYnV0dG9uXCI+PGxpIG5nLXJlcGVhdD1cIihrZXksIGpvYikgaW4gJGN0cmwuam9iVHlwZXNcIj48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiIG5nLWJpbmQ9XCJqb2IubmFtZVwiIG5nLWNsaWNrPVwiJGN0cmwuYXNzaWduTWUoa2V5KVwiPjwvYT48L2xpPjwvdWw+PC9kaXY+PHNwYW4gY2xhc3M9XCJwdWxsLXJpZ2h0XCIgbmctYmluZD1cIiRjdHJsLnVuaXQuY3VycmVudEpvYlwiPjwvc3Bhbj48L2Rpdj48ZGl2IG5nLXNob3c9XCIkY3RybC5tb2RlID09PSBcXCdOVVJTRVxcJ1wiPjxzcGFuIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwnYmFuaXNoVG9vbHRpcC5odG1sXFwnXCIgdG9vbHRpcC1jbGFzcz1cInRyYWl0LXRvb2x0aXBcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi14cyBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiJGN0cmwuYXNzaWduTWUoXFwnQkFOSVNIXFwnKVwiIG5nLWRpc2FibGVkPVwiISRjdHJsLmNhbkJhbmlzaCgpXCI+QmFuaXNoPC9idXR0b24+IDwvc3Bhbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi14cyBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiJGN0cmwuYXNzaWduTWUoXFwnV09SS1xcJylcIj5Xb3JrPC9idXR0b24+PC9kaXY+PC9kaXY+PHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiYmFuaXNoVG9vbHRpcC5odG1sXCI+PGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnQ7XCI+XFxuJyArXG4gICAgJyAgICAgICAgPGg1PkNvc3QgdG8gYmFuaXNoPC9oNT5cXG4nICtcbiAgICAnICAgICAgICA8cCBzdHlsZT1cIndoaXRlLXNwYWNlOm5vd3JhcFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3Bhbj5SZXF1aXJlczogPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgICAgICA8c3BhbiBuZy1yZXBlYXQ9XCJjb3N0IGluIHVuaXQuYmFuaXNoQ29zdFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYVwiIG5nLWNsYXNzPVwiJGN0cmwucmVzb3VyY2VTZXJ2aWNlLmdldFdvcmtlckljb24oY29zdC5yZXNvdXJjZVR5cGUpXCIgZGF0YS1hdHRyPVwie3skY3RybC5yZXNvdXJjZVR5cGVzW2Nvc3QucmVzb3VyY2VUeXBlXS5hdHRyfX1cIj48L2k+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwiY29zdC5hbW91bnRcIj48L3NwYW4+Jm5ic3A7XFxuJyArXG4gICAgJyAgICAgICAgICAgIDwvc3Bhbj5cXG4nICtcbiAgICAnICAgICAgICA8L3A+XFxuJyArXG4gICAgJyAgICAgICAgPCEtLVxcbicgK1xuICAgICcgICAgICAgIDxwIG5nLXJlcGVhdD1cImNvc3QgaW4gYnVpbGRpbmcuY29zdFRvQnVpbGRcIiBkYXRhLWF0dHI9XCJ7eyRjdHJsLnJlc291cmNlVHlwZXNbY29zdC5yZXNvdXJjZVR5cGVdLmF0dHJ9fVwiPjxzcGFuIG5nLWJpbmQ9XCJjb3N0LnJlc291cmNlXCI+PC9zcGFuPjogPHNwYW4gbmctYmluZD1cImNvc3QuYW1vdW50XCI+PC9zcGFuPjwvcD5cXG4nICtcbiAgICAnICAgICAgICAtLT5cXG4nICtcbiAgICAnICAgIDwvZGl2Pjwvc2NyaXB0PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3BsYXllckJveC9wbGF5ZXJCb3guaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwbGF5ZXItYm94XCI+PGgzIGNsYXNzPVwiYm94LXRpdGxlXCIgbmctdHJhbnNjbHVkZT1cImJveFRpdGxlSHRtbFwiPnt7JGN0cmwuYm94VGl0bGV9fTwvaDM+PGRpdiBjbGFzcz1cInBsYXllci1jb250ZW50XCI+PG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3BvcHVsYXRpb25MaXN0L3BvcHVsYXRpb25MaXN0Lmh0bWwnLFxuICAgICc8YmxvcWhlYWQtcGxheWVyLWJveD48YmxvcWhlYWQtcGxheWVyLWJveC10aXRsZT48ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy00XCI+PGkgY2xhc3M9XCJmYSBmYS1nbG9iZVwiPjwvaT4gUG9wdWxhdGlvbiBbe3skY3RybC5wb3B1bGF0aW9uLmxlbmd0aH19IC8ge3skY3RybC5tYXhQb3B1bGF0aW9ufX1dPC9kaXY+PGRpdiBjbGFzcz1cImNvbC14cy04XCI+PGRpdiBjbGFzcz1cInB1bGwtcmlnaHRcIj48L2Rpdj48L2Rpdj48L2Rpdj48L2Jsb3FoZWFkLXBsYXllci1ib3gtdGl0bGU+PGRpdiBjbGFzcz1cInJvdyBwb3B1bGF0aW9uLWNvbnRhaW5lclwiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIj48dWliLXRhYnNldCB0eXBlPVwicGlsbHNcIj48ZGl2IHVpYi10YWIgY2xhc3M9XCJwYW5lbC1kZWZhdWx0XCIgaGVhZGluZz1cIkdlbmRlciBWaWV3XCI+PGRpdiBjbGFzcz1cImNvbC14cy02IGNvbC1sZy02XCI+PGg0Pk1hbGVzPC9oND48YmxvcWhlYWQtcG9wdWxhdGlvbi1wYW5lbCBwb3B1bGF0aW9uPVwiJGN0cmwucG9wdWxhdGlvblwiIGZpbHRlcj1cInt0cmFpdHM6W1xcJ01hbGVcXCddfVwiPjwvYmxvcWhlYWQtcG9wdWxhdGlvbi1wYW5lbD48L2Rpdj48ZGl2IGNsYXNzPVwiY29sLXhzLTYgY29sLWxnLTZcIj48aDQ+RmVtYWxlczwvaDQ+PGJsb3FoZWFkLXBvcHVsYXRpb24tcGFuZWwgcG9wdWxhdGlvbj1cIiRjdHJsLnBvcHVsYXRpb25cIiBmaWx0ZXI9XCJ7dHJhaXRzOltcXCdGZW1hbGVcXCddfVwiPjwvYmxvcWhlYWQtcG9wdWxhdGlvbi1wYW5lbD48L2Rpdj48L2Rpdj48ZGl2IHVpYi10YWIgY2xhc3M9XCJwYW5lbC1kZWZhdWx0XCIgaGVhZGluZz1cIkN1c3RvbSBWaWV3XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjxkaXYgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5IHRyYWl0LWZpbHRlci1pdGVtXCIgbmctcmVwZWF0PVwiYyBpbiAkY3RybC5jcml0ZXJpYVwiIG5nLWNsaWNrPVwiJGN0cmwuZGVsZXRlQ3JpdGVyaWEoJGluZGV4KVwiPjxkaXYgbmctaWY9XCJjLnR5cGU9XFwndHJhaXRcXCdcIj48c3BhbiBuZy1iaW5kPVwiYy52YWwubmFtZVwiPjwvc3Bhbj4gPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIG5nLWNsaWNrPVwiJGN0cmwuZGVsZXRlQ3JpdGVyaWEoJGluZGV4KVwiPjxzcGFuPsOXPC9zcGFuPjwvYnV0dG9uPjwvZGl2PjwvZGl2PjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5XCIgdHlwZT1cImJ1dHRvblwiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgbmctY2xpY2s9XCIkY3RybC5vcGVuVHJhaXRTZWxlY3RvcigpXCI+QWRkIEZpbHRlcjwvYnV0dG9uPjwvZGl2PjxibG9xaGVhZC1wb3B1bGF0aW9uLXBhbmVsIHBvcHVsYXRpb249XCIkY3RybC5wb3B1bGF0aW9uXCIgZmlsdGVyPVwiJGN0cmwuZ2V0Q3VzdG9tRmlsdGVyKClcIj48L2Jsb3FoZWFkLXBvcHVsYXRpb24tcGFuZWw+PC9kaXY+PC91aWItdGFic2V0PjwvZGl2PjwvZGl2PjwvYmxvcWhlYWQtcGxheWVyLWJveD4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9wb3B1bGF0aW9uTGlzdC9wb3B1bGF0aW9uUGFuZWwuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwb3B1bGF0aW9uLXBhbmVsXCI+PHRhYmxlPjx0Ym9keT48dHIgbmctcmVwZWF0PVwidW5pdCBpbiAkY3RybC5wb3B1bGF0aW9uIHwgYXBwbHlQb3B1bGF0aW9uRmlsdGVyOiAkY3RybC5maWx0ZXIgfCBvcmRlckJ5OiAkY3RybC5vcmRlckJ5XCIgY2xhc3M9XCJwb3B1bGF0aW9uLWxpc3RcIj48dGQgY2xhc3M9XCJtb3J0YWwtbmFtZVwiIG5nLXN3aXRjaD1cInVuaXQuaGFzVHJhaXQoXFwnTWFsZVxcJylcIiBsdmwtZHJhZ2dhYmxlPVwidHJ1ZVwiIGRhdGEtYnJlZWRlcmlkPVwie3t1bml0LmlkfX1cIiBuZy1jbGljaz1cIiRjdHJsLnBhcmVudC5zaG93RGV0YWlscyh1bml0KVwiPjxpIGNsYXNzPVwiZmEgZmEtbWFsZSBtYWxlLWNvbG9yXCIgbmctc3dpdGNoLXdoZW49XCJ0cnVlXCI+PC9pPjxpIGNsYXNzPVwiZmEgZmEtZmVtYWxlIGZlbWFsZS1jb2xvclwiIG5nLXN3aXRjaC13aGVuPVwiZmFsc2VcIj48L2k+IDxpIGNsYXNzPVwiZmFcIiBuZy1jbGFzcz1cIiRjdHJsLmdldFdvcmtlckljb24oJGN0cmwucGFyZW50LmpvYlR5cGVzW3VuaXQuY3VycmVudEpvYl0ucmVzb3VyY2UpXCIgZGF0YS1hdHRyPVwie3skY3RybC5yZXNvdXJjZVR5cGVzWyRjdHJsLnBhcmVudC5qb2JUeXBlc1t1bml0LmN1cnJlbnRKb2JdLnJlc291cmNlXS5hdHRyfX1cIj48L2k+IDxzcGFuPnt7dW5pdC5uYW1lfX08L3NwYW4+PC90ZD48dGQgY2xhc3M9XCJtb3J0YWwtZ2Vub21lXCIgdWliLXRvb2x0aXAtdGVtcGxhdGU9XCJcXCdhdHRyVG9vbHRpcC5odG1sXFwnXCIgdG9vbHRpcC1jbGFzcz1cInRyYWl0LXRvb2x0aXBcIj48dGFibGUgY2xhc3M9XCJnZW5vbWVFZGl0b3JcIj48dGhlYWQ+PHRyPjx0aCBjb2xzcGFuPVwiNVwiPjxpbWcgY2xhc3M9XCJpbWctcmVzcG9uc2l2ZVwiIG5nLXNyYz1cInt7dW5pdC5yZWRHcmVlbkltYWdlfX1cIiBuZy1tb3VzZW1vdmU9XCIkY3RybC5pbWFnZUhvdmVyKCRldmVudClcIj48L3RoPjwvdHI+PC90aGVhZD48dGJvZHk+PHRyPjx0ZCBzdHlsZT1cIndpZHRoOiAyMCVcIiBuZy1tb3VzZW92ZXI9XCIkY3RybC5ob3ZlckF0dHIgPSBcXCdTVFJcXCdcIj57e3VuaXQuYXR0cmlidXRlcy5TVFJ9fTwvdGQ+PHRkIHN0eWxlPVwid2lkdGg6IDIwJVwiIG5nLW1vdXNlb3Zlcj1cIiRjdHJsLmhvdmVyQXR0ciA9IFxcJ0lOVFxcJ1wiPnt7dW5pdC5hdHRyaWJ1dGVzLklOVH19PC90ZD48dGQgc3R5bGU9XCJ3aWR0aDogMjAlXCIgbmctbW91c2VvdmVyPVwiJGN0cmwuaG92ZXJBdHRyID0gXFwnRU5EXFwnXCI+e3t1bml0LmF0dHJpYnV0ZXMuRU5EfX08L3RkPjx0ZCBzdHlsZT1cIndpZHRoOiAyMCVcIiBuZy1tb3VzZW92ZXI9XCIkY3RybC5ob3ZlckF0dHIgPSBcXCdDSFJcXCdcIj57e3VuaXQuYXR0cmlidXRlcy5DSFJ9fTwvdGQ+PHRkIHN0eWxlPVwid2lkdGg6IDIwJVwiIG5nLW1vdXNlb3Zlcj1cIiRjdHJsLmhvdmVyQXR0ciA9IFxcJ0xDS1xcJ1wiPnt7dW5pdC5hdHRyaWJ1dGVzLkxDS319PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48L3RkPjx0ZD48aSBuZy1yZXBlYXQ9XCJ0cmFpdCBpbiB1bml0LnRyYWl0c1wiIGNsYXNzPVwiZmEgZmEtc3RhclwiIHVpYi10b29sdGlwLXRlbXBsYXRlPVwiXFwndHJhaXRUb29sdGlwLmh0bWxcXCdcIiB0b29sdGlwLWNsYXNzPVwidHJhaXQtdG9vbHRpcFwiPjwvaT48L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjwvZGl2PjxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRyYWl0VG9vbHRpcC5odG1sXCI+PGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgPGg0Pnt7dHJhaXQubmFtZX19PC9oND5cXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGFibGVcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdlbmVzLXRyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGggcmVjXCI+UmVjZXNzaXZlPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGhcIj48c3BhbiBjbGFzcz1cInB1bGwtbGVmdFwiPi0yNTU8L3NwYW4+IDAgPHNwYW4gY2xhc3M9XCJwdWxsLXJpZ2h0XCI+KzI1NTwvc3Bhbj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnZW5lcy10aCBkb20gXCI+RG9taW5hbnQ8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnZW5lcy10ciBcIiBuZy1yZXBlYXQ9XCJnZW5lIGluIHRyYWl0LmdlbmVzXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGQgcmVjIFwiIG5nLWJpbmQ9XCIkY3RybC5nZW5lRGVmaW5pdGlvbnNbZ2VuZVswXV0ucmVjIFwiPjwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdlbmVzLXRkXCIgZGF0YS1hdHRyPVwie3skY3RybC5nZW5lRGVmaW5pdGlvbnNbZ2VuZVswXV0uYXR0cn19XCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzIHByb2dyZXNzLXRyYWl0LXNlbGVjdG9yXCIgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBcIiByb2xlPVwicHJvZ3Jlc3NiYXIgXCIgYXJpYS12YWx1ZW1pbj1cIi0yNTVcIiBhcmlhLXZhbHVlbWF4PVwiMjU1XCIgbmctc3R5bGU9XCIkY3RybC5nZXRHZW5lVmFsdWVTdHlsZSh1bml0LmdlbmVzW2dlbmVbMF1dKSBcIj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBcIiByb2xlPVwicHJvZ3Jlc3NiYXIgXCIgYXJpYS12YWx1ZW1pbj1cIi0yNTVcIiBhcmlhLXZhbHVlbWF4PVwiMjU1XCIgbmctc3R5bGU9XCIkY3RybC5nZXRHZW5lVHJhaXRSYW5nZVN0eWxlKCRjdHJsLmdlbmVEZWZpbml0aW9uc1tnZW5lWzBdXSwgdHJhaXQpXCI+PC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnZW5lcy10ZCBkb21cIiBuZy1iaW5kPVwiJGN0cmwuZ2VuZURlZmluaXRpb25zW2dlbmVbMF1dLmRvbVwiPjwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICA8YnIgLz5cXG4nICtcbiAgICAnICAgICAgICA8YnIgLz5cXG4nICtcbiAgICAnICAgIDwvZGl2Pjwvc2NyaXB0PjxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cImF0dHJUb29sdGlwLmh0bWxcIj48ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICA8aDQ+e3skY3RybC5hdHRyaWJ1dGVzWyRjdHJsLmhvdmVyQXR0cl0ubmFtZX19PC9oND5cXG4nICtcbiAgICAnICAgICAgICA8aDU+e3skY3RybC5hdHRyaWJ1dGVzWyRjdHJsLmhvdmVyQXR0cl0uZGVzY319PC9oNT5cXG4nICtcbiAgICAnICAgICAgICA8YnIgLz5cXG4nICtcbiAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGFibGVcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdlbmVzLXRyIFwiIG5nLXJlcGVhdD1cImdlbmUgaW4gJGN0cmwuZ2VuZURlZmluaXRpb25zIHwgZmlsdGVyOnthdHRyOiAkY3RybC5ob3ZlckF0dHJ9XCIgbmctaWY9XCJ1bml0LmdlbmVzVW5sb2NrZWQuaW5kZXhPZigkY3RybC5nZW5lRGVmaW5pdGlvbnMuaW5kZXhPZihnZW5lKSkgPj0wXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ2VuZXMtdGQgcmVjXCI+PHNwYW4gbmctYmluZD1cImdlbmUucmVjXCI+PC9zcGFuPjogLTxzcGFuIG5nLWJpbmQ9XCJ1bml0LmdlbmVzWyRjdHJsLmdlbmVEZWZpbml0aW9ucy5pbmRleE9mKGdlbmUpXVswXVwiPjwvc3Bhbj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJnZW5lcy10ZFwiIGRhdGEtYXR0cj1cInt7JGN0cmwuaG92ZXJBdHRyfX1cIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MgcHJvZ3Jlc3MtdHJhaXQtc2VsZWN0b3JcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO1wiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIFwiIHJvbGU9XCJwcm9ncmVzc2JhciBcIiBhcmlhLXZhbHVlbWluPVwiLTI1NVwiIGFyaWEtdmFsdWVtYXg9XCIyNTVcIiBuZy1zdHlsZT1cIiRjdHJsLmdldEdlbmVWYWx1ZVN0eWxlKHVuaXQuZ2VuZXNbJGN0cmwuZ2VuZURlZmluaXRpb25zLmluZGV4T2YoZ2VuZSldKSBcIj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBcIiByb2xlPVwicHJvZ3Jlc3NiYXIgXCIgYXJpYS12YWx1ZW1pbj1cIi0yNTVcIiBhcmlhLXZhbHVlbWF4PVwiMjU1XCIgbmctc3R5bGU9XCIkY3RybC5nZXRHZW5lUmFuZ2VTdHlsZSh1bml0LmdlbmVzWyRjdHJsLmdlbmVEZWZpbml0aW9ucy5pbmRleE9mKGdlbmUpXSlcIj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDwvZGl2PlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdlbmVzLXRkIGRvbVwiPjxzcGFuIG5nLWJpbmQ9XCJnZW5lLmRvbVwiPjwvc3Bhbj46IDxzcGFuIG5nLWJpbmQ9XCJ1bml0LmdlbmVzWyRjdHJsLmdlbmVEZWZpbml0aW9ucy5pbmRleE9mKGdlbmUpXVsxXVwiPjwvc3Bhbj48L2Rpdj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgPC9kaXY+XFxuJyArXG4gICAgJyAgICAgICAgPGJyIC8+XFxuJyArXG4gICAgJyAgICAgICAgPGJyIC8+XFxuJyArXG4gICAgJyAgICA8L2Rpdj48L3NjcmlwdD4nKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYmxvcWhlYWQuZ2VuZXRpeEFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9wb3B1bGF0aW9uTGlzdC90cmFpdFNlbGVjdG9yLmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiIGlkPVwibW9kYWwtYm9keVwiPjxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLThcIj48ZGl2IGNsYXNzPVwiZ2VuZXMtdGFibGVcIj48ZGl2IGNsYXNzPVwiZ2VuZXMtdHJcIj48ZGl2IGNsYXNzPVwiZ2VuZXMtdGggcmVjXCI+UmVjZXNzaXZlPC9kaXY+PGRpdiBjbGFzcz1cImdlbmVzLXRoXCI+PHNwYW4gY2xhc3M9XCJwdWxsLWxlZnRcIj4tMjU1PC9zcGFuPiAwIDxzcGFuIGNsYXNzPVwicHVsbC1yaWdodFwiPisyNTU8L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz1cImdlbmVzLXRoIGRvbVwiPkRvbWluYW50PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImdlbmVzLXRyXCIgbmctcmVwZWF0PVwiZyBpbiAkY3RybC5nZW5lRGVmaW5pdGlvbnNcIj48ZGl2IGNsYXNzPVwiZ2VuZXMtdGQgcmVjXCIgbmctYmluZD1cImcucmVjXCI+PC9kaXY+PGRpdiBjbGFzcz1cImdlbmVzLXRkXCIgZGF0YS1hdHRyPVwie3tnLmF0dHJ9fVwiPjxkaXYgY2xhc3M9XCJwcm9ncmVzcyBwcm9ncmVzcy10cmFpdC1zZWxlY3RvclwiPjxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbWluPVwiLTI1NVwiIGFyaWEtdmFsdWVtYXg9XCIyNTVcIiBuZy1zdHlsZT1cIiRjdHJsLmdldEdlbmVSYW5nZVN0eWxlKGcpXCI+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImdlbmVzLXRkIGRvbVwiIG5nLWJpbmQ9XCJnLmRvbVwiPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtNFwiPlRyYWl0czxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PHNwYW4gY2xhc3M9XCJ0cmFpdC1pY29uXCIgbmctcmVwZWF0PVwidCBpbiAkY3RybC50cmFpdERlZmluaXRpb25zXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWluZm9cIiB0eXBlPVwiYnV0dG9uXCIgbmctY2xpY2s9XCIkY3RybC5zZWxlY3QodClcIiBuZy1iaW5kPVwidC5uYW1lXCIgZGF0YS1uZy1tb3VzZWVudGVyPVwiJGN0cmwudHJhaXRFbnRlcih0KTtcIiBuZy1tb3VzZWxlYXZlPVwiJGN0cmwudHJhaXRMZWF2ZSh0KTtcIj48L2J1dHRvbj48L3NwYW4+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvcmVzb3VyY2VMaXN0L3Jlc291cmNlTGlzdC5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInJlc291cmNlLWxpc3QgY29sLXhzLTEyXCI+PGRpdiBjbGFzcz1cInJvd1wiIG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiAkY3RybC5yZXNvdXJjZXNcIiBuZy1pZj1cInZhbHVlWzJdID09PSB0cnVlXCIgZGF0YS1hdHRyPVwie3skY3RybC5yZXNvdXJjZVR5cGVzW2tleV0uYXR0cn19XCIgbHZsLWRyb3AtdGFyZ2V0PVwidHJ1ZVwiIG9uLWRyb3A9XCIkY3RybC5kcm9wcGVkKGRyYWdJZCwgZHJvcElkLCByZWxhdGl2ZVBvcywga2V5KVwiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTJcIj48aDUgdWliLXRvb2x0aXA9XCJ7eyRjdHJsLnJlc291cmNlVHlwZXNba2V5XS5kZXNjfX1cIj57eyRjdHJsLnJlc291cmNlVHlwZXNba2V5XS5uYW1lfX08L2g1PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTEwXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzIHByb2dyZXNzLWN1c3RvbVwiIG5nLWlmPVwidmFsdWVbMV0gIT09IC0xXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzLWJhclwiIHJvbGU9XCJwcm9ncmVzc2JhclwiIGFyaWEtdmFsdWVub3c9XCJ7e3ZhbHVlWzBdfX1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCJ7e3ZhbHVlWzFdfX1cIiBuZy1zdHlsZT1cInt3aWR0aDogKDEwMCoodmFsdWVbMF0vdmFsdWVbMV0pKSArIFxcJyVcXCd9XCI+PHNwYW4gY2xhc3M9XCJ3b3JrZXJzXCI+PGkgY2xhc3M9XCJmYVwiIG5nLWNsYXNzPVwiJGN0cmwuZ2V0V29ya2VySWNvbihrZXkpXCI+PC9pPiA8c3BhbiBuZy1iaW5kPVwiJGN0cmwuZ2V0V29ya2VyQ291bnQoa2V5KVwiPjwvc3Bhbj4gPC9zcGFuPjxzcGFuIGNsYXNzPVwiYW1vdW50c1wiIG5nLWJpbmQ9XCJ2YWx1ZVswXSArIFxcJyAvIFxcJyArIHZhbHVlWzFdXCI+PC9zcGFuPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJwcm9ncmVzcyBwcm9ncmVzcy1jdXN0b21cIiBuZy1pZj1cInZhbHVlWzFdID09PSAtMVwiPjxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBhcmlhLXZhbHVlbm93PVwiMVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjFcIiBuZy1zdHlsZT1cInt3aWR0aDogXFwnMTAwJVxcJ31cIj48c3BhbiBjbGFzcz1cIndvcmtlcnNcIj48aSBjbGFzcz1cImZhXCIgbmctY2xhc3M9XCIkY3RybC5nZXRXb3JrZXJJY29uKGtleSlcIj48L2k+IDxzcGFuIG5nLWJpbmQ9XCIkY3RybC5nZXRXb3JrZXJDb3VudChrZXkpXCI+PC9zcGFuPiA8L3NwYW4+PHNwYW4gY2xhc3M9XCJhbW91bnRzXCIgbmctYmluZD1cInZhbHVlWzBdXCI+PC9zcGFuPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvYnJlZWRlclRhYi5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInJvd1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtNlwiPjxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBidG4tZ3JvdXBcIiBuZy1jbGljaz1cIiRjdHJsLmFkZE5ld0JyZWVkZXIoKVwiPkFkZCBuZXcgQnJlZWRlcjwvYnV0dG9uPjxkaXYgY2xhc3M9XCJkcm9wZG93biBidG4tZ3JvdXBcIj48ZGl2IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+R2VuZGVyOiB7eyRjdHJsLm5ld0JyZWVkZXJHZW5kZXJ9fSA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPjwvZGl2Pjx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj48bGk+PGEgZGF0YS10YXJnZXQ9XCJcIiBuZy1jbGljaz1cIiRjdHJsLm5ld0JyZWVkZXJHZW5kZXIgPSBcXCdNYWxlXFwnXCI+TWFsZTwvYT48L2xpPjxsaT48YSBkYXRhLXRhcmdldD1cIlwiIG5nLWNsaWNrPVwiJGN0cmwubmV3QnJlZWRlckdlbmRlciA9IFxcJ0ZlbWFsZVxcJ1wiPkZlbWFsZTwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInJvd1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTIgY29sLXNtLTYgY29sLW1kLTRcIiBuZy1yZXBlYXQ9XCJ1bml0IGluICRjdHJsLnVuaXRzXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIG5nLWNsaWNrPVwiJGN0cmwua2lsbEJyZWVkZXIodW5pdClcIj48c3Bhbj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPjxnZW5vbWUtZWRpdG9yIHU9XCJ1bml0XCI+PC9nZW5vbWUtZWRpdG9yPjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvY29uZmlndXJhdGlvblRhYi5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cInJvd1wiPjxkaXYgY2xhc3M9XCJjb2wteHMtMTJcIj48aDU+UmVzb3VyY2VzPC9oNT48ZGl2IGNsYXNzPVwicm93XCI+PHNwYW4gbmctcmVwZWF0PVwicnQgaW4gJGN0cmwuc25hcHNob3QucmVzb3VyY2VUeXBlc1wiIG5nLWJpbmQ9XCJydC5uYW1lXCI+PC9zcGFuPjwvZGl2PjxoNT5CdWlsZGluZ3M8L2g1PjxoNT5Xb3JrZXJzPC9oNT48aDU+R2VuZXRpeDwvaDU+PGg1PkFjaGlldmVtZW50czwvaDU+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9mb250VGFiLmh0bWwnLFxuICAgICc8c3R5bGU+I2ZvbnQtZXhhbXBsZXMgbGkge1xcbicgK1xuICAgICcgICAgICAgIGZvbnQtc2l6ZTogMXZ3O1xcbicgK1xuICAgICcgICAgICAgIGNvbG9yOiBnb2xkO1xcbicgK1xuICAgICcgICAgfVxcbicgK1xuICAgICcgICAgXFxuJyArXG4gICAgJyAgICAjZm9udC1leGFtcGxlcyBpbnB1dCB7XFxuJyArXG4gICAgJyAgICAgICAgY29sb3I6IGJsYWNrO1xcbicgK1xuICAgICcgICAgfTwvc3R5bGU+PGRpdiBpZD1cImZvbnQtZXhhbXBsZXNcIj48dWwgY2xhc3M9XCJsaXN0LWdyb3VwXCI+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLXRyb3BoeVwiPjwvaT4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVhZG9ubHk9XCJyZWFkb25seVwiIHZhbHVlPVwidHJvcGh5XCI+PC9saT48bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj48aSBjbGFzcz1cImljb24taGFtbWVyXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJoYW1tZXJcIj48L2xpPjxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiPjxpIGNsYXNzPVwiaWNvbi1tb3J0YXItYm9hcmRcIj48L2k+IDxpbnB1dCB0eXBlPVwidGV4dFwiIHJlYWRvbmx5PVwicmVhZG9ubHlcIiB2YWx1ZT1cIm1vcnRhci1ib2FyZFwiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLXNrdWxsXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJza3VsbFwiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLWZvb3RcIj48L2k+IDxpbnB1dCB0eXBlPVwidGV4dFwiIHJlYWRvbmx5PVwicmVhZG9ubHlcIiB2YWx1ZT1cImZvb3RcIj48L2xpPjxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiPjxpIGNsYXNzPVwiaWNvbi1zaGllbGRcIj48L2k+IDxpbnB1dCB0eXBlPVwidGV4dFwiIHJlYWRvbmx5PVwicmVhZG9ubHlcIiB2YWx1ZT1cInNoaWVsZFwiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLXRvb2xzXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJ0b29sc1wiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLWJyb29tXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJicm9vbVwiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLWNvaW5zXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJjb2luc1wiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLWZsYXNrXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJmbGFza1wiPjwvbGk+PGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PGkgY2xhc3M9XCJpY29uLWJyaWNrc1wiPjwvaT4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVhZG9ubHk9XCJyZWFkb25seVwiIHZhbHVlPVwiYnJpY2tzXCI+PC9saT48bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj48aSBjbGFzcz1cImljb24taS1iZWFtXCI+PC9pPiA8aW5wdXQgdHlwZT1cInRleHRcIiByZWFkb25seT1cInJlYWRvbmx5XCIgdmFsdWU9XCJpLWJlYW1cIj48L2xpPjxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiPjxpIGNsYXNzPVwiaWNvbi1oYXBweVwiPjwvaT4gPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVhZG9ubHk9XCJyZWFkb25seVwiIHZhbHVlPVwiaGFwcHlcIj48L2xpPjwvdWw+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9nZW5vbWVFZGl0b3IuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJibG9xaGVhZC1jb21wb25lbnRcIj48aDQ+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemVOYW1lKCk7XCI+PGkgY2xhc3M9XCJmYSBmYS1hc3Rlcmlza1wiPjwvaT48L2J1dHRvbj4ge3skY3RybC51bml0Lm5hbWV9fSA8aSBjbGFzcz1cImZhIGZhLXN0YXJcIiBuZy1yZXBlYXQ9XCJ0cmFpdCBpbiAkY3RybC51bml0LnRyYWl0c1wiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIHJlbD1cInRvb2x0aXBcIiB0aXRsZT1cInt7dHJhaXQubmFtZX19XCI+PC9pPjwvaDQ+PGltZyBjbGFzcz1cImltZy1yZXNwb25zaXZlXCIgbmctc3JjPVwie3skY3RybC51bml0LnJlZEdyZWVuSW1hZ2V9fVwiIG5nLWNsaWNrPVwiJGN0cmwuZXhwYW5kbyA9ICEkY3RybC5leHBhbmRvXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgcmVsPVwidG9vbHRpcFwiIHRpdGxlPVwiQ2xpY2sgdG8gZXhwYW5kL2NvbGxhcHNlXCI+PGRpdiBuZy1zaG93PVwiJGN0cmwuZXhwYW5kb1wiIHN0eWxlPVwiaGVpZ2h0OiA0MDBweDsgb3ZlcmZsb3cteTogc2Nyb2xsOyBtYXJnaW4tdG9wOjVweFwiPjx0YWJsZSBjbGFzcz1cImdlbm9tZUVkaXRvciB0YWJsZSB0YWJsZS1jb25kZW5zZWRcIj48dGhlYWQ+PHRyPjx0aD4mbmJzcDs8L3RoPjx0aD5Eb21pbmFudDwvdGg+PHRoPlJlY2Vzc2l2ZTwvdGg+PHRoPlZhbHVlcyAoRC9SL00pPC90aD48dGg+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi13YXJuaW5nXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemVBbGwoKTtcIj48aSBjbGFzcz1cImZhIGZhLWFzdGVyaXNrXCI+PC9pPjwvYnV0dG9uPjwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHIgbmctcmVwZWF0PVwiZ2VuZSBpbiAkY3RybC5nZW5lRGVmaW5pdGlvbnNcIiBuZy1pZj1cIiRjdHJsLnVuaXQuZ2VuZXNbJGluZGV4XVsyXSA+IDBcIj48dGQgbmctYmluZD1cIiRpbmRleFwiPjwvdGQ+PHRkIG5nLWJpbmQ9XCJnZW5lLmRvbVwiPjwvdGQ+PHRkIG5nLWJpbmQ9XCJnZW5lLnJlY1wiPjwvdGQ+PHRkPjxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbWluPVwiMFwiIG1heD1cIjI1NVwiIG5nLW1vZGVsPVwiJGN0cmwudW5pdC5nZW5lc1skaW5kZXhdWzFdXCIgbmctY2hhbmdlPVwiJGN0cmwudW5pdC51cGRhdGUoKVwiPiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBtYXg9XCIyNTVcIiBuZy1tb2RlbD1cIiRjdHJsLnVuaXQuZ2VuZXNbJGluZGV4XVswXVwiIG5nLWNoYW5nZT1cIiRjdHJsLnVuaXQudXBkYXRlKClcIj4gPGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgbWF4PVwiMjU1XCIgbmctbW9kZWw9XCIkY3RybC51bml0LmdlbmVzWyRpbmRleF1bMl1cIiBuZy1jaGFuZ2U9XCIkY3RybC51bml0LnVwZGF0ZSgpXCI+PC90ZD48dGQ+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzXCIgbmctY2xpY2s9XCIkY3RybC5yYW5kb21pemUoJGluZGV4KTtcIj48aSBjbGFzcz1cImZhIGZhLWFzdGVyaXNrXCI+PC9pPjwvYnV0dG9uPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvdGVzdEludGVyZmFjZS9tYXRpbmdUYWIuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+PGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiPjxkaXYgY2xhc3M9XCJkcm9wZG93biBidG4tZ3JvdXBcIj48ZGl2IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+TW90aGVyOiB7eyRjdHJsLm1vdGhlci5uYW1lfX0gPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2Rpdj48dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+PGxpPjxhIGRhdGEtdGFyZ2V0PVwiXCIgbmctY2xpY2s9XCIkY3RybC5tb3RoZXIgPSB1bml0XCIgbmctcmVwZWF0PVwidW5pdCBpbiAkY3RybC51bml0cyB8IGhhc1RyYWl0OlxcJ0ZlbWFsZVxcJ1wiIG5nLWJpbmQ9XCJ1bml0Lm5hbWVcIj48L2E+PC9saT48L3VsPjwvZGl2PjxkaXYgY2xhc3M9XCJkcm9wZG93biBidG4tZ3JvdXBcIj48ZGl2IHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+RmF0aGVyOiB7eyRjdHJsLmZhdGhlci5uYW1lfX0gPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj48L2Rpdj48dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+PGxpPjxhIGRhdGEtdGFyZ2V0PVwiXCIgbmctY2xpY2s9XCIkY3RybC5mYXRoZXIgPSB1bml0XCIgbmctcmVwZWF0PVwidW5pdCBpbiAkY3RybC51bml0cyB8IGhhc1RyYWl0OlxcJ01hbGVcXCdcIiBuZy1iaW5kPVwidW5pdC5uYW1lXCI+PC9hPjwvbGk+PC91bD48L2Rpdj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4taW5mbyBidG4tZ3JvdXBcIiBuZy1jbGljaz1cIiRjdHJsLm1hdGUoKVwiIG5nLWRpc2FibGVkPVwiISRjdHJsLmZhdGhlciB8fCAhJGN0cmwubW90aGVyXCI+TWF0ZTwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdibG9xaGVhZC5nZW5ldGl4QXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL3Rlc3RJbnRlcmZhY2UvdGVzdEludGVyZmFjZS5odG1sJyxcbiAgICAnPGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPjx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+PGxpIHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzcz1cImFjdGl2ZVwiPjxhIGRhdGEtdGFyZ2V0PVwiI2JyZWVkZXJzXCIgcm9sZT1cInRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCI+QnJlZWRlcnM8L2E+PC9saT48bGkgcm9sZT1cInByZXNlbnRhdGlvblwiPjxhIGRhdGEtdGFyZ2V0PVwiI21hdGluZ1wiIHJvbGU9XCJ0YWJcIiBkYXRhLXRvZ2dsZT1cInRhYlwiPk1hdGluZzwvYT48L2xpPjxsaSByb2xlPVwicHJlc2VudGF0aW9uXCI+PGEgZGF0YS10YXJnZXQ9XCIjY29uZmlndXJhdGlvblwiIHJvbGU9XCJ0YWJcIiBkYXRhLXRvZ2dsZT1cInRhYlwiPkNvbmZpZ3VyYXRpb248L2E+PC9saT48bGkgcm9sZT1cInByZXNlbnRhdGlvblwiPjxhIGRhdGEtdGFyZ2V0PVwiI2ZvbnRzXCIgcm9sZT1cInRhYlwiIGRhdGEtdG9nZ2xlPVwidGFiXCI+Rm9udHM8L2E+PC9saT48L3VsPjxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPjxkaXYgcm9sZT1cInRhYnBhbmVsXCIgY2xhc3M9XCJ0YWItcGFuZSBhY3RpdmVcIiBpZD1cImJyZWVkZXJzXCI+PGJyZWVkZXItdGFiIHVuaXRzPVwiJGN0cmwudW5pdHNcIj48L2JyZWVkZXItdGFiPjwvZGl2PjxkaXYgcm9sZT1cInRhYnBhbmVsXCIgY2xhc3M9XCJ0YWItcGFuZVwiIGlkPVwibWF0aW5nXCI+PG1hdGluZy10YWIgdW5pdHM9XCIkY3RybC51bml0c1wiPjwvbWF0aW5nLXRhYj48L2Rpdj48ZGl2IHJvbGU9XCJ0YWJwYW5lbFwiIGNsYXNzPVwidGFiLXBhbmVcIiBpZD1cImNvbmZpZ3VyYXRpb25cIj48Y29uZmlndXJhdGlvbi10YWI+PC9jb25maWd1cmF0aW9uLXRhYj48L2Rpdj48ZGl2IHJvbGU9XCJ0YWJwYW5lbFwiIGNsYXNzPVwidGFiLXBhbmVcIiBpZD1cImZvbnRzXCI+PGZvbnQtdGFiPjwvZm9udC10YWI+PC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2Jsb3FoZWFkLmdlbmV0aXhBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvd29ya2VyTGlzdC93b3JrZXJMaXN0Lmh0bWwnLFxuICAgICc8ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCIgdGl0bGU9XCJcIj48ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy01XCI+Sm9iPC9kaXY+PGRpdiBjbGFzcz1cImNvbC14cy0yXCI+V29ya2VyczwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJyb3dcIiBuZy1yZXBlYXQ9XCJ3b3JrZXIgaW4gJGN0cmwud29ya2Vyc1wiIHN0eWxlPVwicGFkZGluZy1ib3R0b206IDVweFwiPjxkaXYgY2xhc3M9XCJjb2wteHMtNVwiPjxoNSB1aWItdG9vbHRpcD1cInt7d29ya2VyLmRlc2NyaXB0aW9ufX1cIj57e3dvcmtlci5uYW1lfX08L2g1PjwvZGl2PjxkaXYgY2xhc3M9XCJjb2wteHMtMlwiPjxoNSBuZy1iaW5kPVwid29ya2VyLmNvdW50XCI+PC9oNT48L2Rpdj48L2Rpdj48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG4iLCJhbmd1bGFyLm1vZHVsZShcImJsb3FoZWFkLmdlbmV0aXhBcHBcIilcbi5jb25zdGFudChcImdlbmVEZWZpbml0aW9uc1wiLCBbe1wiZG9tXCI6XCJCcm9hZCBTaG91bGRlcnNcIixcInJlY1wiOlwiU2xlbmRlciBTaG91bGRlcnNcIixcImF0dHJcIjpcIlNUUlwifSx7XCJkb21cIjpcIlRoaWNrIFNrdWxsXCIsXCJyZWNcIjpcIlNvZnQgU2t1bGxcIixcImF0dHJcIjpcIlNUUlwifSx7XCJkb21cIjpcIkxhcmdlIEFybXNcIixcInJlY1wiOlwiU21hbGwgQXJtc1wiLFwiYXR0clwiOlwiU1RSXCJ9LHtcImRvbVwiOlwiTGFyZ2UgTGVnc1wiLFwicmVjXCI6XCJTbWFsbCBMZWdzXCIsXCJhdHRyXCI6XCJTVFJcIn0se1wiZG9tXCI6XCJCaWcgQ2hlc3RcIixcInJlY1wiOlwiV2VhayBDaGVzdFwiLFwiYXR0clwiOlwiU1RSXCJ9LHtcImRvbVwiOlwiVG91Z2ggSmF3XCIsXCJyZWNcIjpcIldlYWsgSmF3XCIsXCJhdHRyXCI6XCJTVFJcIn0se1wiZG9tXCI6XCJPYWZpc2hcIixcInJlY1wiOlwiTW91c2V5XCIsXCJhdHRyXCI6XCJTVFJcIn0se1wiZG9tXCI6XCJTVFI3K1wiLFwicmVjXCI6XCJTVFI3LVwiLFwiYXR0clwiOlwiU1RSXCJ9LHtcImRvbVwiOlwiU1RSOCtcIixcInJlY1wiOlwiU1RSOC1cIixcImF0dHJcIjpcIlNUUlwifSx7XCJkb21cIjpcIlNUUjkrXCIsXCJyZWNcIjpcIlNUUjktXCIsXCJhdHRyXCI6XCJTVFJcIn0se1wiZG9tXCI6XCJJTlQwK1wiLFwicmVjXCI6XCJJTlQwLVwiLFwiYXR0clwiOlwiSU5UXCJ9LHtcImRvbVwiOlwiSU5UMStcIixcInJlY1wiOlwiSU5UMS1cIixcImF0dHJcIjpcIklOVFwifSx7XCJkb21cIjpcIklOVDIrXCIsXCJyZWNcIjpcIklOVDItXCIsXCJhdHRyXCI6XCJJTlRcIn0se1wiZG9tXCI6XCJJTlQzK1wiLFwicmVjXCI6XCJJTlQzLVwiLFwiYXR0clwiOlwiSU5UXCJ9LHtcImRvbVwiOlwiQ2FsY3VsYXRlZCBEZWNpc2lvbnNcIixcInJlY1wiOlwiUmVja2xlc3NcIixcImF0dHJcIjpcIklOVFwifSx7XCJkb21cIjpcIkxhdGVyYWwgVGhpbmtlclwiLFwicmVjXCI6XCJTaW5nbGUgTWluZGVkXCIsXCJhdHRyXCI6XCJJTlRcIn0se1wiZG9tXCI6XCJRdWljayBMZWFybmVyXCIsXCJyZWNcIjpcIkZvcmdldGZ1bFwiLFwiYXR0clwiOlwiSU5UXCJ9LHtcImRvbVwiOlwiSU5UNytcIixcInJlY1wiOlwiSU5UNy1cIixcImF0dHJcIjpcIklOVFwifSx7XCJkb21cIjpcIklOVDgrXCIsXCJyZWNcIjpcIklOVDgtXCIsXCJhdHRyXCI6XCJJTlRcIn0se1wiZG9tXCI6XCJJTlQ5K1wiLFwicmVjXCI6XCJJTlQ5LVwiLFwiYXR0clwiOlwiSU5UXCJ9LHtcImRvbVwiOlwiRU5EMCtcIixcInJlY1wiOlwiRU5EMC1cIixcImF0dHJcIjpcIkVORFwifSx7XCJkb21cIjpcIkVORDErXCIsXCJyZWNcIjpcIkVORDEtXCIsXCJhdHRyXCI6XCJFTkRcIn0se1wiZG9tXCI6XCJFTkQyK1wiLFwicmVjXCI6XCJFTkQyLVwiLFwiYXR0clwiOlwiRU5EXCJ9LHtcImRvbVwiOlwiRU5EMytcIixcInJlY1wiOlwiRU5EMy1cIixcImF0dHJcIjpcIkVORFwifSx7XCJkb21cIjpcIkVORDQrXCIsXCJyZWNcIjpcIkVORDQtXCIsXCJhdHRyXCI6XCJFTkRcIn0se1wiZG9tXCI6XCJFTkQ1K1wiLFwicmVjXCI6XCJFTkQ1LVwiLFwiYXR0clwiOlwiRU5EXCJ9LHtcImRvbVwiOlwiRU5ENitcIixcInJlY1wiOlwiRU5ENi1cIixcImF0dHJcIjpcIkVORFwifSx7XCJkb21cIjpcIkVORDcrXCIsXCJyZWNcIjpcIkVORDctXCIsXCJhdHRyXCI6XCJFTkRcIn0se1wiZG9tXCI6XCJFTkQ4K1wiLFwicmVjXCI6XCJFTkQ4LVwiLFwiYXR0clwiOlwiRU5EXCJ9LHtcImRvbVwiOlwiRU5EOStcIixcInJlY1wiOlwiRU5EOS1cIixcImF0dHJcIjpcIkVORFwifSx7XCJkb21cIjpcIkVsb3F1ZW50XCIsXCJyZWNcIjpcIkNhdGF0b25pY1wiLFwiYXR0clwiOlwiQ0hSXCJ9LHtcImRvbVwiOlwiUG93ZXJmdWwgVm9pY2VcIixcInJlY1wiOlwiUXVpZXQgVm9pY2VcIixcImF0dHJcIjpcIkNIUlwifSx7XCJkb21cIjpcIkZ1bGwgTGlwc1wiLFwicmVjXCI6XCJUaGluIExpcHNcIixcImF0dHJcIjpcIkNIUlwifSx7XCJkb21cIjpcIkRhcmsgU2tpblwiLFwicmVjXCI6XCJGYWlyIFNraW5cIixcImF0dHJcIjpcIkNIUlwifSx7XCJkb21cIjpcIkNIUjQrXCIsXCJyZWNcIjpcIkNIUjQtXCIsXCJhdHRyXCI6XCJDSFJcIn0se1wiZG9tXCI6XCJDSFI1K1wiLFwicmVjXCI6XCJDSFI1LVwiLFwiYXR0clwiOlwiQ0hSXCJ9LHtcImRvbVwiOlwiQ0hSNitcIixcInJlY1wiOlwiQ0hSNi1cIixcImF0dHJcIjpcIkNIUlwifSx7XCJkb21cIjpcIkNIUjcrXCIsXCJyZWNcIjpcIkNIUjctXCIsXCJhdHRyXCI6XCJDSFJcIn0se1wiZG9tXCI6XCJDSFI4K1wiLFwicmVjXCI6XCJDSFI4LVwiLFwiYXR0clwiOlwiQ0hSXCJ9LHtcImRvbVwiOlwiQ0hSOStcIixcInJlY1wiOlwiQ0hSOS1cIixcImF0dHJcIjpcIkNIUlwifSx7XCJkb21cIjpcIkxDSzArXCIsXCJyZWNcIjpcIkxDSzAtXCIsXCJhdHRyXCI6XCJMQ0tcIn0se1wiZG9tXCI6XCJMQ0sxK1wiLFwicmVjXCI6XCJMQ0sxLVwiLFwiYXR0clwiOlwiTENLXCJ9LHtcImRvbVwiOlwiTENLMitcIixcInJlY1wiOlwiTENLMi1cIixcImF0dHJcIjpcIkxDS1wifSx7XCJkb21cIjpcIkxDSzMrXCIsXCJyZWNcIjpcIkxDSzMtXCIsXCJhdHRyXCI6XCJMQ0tcIn0se1wiZG9tXCI6XCJMQ0s0K1wiLFwicmVjXCI6XCJMQ0s0LVwiLFwiYXR0clwiOlwiTENLXCJ9LHtcImRvbVwiOlwiTENLNStcIixcInJlY1wiOlwiTENLNS1cIixcImF0dHJcIjpcIkxDS1wifSx7XCJkb21cIjpcIkxDSzYrXCIsXCJyZWNcIjpcIkxDSzYtXCIsXCJhdHRyXCI6XCJMQ0tcIn0se1wiZG9tXCI6XCJMQ0s3K1wiLFwicmVjXCI6XCJMQ0s3LVwiLFwiYXR0clwiOlwiTENLXCJ9LHtcImRvbVwiOlwiTENLOCtcIixcInJlY1wiOlwiTENLOC1cIixcImF0dHJcIjpcIkxDS1wifSx7XCJkb21cIjpcIkxDSzkrXCIsXCJyZWNcIjpcIkxDSzktXCIsXCJhdHRyXCI6XCJMQ0tcIn0se1wiZG9tXCI6XCJGZW1hbGVcIixcInJlY1wiOlwiTWFsZVwiLFwiYXR0clwiOlwiTk9ORVwifV0pXG4uY29uc3RhbnQoXCJ0cmFpdERlZmluaXRpb25zXCIsIFt7XCJuYW1lXCI6XCJIYW5kc29tZVwiLFwiZ2VuZXNcIjpbWzAsLTIwMCwyMDBdLFs1LDUwLDI1NV1dLFwicmVxdWlyZWRUcmFpdHNcIjpbXCJNYWxlXCJdfSx7XCJuYW1lXCI6XCJQcmV0dHlcIixcImdlbmVzXCI6W1swLC0yMDAsLTEwMF0sWzQsMjAsMjQwXV0sXCJyZXF1aXJlZFRyYWl0c1wiOltcIkZlbWFsZVwiXX0se1wibmFtZVwiOlwiQWdncmVzc2l2ZVwiLFwiZ2VuZXNcIjpbWzAsMjAwLDI1NV0sWzIsMjAwLDI1NV0sWzQsMjAwLDI1NV0sWzUsMjAwLDI1NV0sWzE0LC0yNTUsLTE1MF1dfSx7XCJuYW1lXCI6XCJUcmFpdCBTZWxlY3RvciBUZXN0XCIsXCJnZW5lc1wiOltbMCwwLDI1NV0sWzEwLDAsMjU1XSxbMjAsMCwyNTVdLFszMCwwLDI1NV0sWzQwLDAsMjU1XSxbNTAsMCwyNTVdXX0se1wibmFtZVwiOlwiRmVtYWxlXCIsXCJnZW5lc1wiOltbNTAsMCwyNTVdXX0se1wibmFtZVwiOlwiTWFsZVwiLFwiZ2VuZXNcIjpbWzUwLC0yNTUsLTFdXX0se1wibmFtZVwiOlwiSGFuZHNvbWUgQWdncmVzc2l2ZSBhbmQgc29tZXRoaW5nXCIsXCJnZW5lc1wiOltbMzAsMCwwXV0sXCJyZXF1aXJlZFRyYWl0c1wiOltcIkhhbmRzb21lXCIsXCJBZ2dyZXNzaXZlXCJdfV0pXG4uY29uc3RhbnQoXCJhdHRyaWJ1dGVzXCIsIHtcIlNUUlwiOntcIm5hbWVcIjpcIlN0cmVuZ3RoXCIsXCJkZXNjXCI6XCJBZmZlY3RzIGEgbW9ydGFscyBhYmlsaXR5IGZvciBwaHlzaWNhbCBsYWJvciBzdWNoIGFzIGRpZ2dpbmcuXCJ9LFwiSU5UXCI6e1wibmFtZVwiOlwiSW50ZWxsaWdlbmNlXCIsXCJkZXNjXCI6XCJBZmZlY3RzIGEgbW9ydGFscyBhYmlsaXR5IGZvciB0aG91Z2h0ZnVsIGVuZGVhdm9ycyBzdWNoIGFzIHJlc2VhcmNoaW5nLlwifSxcIkVORFwiOntcIm5hbWVcIjpcIkVuZHVyYW5jZVwiLFwiZGVzY1wiOlwiQWZmZWN0cyBhIG1vcnRhbHMgYWJpbGl0eSBmb3IgZGVtYW5kaW5nIHRhc2tzIHN1Y2ggYXMgd29vZCBjaG9wcGluZy5cIn0sXCJDSFJcIjp7XCJuYW1lXCI6XCJDaGFyaXNtYVwiLFwiZGVzY1wiOlwiQWZmZWN0cyBhIG1vcnRhbHMgYWJpbGl0eSBmb3Igc3R1ZmYuXCJ9LFwiTENLXCI6e1wibmFtZVwiOlwiTHVja1wiLFwiZGVzY1wiOlwiSW5jcmVhc2VzIGEgbW9ydGFscyBsdWNrLiAgVXNlZnVsIGZvciBkaXZpbmluZyB3YXRlci5cIn19KTtcbiIsImFuZ3VsYXIubW9kdWxlKFwiYmxvcWhlYWQuZ2VuZXRpeEFwcFwiKVxuLmNvbnN0YW50KFwibG9nVHlwZXNcIiwge1wiR0VORVJBTFwiOjEsXCJCUkVFRFwiOjIsXCJBQ0hJRVZFTUVOVFwiOjMsXCJXT1JLXCI6NH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoXCJibG9xaGVhZC5nZW5ldGl4QXBwXCIpXG4uY29uc3RhbnQoXCJhY2hpZXZlbWVudFNldHVwXCIsIHtcImFjaGlldmVtZW50R3JvdXBzXCI6W3tcIm5hbWVcIjpcIlBvcHVsYXRpb25cIixcImFpZHNcIjpbXCJBX0JJUlRIU1wiXX0se1wibmFtZVwiOlwiUmVzb3VyY2VzXCIsXCJhaWRzXCI6W1wiQV9ESVJUX0VcIixcIkFfQlJJQ0tTX0VcIixcIkFfU1RFRUxfRVwiLFwiQV9XQVRFUl9FXCIsXCJBX1dPT0RfRVwiLFwiQV9HT0xEX0VcIixcIkFfU0NJRU5DRV9FXCIsXCJBX0VWT0NPSU5fRVwiLFwiQV9IQVBQSU5FU1NfRVwiXX0se1wibmFtZVwiOlwiQnVpbGRpbmdzXCIsXCJhaWRzXCI6W1wiQV9TT0RIT1VTRV9CXCIsXCJBX0RJUlRQSUxFX0JcIixcIkFfV09PRFNIRURfQlwiLFwiQV9XQVRFUkhPTEVfQlwiXX1dLFwiYWNoaWV2ZW1lbnRzXCI6e1wiQV9CSVJUSFNcIjp7XCJhaWRcIjpcIkFfQklSVEhTXCIsXCJuYW1lXCI6XCJUaGUgQ2hvc2VuIE9uZVwiLFwiZGVzY1wiOlwiQ3JlYXRlIGEgbmV3IHVuaXRcIixcInJhbmtzXCI6W1sxLFtbXCJQX1JfQk9OVVNcIixcIkRJUlRcIiwyMF1dXSxbMyxbW1wiUF9SX0JPTlVTXCIsXCJXT09EXCIsMjBdXV0sWzUsW1tcIlBfUl9CT05VU1wiLFwiRVZPQ09JTlwiLDFdXV1dfSxcIkFfRElSVF9FXCI6e1wiYWlkXCI6XCJBX0RJUlRfRVwiLFwibmFtZVwiOlwiRWFybiBEaXJ0XCIsXCJkZXNjXCI6XCJFYXJuIERpcnQgRGVzY1wiLFwibG9nbXNnXCI6XCJFYXJuIERpcnQgTG9nXCIsXCJyZXNcIjpcIkRJUlRcIixcInJhbmtzXCI6W1s1LFtbXCJQX1JfTVVMVElQTElFUlwiLFwiRElSVFwiLDI1XV1dLFsyNSxbW1wiUF9SX1VOTE9DS1wiLFwiV09PRFwiXSxbXCJQX0JfVU5MT0NLXCIsXCJXT09EU0hFRFwiXSxbXCJQX0JfQk9OVVNcIixcIldPT0RTSEVEXCIsMV1dXSxbMTAwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiRElSVFwiLDUwXV1dLFsxMDAwLFtbXCJQX0JfTVVMVElQTElFUlwiLFwiRElSVFBJTEVcIiwyMF1dXSxbMjAwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIkRJUlRQSUxFXCIsMjBdXV0sWzMwMDAsW1tcIlBfQl9NVUxUSVBMSUVSXCIsXCJESVJUUElMRVwiLDIwXV1dLFs0MDAwLFtbXCJQX0JfTVVMVElQTElFUlwiLFwiRElSVFBJTEVcIiwyMF1dXSxbNTAwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIkRJUlRQSUxFXCIsMjBdXV0sWzc1MDAsW1tcIlBfQl9NVUxUSVBMSUVSXCIsXCJESVJUUElMRVwiLDUwXV1dLFsxMDAwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIkRJUlRQSUxFXCIsNTBdXV0sWzE1MDAwLFtbXCJQX0JfTVVMVElQTElFUlwiLFwiRElSVFBJTEVcIiw3NV1dXSxbMjAwMDAsW1tcIlBfQl9NVUxUSVBMSUVSXCIsXCJESVJUUElMRVwiLDEwMF1dXSxbMzAwMDAsW1tcIlBfUl9NVUxUSVBMSUVSXCIsXCJESVJUXCIsMTAwXV1dLFs1MDAwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIkRJUlRQSUxFXCIsNTBdXV0sWzgwMDAwLFtbXCJQX0JfTVVMVElQTElFUlwiLFwiRElSVFBJTEVcIiw1MF1dXV19LFwiQV9CUklDS1NfRVwiOntcImFpZFwiOlwiQV9CUklDS1NfRVwiLFwibmFtZVwiOlwiRWFybiBCcmlja3NcIixcImRlc2NcIjpcIkVhcm4gQnJpY2tzIERlc2NcIixcImxvZ21zZ1wiOlwiRWFybiBCcmlja3MgTG9nXCIsXCJyZXNcIjpcIkJSSUNLU1wiLFwicmFua3NcIjpbWzUwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiSEFQUElORVNTXCIsMTBdXV1dfSxcIkFfU1RFRUxfRVwiOntcImFpZFwiOlwiQV9TVEVFTF9FXCIsXCJuYW1lXCI6XCJFYXJuIFN0ZWVsXCIsXCJkZXNjXCI6XCJFYXJuIFN0ZWVsIERlc2NcIixcImxvZ21zZ1wiOlwiRWFybiBTdGVlbCBMb2dcIixcInJlc1wiOlwiU1RFRUxcIixcInJhbmtzXCI6W1s1MCxbW1wiUF9SX01VTFRJUExJRVJcIixcIkhBUFBJTkVTU1wiLDEwXV1dXX0sXCJBX1dBVEVSX0VcIjp7XCJhaWRcIjpcIkFfV0FURVJfRVwiLFwibmFtZVwiOlwiRWFybiBXYXRlclwiLFwiZGVzY1wiOlwiRWFybiBXYXRlciBEZXNjXCIsXCJsb2dtc2dcIjpcIkVhcm4gV2F0ZXIgTG9nXCIsXCJyZXNcIjpcIldBVEVSXCIsXCJyYW5rc1wiOltbNTAsW1tcIlBfUl9NVUxUSVBMSUVSXCIsXCJXQVRFUlwiLDEwXV1dLFs3NSxbW1wiUF9CX01VTFRJUExJRVJcIixcIldBVEVSSE9MRVwiLDEwXV1dLFs1MDAsW1tcIlBfUl9NVUxUSVBMSUVSXCIsXCJXQVRFUlwiLDEwXV1dLFs3NTAsW1tcIlBfQl9NVUxUSVBMSUVSXCIsXCJXQVRFUkhPTEVcIiwxMF1dXSxbMjUwMCxbW1wiUF9CX1VOTE9DS1wiLFwiTElCUkFSWVwiXV1dLFs1MDAwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiV0FURVJcIiwxMF1dXSxbNzUwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIldBVEVSSE9MRVwiLDEwXV1dLFs1MDAwMCxbW1wiUF9SX01VTFRJUExJRVJcIixcIldBVEVSXCIsNTBdXV0sWzc1MDAwLFtbXCJQX0JfTVVMVElQTElFUlwiLFwiV0FURVJIT0xFXCIsMTBdXV1dfSxcIkFfV09PRF9FXCI6e1wiYWlkXCI6XCJBX1dPT0RfRVwiLFwibmFtZVwiOlwiRWFybiBXb29kXCIsXCJkZXNjXCI6XCJFYXJuIFdvb2QgRGVzY1wiLFwibG9nbXNnXCI6XCJFYXJuIFdvb2QgTG9nXCIsXCJyZXNcIjpcIldPT0RcIixcInJhbmtzXCI6W1s1MCxbW1wiUF9SX1VOTE9DS1wiLFwiV0FURVJcIl0sW1wiUF9CX1VOTE9DS1wiLFwiV0FURVJIT0xFXCJdLFtcIlBfQl9CT05VU1wiLFwiV0FURVJIT0xFXCIsMV1dXSxbMjUwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiV09PRFwiLDUwXV1dLFs1MDAsW1tcIlBfQl9NVUxUSVBMSUVSXCIsXCJXT09EU0hFRFwiLDEwMF1dXSxbMTAwMCxbW1wiUF9CX01VTFRJUExJRVJcIixcIldPT0RTSEVEXCIsMTAwXV1dLFsyNTAwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiV09PRFwiLDUwXV1dLFs1MDAwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiV09PRFwiLDUwXV1dLFsxMDAwMCxbW1wiUF9SX01VTFRJUExJRVJcIixcIldPT0RcIiw1MF0sW1wiUF9CX01VTFRJUExJRVJcIixcIldPT0RTSEVEXCIsMTAwXV1dLFsyMDAwMCxbW1wiUF9SX01VTFRJUExJRVJcIixcIldPT0RcIiw1MF0sW1wiUF9CX01VTFRJUExJRVJcIixcIldPT0RTSEVEXCIsMTAwXV1dXX0sXCJBX0dPTERfRVwiOntcImFpZFwiOlwiQV9HT0xEX0VcIixcIm5hbWVcIjpcIkVhcm4gR29sZFwiLFwiZGVzY1wiOlwiRWFybiBHb2xkIERlc2NcIixcImxvZ21zZ1wiOlwiRWFybiBHb2xkIExvZ1wiLFwicmVzXCI6XCJHT0xEXCIsXCJyYW5rc1wiOltbNTAsW1tcIlBfUl9NVUxUSVBMSUVSXCIsXCJIQVBQSU5FU1NcIiwxMF1dXV19LFwiQV9TQ0lFTkNFX0VcIjp7XCJhaWRcIjpcIkFfU0NJRU5DRV9FXCIsXCJuYW1lXCI6XCJFYXJuIFNjaWVuY2VcIixcImRlc2NcIjpcIkVhcm4gU2NpZW5jZSBEZXNjXCIsXCJsb2dtc2dcIjpcIkVhcm4gU2NpZW5jZSBMb2dcIixcInJlc1wiOlwiU0NJRU5DRVwiLFwicmFua3NcIjpbWzUwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiSEFQUElORVNTXCIsMTBdXV1dfSxcIkFfSEFQUElORVNTX0VcIjp7XCJhaWRcIjpcIkFfSEFQUElORVNTX0VcIixcIm5hbWVcIjpcIkVhcm4gSGFwcGluZXNzXCIsXCJkZXNjXCI6XCJFYXJuIEhhcHBpbmVzcyBEZXNjXCIsXCJsb2dtc2dcIjpcIkVhcm4gSGFwcGluZXNzIExvZ1wiLFwicmVzXCI6XCJIQVBQSU5FU1NcIixcInJhbmtzXCI6W1s1MCxbW1wiUF9SX01VTFRJUExJRVJcIixcIkhBUFBJTkVTU1wiLDEwXV1dXX0sXCJBX0VWT0NPSU5fRVwiOntcImFpZFwiOlwiQV9FVk9DT0lOX0VcIixcIm5hbWVcIjpcIkVhcm4gRVZPLUNvaW5zXCIsXCJkZXNjXCI6XCJFYXJuIEVWTy1Db2lucyBEZXNjXCIsXCJsb2dtc2dcIjpcIkVhcm4gRVZPLUNvaW5zIExvZ1wiLFwicmVzXCI6XCJFVk9DT0lOXCIsXCJyYW5rc1wiOltbMTAwLFtbXCJQX1JfTVVMVElQTElFUlwiLFwiSEFQUElORVNTXCIsMjBdXV1dfSxcIkFfU09ESE9VU0VfQlwiOntcImFpZFwiOlwiQV9TT0RIT1VTRV9CXCIsXCJuYW1lXCI6XCJCdWlsZCBhIFNvZCBIb3VzZVwiLFwiZGVzY1wiOlwiQnVpbGQgYSBTb2QgSG91c2VcIixcImxvZ21zZ1wiOlwiQnVpbGQgYSBTb2QgSG91c2VcIixcInJlc1wiOlwiSEFQUElORVNTXCIsXCJyYW5rc1wiOltbNCxbW1wiUF9CX0JPTlVTXCIsXCJESVJUUElMRVwiLDRdLFtcIlBfQl9CT05VU1wiLFwiV09PRFNIRURcIiw0XSxbXCJQX0JfQk9OVVNcIixcIldBVEVSSE9MRVwiLDRdXV1dfSxcIkFfRElSVFBJTEVfQlwiOntcImFpZFwiOlwiQV9ESVJUUElMRV9CXCIsXCJuYW1lXCI6XCJCdWlsZCBhIERpcnQgUGlsZVwiLFwiZGVzY1wiOlwiQnVpbGQgYSBEaXJ0IFBpbGVcIixcImxvZ21zZ1wiOlwiQnVpbGQgYSBEaXJ0IFBpbGVcIixcInJlc1wiOlwiRElSVFwiLFwicmFua3NcIjpbWzI1LFtbXCJQX1JfTVVMVElQTElFUlwiLFwiRElSVFwiLDI1MF1dXV19LFwiQV9XT09EU0hFRF9CXCI6e1wiYWlkXCI6XCJBX1dPT0RTSEVEX0JcIixcIm5hbWVcIjpcIkJ1aWxkIGEgV29vZHNoZWRcIixcImRlc2NcIjpcIkJ1aWxkIGEgV29vZHNoZWRcIixcImxvZ21zZ1wiOlwiQnVpbGQgYSBXb29kc2hlZFwiLFwicmVzXCI6XCJXT09EXCIsXCJyYW5rc1wiOltbMjUsW1tcIlBfUl9NVUxUSVBMSUVSXCIsXCJXT09EXCIsMjUwXV1dXX0sXCJBX1dBVEVSSE9MRV9CXCI6e1wiYWlkXCI6XCJBX1dBVEVSSE9MRV9CXCIsXCJuYW1lXCI6XCJCdWlsZCBhIFdhdGVyIEhvbGVcIixcImRlc2NcIjpcIkJ1aWxkIGEgV2F0ZXIgSG9sZVwiLFwibG9nbXNnXCI6XCJCdWlsZCBhIFdhdGVyIEhvbGVcIixcInJlc1wiOlwiV0FURVJcIixcInJhbmtzXCI6W1syNSxbW1wiUF9SX01VTFRJUExJRVJcIixcIldBVEVSXCIsMjUwXV1dXX0sXCJBX0xJQlJBUllfQlwiOntcImFpZFwiOlwiQV9MSUJSQVJZX0JcIixcIm5hbWVcIjpcIkJ1aWxkIGEgTGlicmFyeVwiLFwiZGVzY1wiOlwiQnVpbGQgYSBMaWJyYXJ5XCIsXCJsb2dtc2dcIjpcIkJ1aWxkIGEgTGlicmFyeVwiLFwicmVzXCI6XCJTQ0lFTkNFXCIsXCJyYW5rc1wiOltbMSxbW1wiUF9SX1VOTE9DS1wiLFwiU0NJRU5DRVwiXV1dXX19LFwicGVya3NcIjp7XCJQX1JfVU5MT0NLXCI6e1wicGlkXCI6XCJQX1JfVU5MT0NLXCIsXCJuYW1lXCI6XCJOZXcgUmVzb3VyY2U6ICUocmVzKXNcIixcImRlc2NcIjpcIlVubG9ja3MgdGhlICUocmVzKXMgcmVzb3VyY2UuXCIsXCJsb2dtc2dcIjpcIlRoZSAlKHJlcylzIHJlc291cmNlIGhhcyBiZWVuIHVubG9ja2VkLlwiLFwib25jZVwiOmZhbHNlfSxcIlBfUl9NVUxUSVBMSUVSXCI6e1wicGlkXCI6XCJQX1JfTVVMVElQTElFUlwiLFwibmFtZVwiOlwiUmVzb3VyY2UgTXVsdGlwbGllclwiLFwiZGVzY1wiOlwiSW5jcmVhc2VzIHRoZSByYXRlIGF0IHdoaWNoIHlvdSBhcXVpcmUgJShyZXMpcyBieSAlKGFtdClkJSUuXCIsXCJsb2dtc2dcIjpcIkVhcm5lZCAlKG5hbWUpcyAtIFRoZSByYXRlIHRoYXQgeW91IGFxdWlyZSAlKHJlcylzIGhhcyBiZWVuIGluY3JlYXNlZCBieSAlKGFtdClkJSUuXCJ9LFwiUF9SX0JPTlVTXCI6e1wicGlkXCI6XCJQX1JfQk9OVVNcIixcIm5hbWVcIjpcIkJvbnVzIFJlc291cmNlc1wiLFwiZGVzY1wiOlwiJShhbXQpZCAlKHJlcylzIHdpbGwgYmUgYWRkZWQgdG8geW91ciBzdG9yYWdlLlwiLFwibG9nbXNnXCI6XCIlKGFtdClkICUocmVzKXMgaGFzIGJlZW4gYWRkZWQgdG8geW91ciBzdG9yYWdlLlwifSxcIlBfR19FTkhBTkNFRFwiOntcInBpZFwiOlwiUF9HX0VOSEFOQ0VEXCIsXCJuYW1lXCI6XCJOZXcgR2VuZSBFbmhhbmNlbWVudFwiLFwiZGVzY1wiOlwiV2lsbCBpbmNyZWFzZSB0aGUgYm91bmRhcnkgYnkgJShhbXQpZCBmb3IgeW91ciAlKGF0dHIpcyAlKGRvbSlzLyUocmVjKXMgZ2VuZS5cIixcImxvZ21zZ1wiOlwiVGhlIGJvdW5kYXJ5IGhhcyBiZWVuIGluY3JlYXNlZCBieSAlKGFtdClkIGZvciBvbmUgb2YgeW91ciAlKGF0dHIpcyBnZW5lcy4gKCUoZG9tKXMvJShyZWMpcylcIn0sXCJQX0JfVU5MT0NLXCI6e1wicGlkXCI6XCJQX0JfVU5MT0NLXCIsXCJuYW1lXCI6XCJOZXcgYnVpbGRpbmc6ICUoYnVpbGRpbmdUeXBlKXNcIixcImRlc2NcIjpcIlVubG9ja3MgdGhlICUoYnVpbGRpbmdUeXBlKXMgYnVpbGRpbmcuXCIsXCJsb2dtc2dcIjpcIlRoZSAlKGJ1aWxkaW5nVHlwZSlzIGJ1aWxkaW5nIGhhcyBiZWVuIHVubG9ja2VkLlwifSxcIlBfQl9CT05VU1wiOntcInBpZFwiOlwiUF9CX0dJRlRcIixcIm5hbWVcIjpcIkJvbnVzIEJ1aWxkaW5nc1wiLFwiZGVzY1wiOlwiJShhbXQpZCBmcmVlICUoYnVpbGRpbmdUeXBlKXMlKHBsdXJhbClzIGZvciB5b3UgdG8gdXNlLlwiLFwibG9nbXNnXCI6XCJZb3UgaGF2ZSBiZWVuIGdpdmVuICUoYW10KWQgJShidWlsZGluZ1R5cGUpcyUocGx1cmFsKXMuXCJ9LFwiUF9CX01VTFRJUExJRVJcIjp7XCJwaWRcIjpcIlBfQl9NVUxUSVBMSUVSXCIsXCJuYW1lXCI6XCIlKGJ1aWxkaW5nVHlwZSlzIG11bHRpcGxpZXJcIixcImRlc2NcIjpcIllvdXIgJShidWlsZGluZ1R5cGUpc3Mgbm93IGhvbGQgJShhbXQpZCUlIG1vcmUuXCIsXCJsb2dtc2dcIjpcIllvdXIgJShidWlsZGluZ1R5cGUpc3MganVzdCBnb3QgJShhbXQpZCUlIGJpZ2dlci5cIn19fSk7XG4iLCJhbmd1bGFyLm1vZHVsZShcImJsb3FoZWFkLmdlbmV0aXhBcHBcIilcbi5jb25zdGFudChcImRlZmF1bHRCdWlsZGluZ3NcIiwge1wiQlVOR0FMT1dcIjp7XCJuYW1lXCI6XCJCcmVlZGluZyBCdW5nYWxvd1wiLFwiZGVzY3JpcHRpb25cIjpcIkEgcHJpdmF0ZSBidW5nYWxvdyBmb3IgJShzaXplKWQgd2hlcmUgdGhlIG1hZ2ljIGhhcHBlbnMuIER1ZSB0byB0aGUgbWFnaWMgbmF0dXJlIG9mIHRoaXMgYnVpbGRpbmcsIGl0IGNhbm5vdCBiZSBidWlsdCBkaXJlY3RseS5cIixcInVzZVwiOlwiYnJlZWRpbmdcIixcInNpemVcIjoyLFwiYmFzZUNvc3RcIjpbXSxcInB1cmNoYXNlZFwiOjAsXCJnaWZ0ZWRcIjoxLFwidW5sb2NrZWRcIjp0cnVlLFwibXVsdGlwbGllclwiOjF9LFwiTlVSU0VSWVwiOntcIm5hbWVcIjpcIk51cnNlcnlcIixcImRlc2NyaXB0aW9uXCI6XCJBIHBsYWNlIGZvciBuZXdib3Jucy4gTWF4aW11bSBuZXdib3JucyAlKHNpemUpZC5cIixcInVzZVwiOlwibmV3Ym9yblwiLFwic2l6ZVwiOjEsXCJiYXNlQ29zdFwiOltdLFwicHVyY2hhc2VkXCI6MCxcImdpZnRlZFwiOjEsXCJ1bmxvY2tlZFwiOnRydWUsXCJtdWx0aXBsaWVyXCI6MX0sXCJTT0RIT1VTRVwiOntcIm5hbWVcIjpcIlNvZCBIb3VzZVwiLFwiZGVzY3JpcHRpb25cIjpcIlByb3ZpZGVzIG1pbmltYWwgc2hlbHRlciBmb3IgJShzaXplKWQgdGhpbmdzLlwiLFwidXNlXCI6XCJob3VzaW5nXCIsXCJzaXplXCI6NSxcImJhc2VDb3N0XCI6W3tcInJlc291cmNlXCI6XCJESVJUXCIsXCJhbW91bnRcIjo1MDAsXCJjb3N0TXVsdGlwbGllclwiOjIuNX0se1wicmVzb3VyY2VcIjpcIldPT0RcIixcImFtb3VudFwiOjI1MCxcImNvc3RNdWx0aXBsaWVyXCI6Mi41fSx7XCJyZXNvdXJjZVwiOlwiV0FURVJcIixcImFtb3VudFwiOjEyNSxcImNvc3RNdWx0aXBsaWVyXCI6Mi41fV0sXCJwdXJjaGFzZWRcIjowLFwiZ2lmdGVkXCI6MSxcInVubG9ja2VkXCI6dHJ1ZSxcIm11bHRpcGxpZXJcIjoxfSxcIkRJUlRQSUxFXCI6e1wibmFtZVwiOlwiRGlydCBQaWxlXCIsXCJkZXNjcmlwdGlvblwiOlwiV2hlcmUgZWxzZSB3b3VsZCB5b3Ugc3RvcmUgZGlydD8gSG9sZHMgJShzaXplKWQuXCIsXCJ1c2VcIjpcInN0b3JhZ2VcIixcInN0b3Jlc1wiOlwiRElSVFwiLFwic2l6ZVwiOjEwMCxcImJhc2VDb3N0XCI6W3tcInJlc291cmNlXCI6XCJESVJUXCIsXCJhbW91bnRcIjo1MCxcImNvc3RNdWx0aXBsaWVyXCI6MS4yNX1dLFwicHVyY2hhc2VkXCI6MCxcImdpZnRlZFwiOjEsXCJ1bmxvY2tlZFwiOnRydWUsXCJtdWx0aXBsaWVyXCI6MX0sXCJXT09EU0hFRFwiOntcIm5hbWVcIjpcIldvb2RzaGVkXCIsXCJkZXNjcmlwdGlvblwiOlwiSG9sZHMgJShzaXplKWQgd29vZFwiLFwidXNlXCI6XCJzdG9yYWdlXCIsXCJzdG9yZXNcIjpcIldPT0RcIixcInNpemVcIjoxMDAsXCJiYXNlQ29zdFwiOlt7XCJyZXNvdXJjZVwiOlwiV09PRFwiLFwiYW1vdW50XCI6NTAsXCJjb3N0TXVsdGlwbGllclwiOjEuMX0se1wicmVzb3VyY2VcIjpcIkRJUlRcIixcImFtb3VudFwiOjI1LFwiY29zdE11bHRpcGxpZXJcIjoxLjF9XSxcInB1cmNoYXNlZFwiOjAsXCJnaWZ0ZWRcIjowLFwidW5sb2NrZWRcIjpmYWxzZSxcIm11bHRpcGxpZXJcIjoxfSxcIldBVEVSSE9MRVwiOntcIm5hbWVcIjpcIldhdGVyIEhvbGVcIixcImRlc2NyaXB0aW9uXCI6XCJBIGRpcnR5IHBsYWNlIHRvIGhvbGQgd2F0ZXIuIFN0b3JlcyAlKHNpemUpZC5cIixcInVzZVwiOlwic3RvcmFnZVwiLFwic3RvcmVzXCI6XCJXQVRFUlwiLFwic2l6ZVwiOjEwMCxcImJhc2VDb3N0XCI6W3tcInJlc291cmNlXCI6XCJXT09EXCIsXCJhbW91bnRcIjo1MCxcImNvc3RNdWx0aXBsaWVyXCI6MS4xfSx7XCJyZXNvdXJjZVwiOlwiRElSVFwiLFwiYW1vdW50XCI6NTAsXCJjb3N0TXVsdGlwbGllclwiOjEuMDV9XSxcInB1cmNoYXNlZFwiOjAsXCJnaWZ0ZWRcIjowLFwidW5sb2NrZWRcIjpmYWxzZSxcIm11bHRpcGxpZXJcIjoxfSxcIldFTExcIjp7XCJuYW1lXCI6XCJXZWxsXCIsXCJkZXNjcmlwdGlvblwiOlwiVXNlZCBmb3Igd2F0ZXIgcHJvZHVjdGlvbi5cIixcInVzZVwiOlwicHJvZHVjdGlvblwiLFwicHJvZHVjZXNcIjpcIldBVEVSXCIsXCJzaXplXCI6NSxcImJhc2VDb3N0XCI6W3tcInJlc291cmNlXCI6XCJCUklDS1NcIixcImFtb3VudFwiOjEwMCxcImNvc3RNdWx0aXBsaWVyXCI6MS4wNX1dLFwicHVyY2hhc2VkXCI6MCxcImdpZnRlZFwiOjAsXCJ1bmxvY2tlZFwiOmZhbHNlLFwibXVsdGlwbGllclwiOjF9LFwiTElCUkFSWVwiOntcIm5hbWVcIjpcIkxpYnJhcnlcIixcImRlc2NyaXB0aW9uXCI6XCJBIHBsYWNlIGZvciByZXNlYXJjaGVycywgcHJvZHVjZXMgc2NpZW5jZS5cIixcInVzZVwiOlwicHJvZHVjdGlvblwiLFwic2l6ZVwiOjAsXCJiYXNlQ29zdFwiOlt7XCJyZXNvdXJjZVwiOlwiRElSVFwiLFwiYW1vdW50XCI6NTAwMCxcImNvc3RNdWx0aXBsaWVyXCI6MTAwfSx7XCJyZXNvdXJjZVwiOlwiV09PRFwiLFwiYW1vdW50XCI6MjUwMCxcImNvc3RNdWx0aXBsaWVyXCI6MTAwfSx7XCJyZXNvdXJjZVwiOlwiV0FURVJcIixcImFtb3VudFwiOjE1MDAsXCJjb3N0TXVsdGlwbGllclwiOjEwMH1dLFwicHVyY2hhc2VkXCI6MCxcImdpZnRlZFwiOjAsXCJ1bmxvY2tlZFwiOmZhbHNlLFwibXVsdGlwbGllclwiOjEsXCJzdG9yZXNcIjpcIlwiLFwicHJvZHVjZXNcIjpcIlNDSUVOQ0VcIixcIm1heGNvdW50XCI6MX19KTtcbiIsImFuZ3VsYXIubW9kdWxlKFwiYmxvcWhlYWQuZ2VuZXRpeEFwcFwiKVxuLmNvbnN0YW50KFwiZGVmYXVsdFN0YXRlXCIsIHtcImNsZWFyTG9nXCI6dHJ1ZSxcImF1dG9TYXZlU3RlcHNcIjozMCxcImdhbWVMb29wU2VydmljZVN0YXRlXCI6e1wic3RlcFRpbWVNc1wiOjEwMDB9LFwicG9wdWxhdGlvblNlcnZpY2VTdGF0ZVwiOntcImJyZWVkU3RlcHNcIjo2LFwic3RlcHNTaW5jZUJyZWVkXCI6MCxcInBvcHVsYXRpb25TdGF0ZVwiOntcImluaXRpYWxTaXplXCI6MixcIm1heFNpemVcIjo1LFwiYnJlZWRlckdlbmVDYXBcIjo5MCxcImJyZWVkZXJHZW5lc1VubG9ja2VkXCI6WzAsMTAsMjAsMzAsNDBdLFwiYnJlZWRlck11dGF0aW9uQ2hhbmNlXCI6MTB9fSxcImFjaGlldmVtZW50U2VydmljZVN0YXRlXCI6bnVsbCxcInJlc291cmNlU2VydmljZVN0YXRlXCI6e1wicmVzb3VyY2VzXCI6e319LFwiYnVpbGRpbmdTZXJ2aWNlU3RhdGVcIjp7XCJidWlsZGluZ3NcIjp7fX0sXCJ3b3JrZXJTZXJ2aWNlU3RhdGVcIjp7XCJ3b3JrZXJzXCI6W119fSlcbi5jb25zdGFudChcImdhbWVTYXZlS2V5XCIsIFwiR0VORVRJWF9TQVZFXCIpXG4uY29uc3RhbnQoXCJnYW1lU3RhdGVzXCIsIHtcIlBBVVNFRFwiOjAsXCJSVU5OSU5HXCI6MX0pO1xuIiwiYW5ndWxhci5tb2R1bGUoXCJibG9xaGVhZC5nZW5ldGl4QXBwXCIpXG4uY29uc3RhbnQoXCJyZXNvdXJjZVR5cGVzXCIsIHtcIkhBUFBJTkVTU1wiOntcInJpZFwiOlwiSEFQUElORVNTXCIsXCJuYW1lXCI6XCJIYXBwaW5lc3NcIixcImRlc2NcIjpcIkdvb2QgdGhpbmdzIGhhcHBlbiB0byB0aG9zZSB0aGF0IGFyZSBoYXBweS4uLlwiLFwiYXR0clwiOlwiQ0hSXCIsXCJqaWRzXCI6W1wiSURMRVwiXX0sXCJESVJUXCI6e1wicmlkXCI6XCJESVJUXCIsXCJuYW1lXCI6XCJEaXJ0XCIsXCJkZXNjXCI6XCJVc2VkIGluIGNvbnN0cnVjdGlvbiBhbmQgbWluaW5nLlwiLFwiYXR0clwiOlwiU1RSXCIsXCJqaWRzXCI6W1wiRElSVF9HQVRIRVJcIl19LFwiV09PRFwiOntcInJpZFwiOlwiV09PRFwiLFwibmFtZVwiOlwiV29vZFwiLFwiZGVzY1wiOlwiVXNlZCBpbiBjb25zdHJ1Y3Rpb24gYW5kIG1pbmluZy5cIixcImF0dHJcIjpcIkVORFwiLFwiamlkc1wiOltcIldPT0RfR0FUSEVSXCJdfSxcIldBVEVSXCI6e1wicmlkXCI6XCJXQVRFUlwiLFwibmFtZVwiOlwiV2F0ZXJcIixcImRlc2NcIjpcIlVzZWQgaW4gY29uc3RydWN0aW9uLCBtaW5pbmcgYW5kIHBvcHVsYXRpb24gZXhwYW5zaW9uLlwiLFwiYXR0clwiOlwiTENLXCIsXCJqaWRzXCI6W1wiV0FURVJfR0FUSEVSXCJdfSxcIlNDSUVOQ0VcIjp7XCJyaWRcIjpcIlNDSUVOQ0VcIixcIm5hbWVcIjpcIlNjaWVuY2VcIixcImRlc2NcIjpcIlVzZWQgaW4gZ2VuZXRpYyBtb2RpZmljYXRpb24gYW5kIGFkdmFuY2VkIGNvbnN0cnVjdGlvbi5cIixcImF0dHJcIjpcIklOVFwiLFwiamlkc1wiOltcIlJFU0VBUkNIRVJcIl19LFwiQlJJQ0tTXCI6e1wicmlkXCI6XCJCUklDS1NcIixcIm5hbWVcIjpcIkJyaWNrc1wiLFwiZGVzY1wiOlwiVXNlZCBpbiBjb25zdHJ1Y3Rpb24gYW5kIHNtZWx0aW5nLlwiLFwiYXR0clwiOlwiU1RSXCJ9LFwiU1RFRUxcIjp7XCJyaWRcIjpcIlNURUVMXCIsXCJuYW1lXCI6XCJTdGVlbFwiLFwiZGVzY1wiOlwiVXNlZCBpbiBhZHZhbmNlZCBjb25zdHJ1Y3Rpb24uXCIsXCJhdHRyXCI6XCJTVFJcIn0sXCJHT0xEXCI6e1wicmlkXCI6XCJHT0xEXCIsXCJuYW1lXCI6XCJHb2xkXCIsXCJkZXNjXCI6XCJVc2VkIGZvciBwdXJjaGFzaW5nIGdlbmUgcmVzZWFyY2ggdGVjaG5vbG9naWVzLlwiLFwiYXR0clwiOlwiSU5UXCJ9LFwiRVZPQ09JTlwiOntcInJpZFwiOlwiRVZPQ09JTlwiLFwibmFtZVwiOlwiRXZvLUNvaW5zXCIsXCJkZXNjXCI6XCJBIHJhcmUgY29tbW9kaXR5IGluZGVlZC4gVXNlZCB0byBkaXNjb3ZlciB0cmFpdHMuXCIsXCJhdHRyXCI6XCJMQ0tcIn19KTtcbiIsImFuZ3VsYXIubW9kdWxlKFwiYmxvcWhlYWQuZ2VuZXRpeEFwcFwiKVxuLmNvbnN0YW50KFwiam9iVHlwZXNcIiwge1wiSURMRVwiOntcImppZFwiOlwiSURMRVwiLFwibmFtZVwiOlwiSWRsZVwiLFwiZGVzY3JpcHRpb25cIjpcIk9uZSB3aG8gZW5qb3lzIGxpZmVcIixcInJlc291cmNlXCI6XCJIQVBQSU5FU1NcIixcImJhc2VXb3JrZXJTdGVwc1wiOjQsXCJiYXNlQW1vdW50XCI6MSxcInVubG9ja2VkXCI6MX0sXCJESVJUX0dBVEhFUlwiOntcImppZFwiOlwiRElSVF9HQVRIRVJcIixcIm5hbWVcIjpcIkRpcnQgRGlnZ2VyXCIsXCJkZXNjcmlwdGlvblwiOlwiT25lIHdobyBkaWdzIGRpcnRcIixcInJlc291cmNlXCI6XCJESVJUXCIsXCJiYXNlV29ya2VyU3RlcHNcIjo0LFwiYmFzZUFtb3VudFwiOjEsXCJ1bmxvY2tlZFwiOjF9LFwiV09PRF9HQVRIRVJcIjp7XCJqaWRcIjpcIldPT0RfR0FUSEVSXCIsXCJuYW1lXCI6XCJXb29kIENob3BwZXJcIixcImRlc2NyaXB0aW9uXCI6XCJPbmUgd2hvIGNob3BzIHdvb2RcIixcInJlc291cmNlXCI6XCJXT09EXCIsXCJiYXNlV29ya2VyU3RlcHNcIjo0LFwiYmFzZUFtb3VudFwiOjEsXCJ1bmxvY2tlZFwiOjB9LFwiV0FURVJfR0FUSEVSXCI6e1wiamlkXCI6XCJXQVRFUl9HQVRIRVJcIixcIm5hbWVcIjpcIldhdGVyIERpdmluZXJcIixcImRlc2NyaXB0aW9uXCI6XCJPbmUgd2hvIHVzZXMgd29vZGVuIHN0aWNrcyB0byBmaW5kIHdhdGVyXCIsXCJyZXNvdXJjZVwiOlwiV0FURVJcIixcImJhc2VXb3JrZXJTdGVwc1wiOjQsXCJiYXNlQW1vdW50XCI6MSxcInVubG9ja2VkXCI6MH0sXCJSRVNFQVJDSEVSXCI6e1wiamlkXCI6XCJSRVNFQVJDSEVSXCIsXCJuYW1lXCI6XCJSZXNlYXJjaGVyXCIsXCJkZXNjcmlwdGlvblwiOlwiT25lIHdobyBsZWFybnNcIixcInJlc291cmNlXCI6XCJTQ0lFTkNFXCIsXCJiYXNlV29ya2VyU3RlcHNcIjo0LFwiYmFzZUFtb3VudFwiOjEsXCJ1bmxvY2tlZFwiOjB9fSk7XG4iXX0=
