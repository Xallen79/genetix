function randomIntFromInterval(e,t){return Math.floor(Math.random()*(t-e+1)+e)}!function(){function e(e,t){for(var n=[];t>0;t--)n.push(String.fromCharCode(255&e)),e>>=8;return n.join("")}function t(e,t){for(var n,a,r,o=e.length,i=o?e[0].length:0,s="",l=[];t>0;t--)s+="\0";for(n=0;n<o;n++){for(a=0;a<i;a++)r=e[n][a],l.push(String.fromCharCode(r[2])+String.fromCharCode(r[1])+String.fromCharCode(r[0]));l.push(s)}return l.join("")}function n(e,t){var n,a,r,o=e.length,i=parseInt(o*t),s=o?e[0].length:0,l=parseInt(s*t),d=[];for(r=0;r<i;r++)for(d.push(n=[]),a=0;a<l;a++)n.push(e[parseInt(r/t)][parseInt(a/t)]);return d}window.generateBitmapDataURL=function(a,r){if(!window.btoa)return alert("Oh no, your browser does not support base64 encoding - window.btoa()!!"),!1;r=r||1,1!=r&&(a=n(a,r));var o,i=a.length,s=i?a[0].length:0,l=(4-3*s%4)%4,d=(3*s+l)*i,c=54+d;return i=e(i,4),s=e(s,4),d=e(d,4),c=e(c,4),o="BM"+c+"\0\0\0\x006\0\0\0(\0\0\0"+s+i+"\0\0\0\0\0\0"+d+"\v\0\0\v\0\0\0\0\0\0\0\0\0\0"+t(a,l),"data:image/bmp;base64,"+btoa(o)}}(),function(e,t,n){function a(e){/^rgb\(\d+, \d+, \d+\)$/.test(e)?o=function(e){e=e.split(","),e[0]=e[0].substr(4);for(var t=0;t<3;t++)e[t]=parseInt(e[t]);return e}:"#"==e.substring(0,1)?o=function(e){e=e.substring(1);var t=0,n=e.length,a=[];if(3==n)for(;t<n;t++)a.push(parseInt("0x"+e.substring(t,t+1)+e.substring(t,t+1)));else for(;t<n;t+=2)a.push(parseInt("0x"+e.substring(t,t+2)));return a}:alert("Unparseable color: "+e)}function r(e){var r=t.getElementById(e).style.backgroundColor;return""===r?[255,255,255]:(o===n&&a(r),o(r))}var o;e.generateLowResBitmap=function(n){n=n||10;for(var a,o,i,s,l,d=50,c=49,u=[];c>=0;c--)for(u.push(o=[]),a=0;a<d;a++)o.push(r(a+"_"+c));return s=t.createElement("img"),l=e.generateBitmapDataURL(u,n),s.src=l,s.alt="If you can read this, your browser probably doesn't support the data URL scheme format! Oh no!",s.title="You generated an image, great job! To save it, drag it to your Desktop or right click and select save as.",i=t.getElementById("img"),null===i&&(i=t.createElement("div"),i.id="img",t.getElementById("wrap").appendChild(i)),i.innerHTML='<div class="img-header">Generated Image &nbsp;<a title="hide image" href="#">x</a></div>',i.getElementsByTagName("a")[0].onclick=function(){var e=t.getElementById("img");return e.parentNode.removeChild(e),!1},i.appendChild(s),!1},e.generateLowResBitmap.askToScale=function(){var t=prompt("Pick a scaling factor...\n1 = actual size, .5 = half, 2 = double\n(note: large numbers might crash your browser)");if(t){try{t=parseFloat(t)}catch(e){t=NaN}isNaN(t)?alert("That is not a number!"):(t=10*t,e.generateLowResBitmap(t))}return!1}}(this,this.document),function(e){e(function(){e("body").tooltip({selector:"[rel=tooltip]"})})}(jQuery),angular.module("bloqhead.genetixApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){t.otherwise("/");var a=[];a.push({name:"home",url:"/",templateUrl:"components/home.html"}),a.push({name:"home.main",url:"main",component:"bloqhead.components.mainGame"}),a.push({name:"home.test",url:"test",component:"bloqhead.components.testInterface"}),a.forEach(function(t){e.state(t)})}]).run(["gameService","populationService","logService",function(e,t,n){e.init()}]);var game=angular.module("bloqhead.genetixApp");game.filter("hasTrait",function(){return function(e,t){for(var n=[],a=0;a<e.length;a++)e[a].hasTrait(t)&&n.push(e[a]);return n}}),game.factory("Breeder",["$filter","TraitInspector",function(e,t){function n(e,t,n){for(var a=Math.random(),r=angular.copy(a<=d.crossoverrate?e:t),o=r[2]/255,i="",s="",l=0;l<n;l++)i+=Math.random()<o?"1":"0",s+=Math.random()<o?"1":"0";r[0],r[1];return r[0]^=parseInt(i,2),r[1]^=parseInt(s,2),r}function a(e,t){return generateBitmapDataURL(s(o(e,t),e.length),20)}function r(e){return generateBitmapDataURL(s(i(e),e.length),20)}function o(e,t){for(var n=[],a=50,r=255/(Math.pow(2,t)-1),o=0;o<e.length;o++){var i=e[o][0],s=e[o][1],l=Math.abs(i-s)/255;l*=r,i>s?s=0:i=0,i*=l,s*=l,i>0&&(i+=a),s>0&&(s+=a),i>255&&(i=255),s>255&&(s=255),n.push([i,s,0])}return n}function i(e){for(var t=[],n=0;n<e.length;n++)t.push([0,0,e[n][2]]);return t}function s(e,t){for(var n=[],a=0;a<e.length/t;a++){for(var r=[],o=0;o<t;o++)r.push(e[o+a*t]);n.push(r)}return n}var l=function(e){this.traitInspector=new t,this.update(e)};l.prototype.update=function(e){"undefined"==typeof e&&(e={}),this.id=e.id||this.id||0,this.mother=e.mother||this.mother||null,this.father=e.father||this.father||null,this.generation=e.generation||this.generation||0,this.genes=e.genes||this.genes||[],this.mutationBits=e.mutationBits||this.mutationBits||4,this.redGreenImage=a(this.genes,this.mutationBits),this.blueImage=r(this.genes),this.traits=this.traitInspector.getTraits(this.genes),this.attributes=this.traitInspector.getAttributes(this.genes),this.name=this.name&&"Unknown Gender"!==this.name?this.name:e.name||this.getRandomName()},l.prototype.breed=function(e,t){for(var a=this,r=e,o=this.hasTrait("Male")?"Male":"Female",i=new l({id:t,generation:a.generation+1,genes:[],mother:"Female"==o?a:r,father:"Male"==o?a:r}),s=0;s<a.genes.length;s++){var d=a.genes[s],c=r.genes[s];i.genes.push(n(d,c,this.mutationBits))}return i.update(),i},l.prototype.getTraits=function(){return this.traits},l.prototype.hasTrait=function(e){var t=this.traits.filter(function(t){return t.name===e}).length;return t>0},l.prototype.getRandomName=function(){if(!this.genes||0===this.genes.length)return"Unknown Gender";var e=this.hasTrait("Male")?c[randomIntFromInterval(0,c.length-1)]:u[randomIntFromInterval(0,u.length-1)],t=p[randomIntFromInterval(0,p.length-1)]+m[randomIntFromInterval(0,m.length-1)]+g[randomIntFromInterval(0,g.length-1)];return e+t};var d={crossoverrate:.5},c=["Diggy ","Dean ","Duke ","Doyle ","Dirk ","Dag ","Dimitri ","Dru "],u=["Daggy ","Daisy ","Dinah ","Dharma ","Dee ","Daphne ","Dixie ","Darcy "],p=["","","","","","Van ","Von ","O'","Mc","Mc"],m=["Doog","Dibb","Dabb","Dig","Dang","Dugg"],g=["","","","ler","ler","er","er","er","wuerst","erwuerst","erton","erton","ski"];return l}]);var game=angular.module("bloqhead.genetixApp");game.factory("Population",["$filter","Breeder","geneDefinitions",function(e,t,n){var a=function(e){this.update(e)};return a.prototype.update=function(e){e=e||{},this.geneDefinitions=n,this.currentGeneration=e.currentGeneration||this.currentGeneration||0,this.breeders=e.breeders|this.breeders||[],this.maxSize=e.maxSize|this.maxSize||10,this.breederMutationBits=e.breederMutationBits,this.breederMutationChance=e.breederMutiationChance||5,this.breederGenesUnlocked=e.breederGenesUnlocked||[],this.members=e.members|this.members||this.createInitialPopulation(e.initialSize||2)},a.prototype.createInitialPopulation=function(e){for(var n=this,a=[],r=0;r<e;r++){for(var o=[],i=0;i<n.geneDefinitions.length;i++)o.push([0,0,0]),n.breederGenesUnlocked.indexOf(i)!==-1&&(o[i][2]=n.breederMutationChance);var s=r%2===0?255:0,l=r%2===0?0:255;o[42][0]=s,o[42][1]=l,o[42][2]=0;var d=new t({id:r,generation:0,genes:angular.copy(o),mutationBits:n.breederMutationBits});d.update(),a.push(d)}return a},a.prototype.isBreeding=function(){if(this.members.length>=this.maxSize)return!1;for(var e=!1,t=!1,n=0;n<this.breeders.length;n++){var a=this.getById(this.breeders[n]);if(a.hasTrait("Male")?e=!0:t=!0,e&&t)break}return e&&t},a.prototype.getById=function(e){return this.members.filter(function(t){return t.id===e})[0]},a.prototype.getByGeneration=function(e){return this.members.filter(function(t){return t.generation===e})},a.prototype.breed=function(){var e=this;if(!e.isBreeding())return null;var t=e.getById(e.breeders[0]),n=e.getById(e.breeders[1]),a=t.breed(n,e.members.length);return e.members.push(a),a},a}]);var game=angular.module("bloqhead.genetixApp");game.constant("geneDefinitions",function(){var e=[];return e[0]={dom:"Broad Shoulders",rec:"Slender Shoulders",attr:["STR"]},e[1]={dom:"Thick Skull",rec:"Soft Skull",attr:["STR"]},e[2]={dom:"Large Arms",rec:"Small Arms",attr:["STR"]},e[3]={dom:"Large Legs",rec:"Small Legs",attr:["STR"]},e[4]={dom:"Big Chest",rec:"Weak Chest",attr:["STR"]},e[5]={dom:"Tough Jaw",rec:"Weak Jaw",attr:["STR"]},e[6]={dom:"Oafish",rec:"Mousey",attr:["STR"]},e[7]={dom:"",rec:"",attr:["STR"]},e[8]={dom:"",rec:"",attr:["STR"]},e[9]={dom:"",rec:"",attr:["STR"]},e[10]={dom:"",rec:"",attr:["INT"]},e[11]={dom:"",rec:"",attr:["INT"]},e[12]={dom:"",rec:"",attr:["INT"]},e[13]={dom:"",rec:"",attr:["INT"]},e[14]={dom:"Calculated Decisions",rec:"Reckless",attr:["INT"]},e[15]={dom:"Lateral Thinker",rec:"Single Minded",attr:["INT"]},e[16]={dom:"Quick Learner",rec:"Forgetful",attr:["INT"]},e[17]={dom:"",rec:"",attr:["INT"]},e[18]={dom:"",rec:"",attr:["INT"]},e[19]={dom:"",rec:"",attr:["INT"]},e[20]={dom:"",rec:"",attr:["END"]},e[21]={dom:"",rec:"",attr:["END"]},e[22]={dom:"",rec:"",attr:["END"]},e[23]={dom:"",rec:"",attr:["END"]},e[24]={dom:"",rec:"",attr:["END"]},e[25]={dom:"",rec:"",attr:["END"]},e[26]={dom:"",rec:"",attr:["END"]},e[27]={dom:"",rec:"",attr:["END"]},e[28]={dom:"",rec:"",attr:["END"]},e[29]={dom:"",rec:"",attr:["END"]},e[30]={dom:"Eloquent",rec:"Catatonic",attr:["CHR"]},e[31]={dom:"Powerful Voice",rec:"Quiet Voice",attr:["CHR"]},e[32]={dom:"Full Lips",rec:"Thin Lips",attr:["CHR"]},e[33]={dom:"Dark Skin",rec:"Fair Skin",attr:["CHR"]},e[34]={dom:"",rec:"",attr:["CHR"]},e[35]={dom:"",rec:"",attr:["CHR"]},e[36]={dom:"",rec:"",attr:["CHR"]},e[37]={dom:"",rec:"",attr:["CHR"]},e[38]={dom:"",rec:"",attr:["CHR"]},e[39]={dom:"",rec:"",attr:["CHR"]},e[40]={dom:"",rec:"",attr:["LCK"]},e[41]={dom:"",rec:"",attr:["LCK"]},e[42]={dom:"Female",rec:"Male",attr:["LCK"]},e[43]={dom:"",rec:"",attr:["LCK"]},e[44]={dom:"",rec:"",attr:["LCK"]},e[45]={dom:"",rec:"",attr:["LCK"]},e[46]={dom:"",rec:"",attr:["LCK"]},e[47]={dom:"",rec:"",attr:["LCK"]},e[48]={dom:"",rec:"",attr:["LCK"]},e[49]={dom:"",rec:"",attr:["LCK"]},e}()),game.constant("traitDefinitions",function(){var e=[{name:"Handsome",genes:[[0,-200,200],[5,50,255]],requiredTraits:["Male"]},{name:"Pretty",genes:[[0,-200,-100],[4,20,240]],requiredTraits:["Female"]},{name:"Aggressive",genes:[[0,200,255],[2,200,255],[4,200,255],[5,200,255],[14,-255,-150]]},{name:"Female",genes:[[42,0,255]]},{name:"Male",genes:[[42,-255,-1]]},{name:"Handsome Aggressive and something",genes:[[30,0,0]],requiredTraits:["Handsome","Aggressive"]}],t=[],n=function(t){return e.filter(function(e){return t===e.name})[0]},a=function(e){if(angular.isDefined(e.requiredTraits))for(var r=0;r<e.requiredTraits.length;r++){var o=e.requiredTraits[r],i=n(o);t.indexOf(i.name)===-1&&a(i);for(var s=0;s<i.genes.length;s++)e.genes.push(i.genes[s])}t.push(e.name)},r=function(){for(var t=0;t<e.length;t++){var n=e[t];a(n)}return e};return r()}()),game.factory("TraitInspector",["$filter","geneDefinitions","traitDefinitions",function(e,t,n){var a=function(e){this.update(e)};return a.prototype.update=function(e){"undefined"==typeof e&&(e={})},a.prototype.getTraits=function(e){var t=[];if(e.length)for(var a=0;a<n.length;a++){for(var r=n[a],o=!0,i=0;i<r.genes.length&&o===!0;i++){var s=r.genes[i],l=e[s[0]][1]-e[s[0]][0];(l<s[1]||l>s[2])&&(o=!1)}o&&t.push(r)}return t},a.prototype.getAttributes=function(e){var t={STR:0,INT:0,END:0,CHR:0,LCK:0};if(e.length){for(var n=0,a=0,r=0,o=0,i=0,s=0;s<e.length;s++)s<10?n+=e[s][1]-e[s][0]:s<20?a+=e[s][1]-e[s][0]:s<30?r+=e[s][1]-e[s][0]:s<40?o+=e[s][1]-e[s][0]:i+=e[s][1]-e[s][0];t.STR=Math.floor(Math.sqrt((Math.abs(n)+20)/25))*(n<0?-1:1),t.INT=Math.floor(Math.sqrt((Math.abs(a)+20)/25))*(a<0?-1:1),t.END=Math.floor(Math.sqrt((Math.abs(r)+20)/25))*(r<0?-1:1),t.CHR=Math.floor(Math.sqrt((Math.abs(o)+20)/25))*(o<0?-1:1),t.LCK=Math.floor(Math.sqrt((Math.abs(i)+20)/25))*(i<0?-1:1)}return t},a}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqheadGameControl",{template:'<div class=""><button type="button" class="btn btn-xs btn-primary" ng-click="$ctrl.toggleState();"><i class="fa" ng-class="$ctrl.getIcon()"></i></button></div>',controller:["gameService","gameStates",function(e,t){var n=this;n.$onInit=function(){n.currentState=e.getState()},n.toggleState=function(){n.currentState=n.currentState===t.RUNNING?t.PAUSED:t.RUNNING,e.setState(n.currentState)},n.getIcon=function(){return n.currentState===t.RUNNING?"fa-pause":"fa-play"}}]});var game=angular.module("bloqhead.genetixApp");game.component("bloqheadLog",{templateUrl:"components/log/log.html",controller:"bloqhead.controllers.log"}),game.constant("logTypes",{GENERAL:1,BREED:2,ACHIEVEMENT:3}),game.controller("bloqhead.controllers.log",["$scope","logService","logTypes",function(e,t,n){var a=this;a.$onInit=function(){a.messages=[],t.SubscribeNewMessageEvent(e,a.receiveMessages)},a.getLogClass=function(e){var t="list-group-item-",a="";switch(e){case n.GENERAL:a="color-general";break;case n.ACHIEVEMENT:a="color-achievement";break;case n.BREED:a="color-breed";break;default:a=t+"none"}return a},a.receiveMessages=function(e,t){a.messages=t}}]),game.service("logService",["$rootScope","logTypes",function(e,t){var n=this;n.init=function(){n.messages=[],n.logGeneralMessage("Welcome to Genetix!")},n.logGeneralMessage=function(a){n.messages.push({type:t.GENERAL,timestamp:Date.now(),message:a}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logBreedMessage=function(a){n.messages.push({type:t.BREED,timestamp:Date.now(),message:a}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.logAchievementMessage=function(a){n.messages.push({type:t.ACHIEVEMENT,timestamp:Date.now(),message:a}),n.messages.length>100&&n.messages.splice(0,1),e.$emit("newMessageEvent",n.messages)},n.SubscribeNewMessageEvent=function(t,a){var r=e.$on("newMessageEvent",a.bind(this));t.$on("$destroy",r),e.$emit("newMessageEvent",n.messages)}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqhead.components.mainGame",{templateUrl:"components/mainGame/mainGame.html",controller:"bloqhead.controllers.mainGame"}),game.controller("bloqhead.controllers.mainGame",["$scope","populationService",function(e,t){var n=this;n.$onInit=function(){n.breeders=[],n.population=[],n.maxPopulation=0,t.SubscribePopulationUpdateEvent(e,n.updatePopulation),t.SubscribeBreederUpdateEvent(e,n.updateBreeders)},n.updateGene=function(e,n,a){t.updateMember(e,n,a)},n.addBreeder=function(e){t.addBreeder(e)},n.removeBreeder=function(e){t.removeBreeder(e)},n.updateBreeders=function(e,t){n.breeders=t},n.updatePopulation=function(e,t){n.population=t.population,n.maxPopulation=t.maxSize}}]),game.component("bloqheadBreeder",{templateUrl:"components/mainGame/breeder.html",controller:"bloqheader.controllers.breeder",bindings:{unit:"<"}}),game.controller("bloqheader.controllers.breeder",function(){var e=this;e.$onInit=function(){}});var game=angular.module("bloqhead.genetixApp");game.constant("achievementSetup",{achievements:[{aid:"A_BIRTHS",name:"The Chosen One",ranks:[[1,[["R_GOLD",100],["R_WOOD",100]]],[18,[["M_HAPPINESS"]]]]}],perks:[{pid:"M_HAPPINESS",name:"New Mechanic: Happiness",desc:"Happiness is a representation of how content your population is.",once:!0},{pid:"R_GOLD",name:"Earned Bonus Resources: Gold",desc:"[%1] gold has been added to your coffers."},{pid:"R_WOOD",name:"Earned Bonus Resources: Wood",desc:"[%1] wood has been added to your coffers."}]}),game.service("achievementService",["$filter","logService","achievementSetup",function(e,t,n){var a=this;a.init=function(e){a.progress=e||{achievements:[],perks:[]}},a.updateProgress=function(r,o){var i,s=e("filter")(a.progress.achievements,{aid:r});0===s.length?(i={aid:r,amount:0},a.progress.achievements.push(i)):i=s[0];var l=i.amount,d=i.amount+o;i.amount=d;for(var c=e("filter")(n.achievements,{aid:r})[0],u=0;u<c.ranks.length;u++){var p=c.ranks[u][0];if(p>l&&p<=d){t.logAchievementMessage("Achievement Earned - "+c.name+" ("+p+")");for(var m=0;m<c.ranks[u][1].length;m++)a.applyPerk(c.ranks[u][1][m])}}},a.applyPerk=function(r){var o=r[0],i=e("filter")(n.perks,{pid:o})[0];if(i.once){var s=e("filter")(a.progress.perks,{pid:o});if(0!==s.length)return}for(var l=i.name+" - "+i.desc,d=1;d<r.length;d++)l=l.replace("[%"+d+"]",r[d]);switch(t.logAchievementMessage(l),o){case"R_GOLD":break;case"R_WOOD":}},a.init()}]);var game=angular.module("bloqhead.genetixApp");game.constant("gameStates",{PAUSED:0,RUNNING:1}),game.constant("defaultConfig",{gameServiceConfig:{stepTimeMs:1e3},populationServiceConfig:{breedSteps:6,populationConfig:{initialSize:2,maxSize:22,breederMutationBits:5,breederGenesUnlocked:[0,1,2,3,4,5,6,7,8,9,42],breederMuatationChance:10}}}),game.service("gameService",["$window","$rootScope","gameStates","logService","defaultConfig",function(e,t,n,a,r){var o=this;o.init=function(e){e=e||r,o.stepTimeMs=e.gameServiceConfig.stepTimeMs||1e3,o.lastTime=0,o.currentState=n.PAUSED,o.startGame(e)},o.getState=function(){return o.currentState},o.setState=function(e){o.currentState=e,e===n.PAUSED?a.logGeneralMessage("Game paused."):a.logGeneralMessage("Game resumed.")},o.gameLoop=function(a){for(var r=this,o=0;r.lastTime+a>r.stepTimeMs*(o+1);)o++;r.lastTime=r.lastTime-r.stepTimeMs*o,r.currentState==n.RUNNING&&o>0&&t.$apply(t.$emit("gameLoopEvent",o)),e.requestAnimationFrame(this.gameLoop.bind(this))},o.SubscribeGameLoopEvent=function(e,n){var a=t.$on("gameLoopEvent",n.bind(this));e.$on("$destroy",a)},o.SubscribeInitializeEvent=function(e,n){var a=t.$on("initializeEvent",n.bind(this));e.$on("$destroy",a)},o.startGame=function(e){e=e||r,o.currentState=n.PAUSED,a.init(!1),t.$emit("initializeEvent",e),o.gameLoop(0),o.currentState=n.RUNNING}}]);var game=angular.module("bloqhead.genetixApp");game.service("populationService",["$rootScope","gameService","Population","logService","achievementService",function(e,t,n,a,r){var o=this;o.init=function(e,t){t=t||{};var r=t.populationServiceConfig||{};o.breedSteps=r.breedSteps||o.breedSteps||6,o.stepsSinceBreed=0,o.population=new n(r.populationConfig),o.logService=a},o.handleGameLoop=function(t,n){var i=!1;if("gameLoopEvent"!==t.name)return void console.log("populateService.handleGameLoop - Invalid event: "+t);if(o.population.isBreeding()){for(o.stepsSinceBreed+=n;o.stepsSinceBreed>=o.breedSteps;){o.stepsSinceBreed-=o.breedSteps;var s=o.population.breed();null!==s&&(a.logBreedMessage("New offspring! "+s.name),r.updateProgress("A_BIRTHS",1),i=!0)}i&&e.$emit("populationUpdateEvent",{population:o.population.members,maxSize:o.population.maxSize})}},o.addBreeder=function(t){o.population.breeders.indexOf(t)===-1&&(o.population.breeders.push(t),e.$emit("breederUpdateEvent",o.population.breeders),o.logService.logBreedMessage("Breeder added: "+o.population.getById(t).name))},o.removeBreeder=function(t){var n=o.population.breeders.indexOf(t);n!==-1&&(o.population.breeders.splice(n,1),o.population.isBreeding()||(o.stepsSinceBreed=0),e.$emit("breederUpdateEvent",o.population.breeders),o.logService.logBreedMessage("Breeder removed: "+o.population.getById(t).name))},o.updateMember=function(t,n,a){var r=o.population.getById(t);r.genes[n]=a,r.update(),e.$emit("populationUpdateEvent",o.population.members)},o.SubscribeBreederUpdateEvent=function(t,n){var a=e.$on("breederUpdateEvent",n);t.$on("$destroy",a),e.$emit("breederUpdateEvent",o.population.breeders)},o.SubscribePopulationUpdateEvent=function(t,n){var a=e.$on("populationUpdateEvent",n.bind(this));t.$on("$destroy",a),e.$emit("populationUpdateEvent",{population:o.population.members,maxSize:o.population.maxSize})},t.SubscribeGameLoopEvent(e,o.handleGameLoop),t.SubscribeInitializeEvent(e,o.init)}]);var app=angular.module("bloqhead.genetixApp");app.component("bloqhead.components.testInterface",{templateUrl:"components/testInterface/testInterface.html",controller:"bloqhead.controllers.testInterface"}),app.component("breederTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){var a=this;a.lastBreederID=0,a.newBreederGender="Male",a.killBreeder=function(e){a.units.splice(a.units.indexOf(e),1)},a.addNewBreeder=function(){for(var n=[],r=0;r<t.length;r++)n.push([0,0,0]);var o="Male"==a.newBreederGender?255:0;n[42]=[o,255-o,0];var i=new e({id:a.lastBreederID++,generation:0,scale:6,genes:n});i.update(),a.units.unshift(i)}}],templateUrl:"components/testInterface/breederTab.html"}),app.component("matingTab",{bindings:{units:"="},controller:["Breeder","geneDefinitions","traitDefinitions",function(e,t,n){}],templateUrl:"components/testInterface/matingTab.html"}),app.component("genomeEditor",{bindings:{unit:"="},controller:["geneDefinitions",function(e){var t=this;t.$onInit=function(){t.geneDefinitions=e,t.expando=!1},t.randomizeName=function(){t.unit.name=t.unit.getRandomName()},t.randomize=function(e){t.unit.genes[e]=[randomIntFromInterval(0,255),randomIntFromInterval(0,255),randomIntFromInterval(0,255)]},t.randomizeAll=function(){for(var e=0;e<t.unit.genes.length;e++)t.randomize(e);var n=0===randomIntFromInterval(0,1)?255:0;t.unit.genes[42]=[n,255-n,0],t.unit.update()}}],templateUrl:"components/testInterface/genomeEditor.html"}),app.controller("bloqhead.controllers.testInterface",["$scope","$timeout","gameService","Breeder","geneDefinitions","traitDefinitions",function(e,t,n,a,r,o){var i=this;i.$onInit=function(){i.geneDefinitions=r,i.traitDefinitions=o,i.units=[]}}]);var game=angular.module("bloqhead.genetixApp");game.component("bloqheadPlayerBox",{transclude:!0,require:{mainCtrl:"^bloqhead.components.mainGame"},templateUrl:"components/playerBox/playerBox.html",controller:"bloqhead.controllers.playerBox",bindings:{title:"@",footer:"@"}}),game.controller("bloqhead.controllers.playerBox",function(){var e=this;e.$onInit=function(){e.unit=e.mainCtrl.unit}}),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html",'<nav class="navbar navbar-inverse navbar-fixed-top"><div class="container-fluid"><ul class="nav navbar-nav"><li><a ui-sref="home.main">Main</a></li><li><a ui-sref="home.test">Test Interface</a></li></ul><bloqhead-game-control class="navbar-brand navbar-right"></bloqhead-game-control></div></nav><div ui-view=""></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/log/log.html",'<div class="log-component"><ul class="list-group"><li ng-repeat="item in $ctrl.messages track by $index" ng-class="$ctrl.getLogClass(item.type)">[<span ng-bind="item.timestamp|date:\'MM/dd HH:mm:ss\'"></span>]&nbsp; <span ng-bind="item.message"></span></li></ul></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/breeder.html",'<div class="bloqhead-component"><h4>{{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}"><table class="table table-bordered table-condensed genomeEditor"><thead><tr><th style="width: 20%">STR</th><th style="width: 20%">INT</th><th style="width: 20%">END</th><th style="width: 20%">CHR</th><th style="width: 20%">LCK</th></tr></thead><tbody><tr><td><span ng-bind="$ctrl.unit.attributes.STR"></span></td><td><span ng-bind="$ctrl.unit.attributes.INT"></span></td><td><span ng-bind="$ctrl.unit.attributes.END"></span></td><td><span ng-bind="$ctrl.unit.attributes.CHR"></span></td><td><span ng-bind="$ctrl.unit.attributes.LCK"></span></td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/mainGame/mainGame.html",'<div class="col-xs-12"><div class="row"><div class="col-xs-12 col-sm-8 col-md-4 col-lg-3"><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Goals"><bloqhead-goal-list></bloqhead-goal-list></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12"><bloqhead-player-box title="Resources"></bloqhead-player-box></div></div></div><div class="col-xs-12 col-sm-8 col-md-4 col-lg-6"><div class="row"><div class="col-lg-8"><bloqhead-player-box title="Log"><bloqhead-log></bloqhead-log></bloqhead-player-box></div><div class="col-lg-4"><bloqhead-player-box title="???"></bloqhead-player-box></div></div><div class="row"><div class="col-xs-12 col-lg-6" ng-repeat="breederid in $ctrl.breeders"><bloqhead-player-box title="Breeder"><button type="button" class="close" ng-click="$ctrl.removeBreeder(breederid)"><span>&times;</span></button><bloqhead-breeder unit="$ctrl.population[breederid]"></bloqhead-breeder></bloqhead-player-box></div></div></div><div class="col-xs-12 col-sm-8 col-md-4 col-lg-3"><bloqhead-player-box title="Population [{{$ctrl.population.length}} / {{$ctrl.maxPopulation}}] "><div ng-repeat="child in $ctrl.population"><bloqhead-breeder unit="child" update-gene="$ctrl.updateGene($index, $geneIndex, $values, false)"></bloqhead-breeder><button class="btn btn-sm btn-primary" ng-click="$ctrl.addBreeder(child.id)">Breed Me</button></div></bloqhead-player-box></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/breederTab.html",'<div class="row"><div class="col-xs-6"><div class="btn-group" role="group"><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.addNewBreeder()">Add new Breeder</button><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Gender: {{$ctrl.newBreederGender}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Male\'">Male</a></li><li><a data-target="" ng-click="$ctrl.newBreederGender = \'Female\'">Female</a></li></ul></div></div></div></div><div class="row"><div class="col-xs-12 col-sm-6 col-md-4" ng-repeat="unit in $ctrl.units"><button type="button" class="close" ng-click="$ctrl.killBreeder(unit)"><span>&times;</span></button><genome-editor unit="unit"></genome-editor></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/genomeEditor.html",'<div class="bloqhead-component"><h4><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomizeName();"><i class="fa fa-asterisk"></i></button> {{$ctrl.unit.name}} <i class="fa fa-star" ng-repeat="trait in $ctrl.unit.traits" data-toggle="tooltip" rel="tooltip" title="{{trait.name}}"></i></h4><img class="img-responsive" ng-src="{{$ctrl.unit.redGreenImage}}" ng-click="$ctrl.expando = !$ctrl.expando" data-toggle="tooltip" rel="tooltip" title="Click to expand/collapse"><div ng-show="$ctrl.expando" style="height: 400px; overflow-y: scroll; margin-top:5px"><table class="genomeEditor table table-condensed"><thead><tr><th>&nbsp;</th><th>Dominant</th><th>Recessive</th><th>Values (D/R/M)</th><th><button type="button" class="btn btn-xs btn-warning" ng-click="$ctrl.randomizeAll();"><i class="fa fa-asterisk"></i></button></th></tr></thead><tbody><tr ng-repeat="gene in $ctrl.geneDefinitions"><td ng-bind="$index"></td><td ng-bind="gene.dom"></td><td ng-bind="gene.rec"></td><td><input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][1]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][0]" ng-change="$ctrl.unit.update()"> <input type="number" min="0" max="255" ng-model="$ctrl.unit.genes[$index][2]" ng-change="$ctrl.unit.update()"></td><td><button type="button" class="btn btn-xs btn-success" ng-click="$ctrl.randomize($index);"><i class="fa fa-asterisk"></i></button></td></tr></tbody></table></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/matingTab.html",'<div class="row"><div class="col-xs-12"><div class="btn-group" role="group"><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Mother: {{$ctrl.mother.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.mother = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Female\'" ng-bind="unit.name"></a></li></ul></div><div class="dropdown btn-group"><div type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">Father: {{$ctrl.father.name}} <span class="caret"></span></div><ul class="dropdown-menu"><li><a data-target="" ng-click="$ctrl.father = unit" ng-repeat="unit in $ctrl.units | hasTrait:\'Male\'" ng-bind="unit.name"></a></li></ul></div><button type="button" class="btn btn-info btn-group" ng-click="$ctrl.mate()" ng-disabled="!$ctrl.father || !$ctrl.mother">Mate</button></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/testInterface/testInterface.html",'<div><ul class="nav nav-tabs" role="tablist"><li role="presentation" class="active"><a data-target="#breeders" role="tab" data-toggle="tab">Breeders</a></li><li role="presentation"><a data-target="#mating" role="tab" data-toggle="tab">Mating</a></li></ul><div class="tab-content"><div role="tabpanel" class="tab-pane active" id="breeders"><breeder-tab units="$ctrl.units"></breeder-tab></div><div role="tabpanel" class="tab-pane" id="mating"><mating-tab units="$ctrl.units"></mating-tab></div></div></div>')}])}(),function(e){try{e=angular.module("bloqhead.genetixApp")}catch(t){e=angular.module("bloqhead.genetixApp",[])}e.run(["$templateCache",function(e){e.put("components/playerBox/playerBox.html",'<div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" ng-bind="$ctrl.title"></h3></div><div class="panel-body"><ng-transclude></ng-transclude></div><div class="panel-footer"><span ng-bind="$ctrl.footer"></span></div></div>')}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
